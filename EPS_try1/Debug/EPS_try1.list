
EPS_try1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001154  08006e18  08006e18  00016e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f74  08007f74  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200001e4  08008160  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08008160  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107f9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002162  00000000  00000000  00030a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00032b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a4c  00000000  00000000  00034a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001224b  00000000  00000000  0004c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d0a  00000000  00000000  0005e6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f03e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000555c  00000000  00000000  000f043c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e00 	.word	0x08006e00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08006e00 	.word	0x08006e00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <loop_oled>:
char uartBuf[100];


char buf[20];
uint32_t numTicks = 0;//for loop_ultrasonic
void loop_oled(float distance) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
	// Blue button pressed - repeat the test
    //if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
    	ssd1306_Init(); //very imp....must
 8000f66:	f000 faa9 	bl	80014bc <ssd1306_Init>
    	ssd1306_Fill(White);//fill background with white
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fb10 	bl	8001590 <ssd1306_Fill>

    	    sprintf(buf,"%f",distance);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff faf1 	bl	8000558 <__aeabi_f2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	490a      	ldr	r1, [pc, #40]	; (8000fa4 <loop_oled+0x48>)
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <loop_oled+0x4c>)
 8000f7e:	f003 fcef 	bl	8004960 <siprintf>

    	    ssd1306_SetCursor(2,0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	2002      	movs	r0, #2
 8000f86:	f000 fc51 	bl	800182c <ssd1306_SetCursor>

    	    ssd1306_WriteString(buf, Font_11x18, Black);
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <loop_oled+0x50>)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	ca06      	ldmia	r2, {r1, r2}
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <loop_oled+0x4c>)
 8000f92:	f000 fc25 	bl	80017e0 <ssd1306_WriteString>

    	    ssd1306_UpdateScreen();
 8000f96:	f000 fb1f 	bl	80015d8 <ssd1306_UpdateScreen>
   // }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	08006e18 	.word	0x08006e18
 8000fa8:	200002e4 	.word	0x200002e4
 8000fac:	20000000 	.word	0x20000000

08000fb0 <loop_ultrasonic>:

float loop_ultrasonic(){
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
      //Set TRIG to LOW for few uSec
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	4833      	ldr	r0, [pc, #204]	; (8001088 <loop_ultrasonic+0xd8>)
 8000fbc:	f001 f99e 	bl	80022fc <HAL_GPIO_WritePin>
		usDelay(3);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 fa0b 	bl	80013dc <usDelay>

		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fcc:	482e      	ldr	r0, [pc, #184]	; (8001088 <loop_ultrasonic+0xd8>)
 8000fce:	f001 f995 	bl	80022fc <HAL_GPIO_WritePin>
		usDelay(10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f000 fa02 	bl	80013dc <usDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <loop_ultrasonic+0xd8>)
 8000fe0:	f001 f98c 	bl	80022fc <HAL_GPIO_WritePin>

		//2. Wait for ECHO pin rising edge
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8000fe4:	bf00      	nop
 8000fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fea:	4827      	ldr	r0, [pc, #156]	; (8001088 <loop_ultrasonic+0xd8>)
 8000fec:	f001 f96e 	bl	80022cc <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f7      	beq.n	8000fe6 <loop_ultrasonic+0x36>

		//3. Start measuring ECHO pulse width in usec
		numTicks = 0;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <loop_ultrasonic+0xdc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8000ffc:	e007      	b.n	800100e <loop_ultrasonic+0x5e>
		{
			numTicks++;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <loop_ultrasonic+0xdc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <loop_ultrasonic+0xdc>)
 8001006:	6013      	str	r3, [r2, #0]
			usDelay(2); //2.8usec
 8001008:	2002      	movs	r0, #2
 800100a:	f000 f9e7 	bl	80013dc <usDelay>
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	481d      	ldr	r0, [pc, #116]	; (8001088 <loop_ultrasonic+0xd8>)
 8001014:	f001 f95a 	bl	80022cc <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d0ef      	beq.n	8000ffe <loop_ultrasonic+0x4e>
		};

		//4. Estimate distance in cm
		distance = (numTicks + 0.0f)*2.8*speedOfSound;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <loop_ultrasonic+0xdc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001090 <loop_ultrasonic+0xe0>
 800102e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001032:	ee17 0a90 	vmov	r0, s15
 8001036:	f7ff fa8f 	bl	8000558 <__aeabi_f2d>
 800103a:	a311      	add	r3, pc, #68	; (adr r3, 8001080 <loop_ultrasonic+0xd0>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fae2 	bl	8000608 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4614      	mov	r4, r2
 800104a:	461d      	mov	r5, r3
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <loop_ultrasonic+0xe4>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa82 	bl	8000558 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4620      	mov	r0, r4
 800105a:	4629      	mov	r1, r5
 800105c:	f7ff fad4 	bl	8000608 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <loop_ultrasonic+0xe8>)
 8001070:	6013      	str	r3, [r2, #0]
			 	 	  	//	sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
			 	 	  	//	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

			 	 	  	//	HAL_Delay(1000);

		return distance;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <loop_ultrasonic+0xe8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	ee07 3a90 	vmov	s15, r3

}
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	66666666 	.word	0x66666666
 8001084:	40066666 	.word	0x40066666
 8001088:	40020000 	.word	0x40020000
 800108c:	200002f8 	.word	0x200002f8
 8001090:	00000000 	.word	0x00000000
 8001094:	3c8c7e28 	.word	0x3c8c7e28
 8001098:	200002e0 	.word	0x200002e0

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t numTicks = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fe11 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f819 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 f927 	bl	8001300 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b2:	f000 f8fb 	bl	80012ac <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80010b6:	f000 f8ad 	bl	8001214 <MX_TIM4_Init>
  MX_I2C1_Init();
 80010ba:	f000 f87d 	bl	80011b8 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	  distance =loop_ultrasonic();
 80010be:	f7ff ff77 	bl	8000fb0 <loop_ultrasonic>
 80010c2:	eef0 7a40 	vmov.f32	s15, s0
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <main+0x40>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
  	  loop_oled(distance);
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <main+0x40>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	f7ff ff41 	bl	8000f5c <loop_oled>
  	  distance =loop_ultrasonic();
 80010da:	e7f0      	b.n	80010be <main+0x22>
 80010dc:	200002e0 	.word	0x200002e0

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 ffc4 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <SystemClock_Config+0xd0>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <SystemClock_Config+0xd0>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <SystemClock_Config+0xd0>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <SystemClock_Config+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800112c:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <SystemClock_Config+0xd4>)
 800112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <SystemClock_Config+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001154:	2310      	movs	r3, #16
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001158:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800115e:	2304      	movs	r3, #4
 8001160:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001162:	2307      	movs	r3, #7
 8001164:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fd3c 	bl	8002be8 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001176:	f000 f963 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 ff9e 	bl	80030d8 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011a2:	f000 f94d 	bl	8001440 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	; 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_I2C1_Init+0x50>)
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <MX_I2C1_Init+0x54>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_I2C1_Init+0x50>)
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_I2C1_Init+0x58>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_I2C1_Init+0x50>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_I2C1_Init+0x50>)
 80011f6:	f001 f89b 	bl	8002330 <HAL_I2C_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 f91e 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000200 	.word	0x20000200
 800120c:	40005400 	.word	0x40005400
 8001210:	000186a0 	.word	0x000186a0

08001214 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM4_Init+0x90>)
 8001232:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <MX_TIM4_Init+0x94>)
 8001234:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_TIM4_Init+0x90>)
 8001238:	2253      	movs	r2, #83	; 0x53
 800123a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM4_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_TIM4_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_TIM4_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_TIM4_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001254:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MX_TIM4_Init+0x90>)
 8001256:	f002 f95f 	bl	8003518 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001260:	f000 f8ee 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_TIM4_Init+0x90>)
 8001272:	f002 f9a0 	bl	80035b6 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800127c:	f000 f8e0 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_TIM4_Init+0x90>)
 800128e:	f002 fb73 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001298:	f000 f8d2 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000254 	.word	0x20000254
 80012a8:	40000800 	.word	0x40000800

080012ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_USART2_UART_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f002 fbb6 	bl	8003a54 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f8a7 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000029c 	.word	0x2000029c
 80012fc:	40004400 	.word	0x40004400

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_GPIO_Init+0xd0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a25      	ldr	r2, [pc, #148]	; (80013d0 <MX_GPIO_Init+0xd0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|TRIG_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_GPIO_Init+0xd4>)
 8001372:	f000 ffc3 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	4813      	ldr	r0, [pc, #76]	; (80013d8 <MX_GPIO_Init+0xd8>)
 800138c:	f000 fe1a 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|TRIG_Pin;
 8001390:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <MX_GPIO_Init+0xd4>)
 80013aa:	f000 fe0b 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80013ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0xd4>)
 80013c4:	f000 fdfe 	bl	8001fc4 <HAL_GPIO_Init>

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020800 	.word	0x40020800

080013dc <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d801      	bhi.n	80013ee <usDelay+0x12>
 80013ea:	2302      	movs	r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <usDelay+0x60>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <usDelay+0x60>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <usDelay+0x60>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <usDelay+0x60>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <usDelay+0x60>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <usDelay+0x60>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001414:	bf00      	nop
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <usDelay+0x60>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d1f9      	bne.n	8001416 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <usDelay+0x60>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <usDelay+0x60>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6113      	str	r3, [r2, #16]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40000800 	.word	0x40000800

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>

0800144a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af04      	add	r7, sp, #16
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	2200      	movs	r2, #0
 8001474:	2178      	movs	r1, #120	; 0x78
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <ssd1306_WriteCommand+0x2c>)
 8001478:	f001 f89e 	bl	80025b8 <HAL_I2C_Mem_Write>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000200 	.word	0x20000200

08001488 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af04      	add	r7, sp, #16
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f04f 32ff 	mov.w	r2, #4294967295
 800149a:	9202      	str	r2, [sp, #8]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	2178      	movs	r1, #120	; 0x78
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <ssd1306_WriteData+0x30>)
 80014aa:	f001 f885 	bl	80025b8 <HAL_I2C_Mem_Write>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000200 	.word	0x20000200

080014bc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80014c0:	f7ff ffc3 	bl	800144a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f000 fc73 	bl	8001db0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f9da 	bl	8001884 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014d0:	2020      	movs	r0, #32
 80014d2:	f7ff ffc1 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffbe 	bl	8001458 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014dc:	20b0      	movs	r0, #176	; 0xb0
 80014de:	f7ff ffbb 	bl	8001458 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014e2:	20c8      	movs	r0, #200	; 0xc8
 80014e4:	f7ff ffb8 	bl	8001458 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ffb5 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014ee:	2010      	movs	r0, #16
 80014f0:	f7ff ffb2 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014f4:	2040      	movs	r0, #64	; 0x40
 80014f6:	f7ff ffaf 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80014fa:	20ff      	movs	r0, #255	; 0xff
 80014fc:	f000 f9ae 	bl	800185c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001500:	20a1      	movs	r0, #161	; 0xa1
 8001502:	f7ff ffa9 	bl	8001458 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001506:	20a6      	movs	r0, #166	; 0xa6
 8001508:	f7ff ffa6 	bl	8001458 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800150c:	20a8      	movs	r0, #168	; 0xa8
 800150e:	f7ff ffa3 	bl	8001458 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001512:	203f      	movs	r0, #63	; 0x3f
 8001514:	f7ff ffa0 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001518:	20a4      	movs	r0, #164	; 0xa4
 800151a:	f7ff ff9d 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800151e:	20d3      	movs	r0, #211	; 0xd3
 8001520:	f7ff ff9a 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff ff97 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800152a:	20d5      	movs	r0, #213	; 0xd5
 800152c:	f7ff ff94 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001530:	20f0      	movs	r0, #240	; 0xf0
 8001532:	f7ff ff91 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001536:	20d9      	movs	r0, #217	; 0xd9
 8001538:	f7ff ff8e 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800153c:	2022      	movs	r0, #34	; 0x22
 800153e:	f7ff ff8b 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001542:	20da      	movs	r0, #218	; 0xda
 8001544:	f7ff ff88 	bl	8001458 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001548:	2012      	movs	r0, #18
 800154a:	f7ff ff85 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800154e:	20db      	movs	r0, #219	; 0xdb
 8001550:	f7ff ff82 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001554:	2020      	movs	r0, #32
 8001556:	f7ff ff7f 	bl	8001458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800155a:	208d      	movs	r0, #141	; 0x8d
 800155c:	f7ff ff7c 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001560:	2014      	movs	r0, #20
 8001562:	f7ff ff79 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001566:	2001      	movs	r0, #1
 8001568:	f000 f98c 	bl	8001884 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f80f 	bl	8001590 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001572:	f000 f831 	bl	80015d8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <ssd1306_Init+0xd0>)
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <ssd1306_Init+0xd0>)
 800157e:	2200      	movs	r2, #0
 8001580:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001582:	4b02      	ldr	r3, [pc, #8]	; (800158c <ssd1306_Init+0xd0>)
 8001584:	2201      	movs	r2, #1
 8001586:	711a      	strb	r2, [r3, #4]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200006fc 	.word	0x200006fc

08001590 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e00d      	b.n	80015bc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <ssd1306_Fill+0x1a>
 80015a6:	2100      	movs	r1, #0
 80015a8:	e000      	b.n	80015ac <ssd1306_Fill+0x1c>
 80015aa:	21ff      	movs	r1, #255	; 0xff
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <ssd1306_Fill+0x44>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d3ed      	bcc.n	80015a0 <ssd1306_Fill+0x10>
    }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200002fc 	.word	0x200002fc

080015d8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e016      	b.n	8001612 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	3b50      	subs	r3, #80	; 0x50
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff34 	bl	8001458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff31 	bl	8001458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015f6:	2010      	movs	r0, #16
 80015f8:	f7ff ff2e 	bl	8001458 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4a08      	ldr	r2, [pc, #32]	; (8001624 <ssd1306_UpdateScreen+0x4c>)
 8001602:	4413      	add	r3, r2
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff3e 	bl	8001488 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	3301      	adds	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b07      	cmp	r3, #7
 8001616:	d9e5      	bls.n	80015e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200002fc 	.word	0x200002fc

08001628 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	460b      	mov	r3, r1
 8001634:	71bb      	strb	r3, [r7, #6]
 8001636:	4613      	mov	r3, r2
 8001638:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db3d      	blt.n	80016be <ssd1306_DrawPixel+0x96>
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	2b3f      	cmp	r3, #63	; 0x3f
 8001646:	d83a      	bhi.n	80016be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001648:	797b      	ldrb	r3, [r7, #5]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11a      	bne.n	8001684 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	08db      	lsrs	r3, r3, #3
 8001654:	b2d8      	uxtb	r0, r3
 8001656:	4603      	mov	r3, r0
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	4413      	add	r3, r2
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <ssd1306_DrawPixel+0xa4>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	b25a      	sxtb	r2, r3
 8001662:	79bb      	ldrb	r3, [r7, #6]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b259      	sxtb	r1, r3
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	4603      	mov	r3, r0
 8001678:	01db      	lsls	r3, r3, #7
 800167a:	4413      	add	r3, r2
 800167c:	b2c9      	uxtb	r1, r1
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <ssd1306_DrawPixel+0xa4>)
 8001680:	54d1      	strb	r1, [r2, r3]
 8001682:	e01d      	b.n	80016c0 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	b2d8      	uxtb	r0, r3
 800168c:	4603      	mov	r3, r0
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	4413      	add	r3, r2
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <ssd1306_DrawPixel+0xa4>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	b25a      	sxtb	r2, r3
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	b259      	sxtb	r1, r3
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4603      	mov	r3, r0
 80016b2:	01db      	lsls	r3, r3, #7
 80016b4:	4413      	add	r3, r2
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <ssd1306_DrawPixel+0xa4>)
 80016ba:	54d1      	strb	r1, [r2, r3]
 80016bc:	e000      	b.n	80016c0 <ssd1306_DrawPixel+0x98>
        return;
 80016be:	bf00      	nop
    }
}
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200002fc 	.word	0x200002fc

080016d0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4604      	mov	r4, r0
 80016d8:	1d38      	adds	r0, r7, #4
 80016da:	e880 0006 	stmia.w	r0, {r1, r2}
 80016de:	461a      	mov	r2, r3
 80016e0:	4623      	mov	r3, r4
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	4613      	mov	r3, r2
 80016e6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b1f      	cmp	r3, #31
 80016ec:	d902      	bls.n	80016f4 <ssd1306_WriteChar+0x24>
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b7e      	cmp	r3, #126	; 0x7e
 80016f2:	d901      	bls.n	80016f8 <ssd1306_WriteChar+0x28>
        return 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e06d      	b.n	80017d4 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016f8:	4b38      	ldr	r3, [pc, #224]	; (80017dc <ssd1306_WriteChar+0x10c>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	793b      	ldrb	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	2b80      	cmp	r3, #128	; 0x80
 8001704:	dc06      	bgt.n	8001714 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <ssd1306_WriteChar+0x10c>)
 8001708:	885b      	ldrh	r3, [r3, #2]
 800170a:	461a      	mov	r2, r3
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001710:	2b40      	cmp	r3, #64	; 0x40
 8001712:	dd01      	ble.n	8001718 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001714:	2300      	movs	r3, #0
 8001716:	e05d      	b.n	80017d4 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	e04c      	b.n	80017b8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	3b20      	subs	r3, #32
 8001724:	7979      	ldrb	r1, [r7, #5]
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4619      	mov	r1, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	440b      	add	r3, r1
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	e034      	b.n	80017a8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d012      	beq.n	8001774 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <ssd1306_WriteChar+0x10c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b2d8      	uxtb	r0, r3
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <ssd1306_WriteChar+0x10c>)
 800175e:	885b      	ldrh	r3, [r3, #2]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4413      	add	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	7bba      	ldrb	r2, [r7, #14]
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff ff5b 	bl	8001628 <ssd1306_DrawPixel>
 8001772:	e016      	b.n	80017a2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <ssd1306_WriteChar+0x10c>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b2d8      	uxtb	r0, r3
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <ssd1306_WriteChar+0x10c>)
 8001784:	885b      	ldrh	r3, [r3, #2]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4413      	add	r3, r2
 800178e:	b2d9      	uxtb	r1, r3
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	f7ff ff43 	bl	8001628 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	793b      	ldrb	r3, [r7, #4]
 80017aa:	461a      	mov	r2, r3
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d3c5      	bcc.n	800173e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	797b      	ldrb	r3, [r7, #5]
 80017ba:	461a      	mov	r2, r3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4293      	cmp	r3, r2
 80017c0:	d3ad      	bcc.n	800171e <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <ssd1306_WriteChar+0x10c>)
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <ssd1306_WriteChar+0x10c>)
 80017d0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3724      	adds	r7, #36	; 0x24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	200006fc 	.word	0x200006fc

080017e0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	1d38      	adds	r0, r7, #4
 80017ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80017ee:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80017f0:	e012      	b.n	8001818 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	7818      	ldrb	r0, [r3, #0]
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	1d3a      	adds	r2, r7, #4
 80017fa:	ca06      	ldmia	r2, {r1, r2}
 80017fc:	f7ff ff68 	bl	80016d0 <ssd1306_WriteChar>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d002      	beq.n	8001812 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	e008      	b.n	8001824 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e8      	bne.n	80017f2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	781b      	ldrb	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <ssd1306_SetCursor+0x2c>)
 8001842:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <ssd1306_SetCursor+0x2c>)
 800184a:	805a      	strh	r2, [r3, #2]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	200006fc 	.word	0x200006fc

0800185c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001866:	2381      	movs	r3, #129	; 0x81
 8001868:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fdf3 	bl	8001458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fdef 	bl	8001458 <ssd1306_WriteCommand>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001894:	23af      	movs	r3, #175	; 0xaf
 8001896:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <ssd1306_SetDisplayOn+0x38>)
 800189a:	2201      	movs	r2, #1
 800189c:	715a      	strb	r2, [r3, #5]
 800189e:	e004      	b.n	80018aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80018a0:	23ae      	movs	r3, #174	; 0xae
 80018a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <ssd1306_SetDisplayOn+0x38>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fdd3 	bl	8001458 <ssd1306_WriteCommand>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200006fc 	.word	0x200006fc

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fe:	2007      	movs	r0, #7
 8001900:	f000 fb2c 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_I2C_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12c      	bne.n	800198c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_I2C_MspInit+0x88>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001960:	2304      	movs	r3, #4
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <HAL_I2C_MspInit+0x8c>)
 800196c:	f000 fb2a 	bl	8001fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_I2C_MspInit+0x88>)
 800197a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_I2C_MspInit+0x88>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40005400 	.word	0x40005400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_TIM_Base_MspInit+0x3c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10d      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_TIM_Base_MspInit+0x40>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_TIM_Base_MspInit+0x40>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_TIM_Base_MspInit+0x40>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40000800 	.word	0x40000800
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_UART_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a5a:	f000 fab3 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac0:	f000 f956 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_kill>:

int _kill(int pid, int sig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae2:	f002 fa79 	bl	8003fd8 <__errno>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2216      	movs	r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
	return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_exit>:

void _exit (int status)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe7 	bl	8001ad8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0a:	e7fe      	b.n	8001b0a <_exit+0x12>

08001b0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1e:	f3af 8000 	nop.w
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
	}

return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e009      	b.n	8001b6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf1      	blt.n	8001b58 <_write+0x12>
	}
	return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_close>:

int _close(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	return -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_isatty>:

int _isatty(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f002 f9de 	bl	8003fd8 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20018000 	.word	0x20018000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	20000704 	.word	0x20000704
 8001c50:	20000720 	.word	0x20000720

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c7e:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c80:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c94:	4c0b      	ldr	r4, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca2:	f7ff ffd7 	bl	8001c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f002 f99d 	bl	8003fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff f9f7 	bl	800109c <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cbc:	08007f7c 	.word	0x08007f7c
  ldr r2, =_sbss
 8001cc0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cc4:	2000071c 	.word	0x2000071c

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_Init+0x40>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_Init+0x40>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_Init+0x40>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f000 f931 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 f808 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d00:	f7ff fdde 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x54>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_InitTick+0x58>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f93b 	bl	8001faa <HAL_SYSTICK_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00e      	b.n	8001d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d80a      	bhi.n	8001d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d44:	2200      	movs	r2, #0
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f000 f911 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d50:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <HAL_InitTick+0x5c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	2000000c 	.word	0x2000000c

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000010 	.word	0x20000010
 8001d94:	20000708 	.word	0x20000708

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000708 	.word	0x20000708

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d005      	beq.n	8001dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_Delay+0x44>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd6:	bf00      	nop
 8001dd8:	f7ff ffde 	bl	8001d98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8f7      	bhi.n	8001dd8 <HAL_Delay+0x28>
  {
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000010 	.word	0x20000010

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7ff ff8e 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff47 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff5c 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff8e 	bl	8001eb0 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5d 	bl	8001e5c <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffb0 	bl	8001f18 <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e159      	b.n	8002294 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8148 	bne.w	800228e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002012:	2b02      	cmp	r3, #2
 8002014:	d130      	bne.n	8002078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b03      	cmp	r3, #3
 8002082:	d017      	beq.n	80020b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a2 	beq.w	800228e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b57      	ldr	r3, [pc, #348]	; (80022ac <HAL_GPIO_Init+0x2e8>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a56      	ldr	r2, [pc, #344]	; (80022ac <HAL_GPIO_Init+0x2e8>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b54      	ldr	r3, [pc, #336]	; (80022ac <HAL_GPIO_Init+0x2e8>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002166:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x2ec>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a49      	ldr	r2, [pc, #292]	; (80022b4 <HAL_GPIO_Init+0x2f0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x202>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <HAL_GPIO_Init+0x2f4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x1fe>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a47      	ldr	r2, [pc, #284]	; (80022bc <HAL_GPIO_Init+0x2f8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x1fa>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a46      	ldr	r2, [pc, #280]	; (80022c0 <HAL_GPIO_Init+0x2fc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x1f6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a45      	ldr	r2, [pc, #276]	; (80022c4 <HAL_GPIO_Init+0x300>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x1f2>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x204>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x204>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x204>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x204>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x204>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4935      	ldr	r1, [pc, #212]	; (80022b0 <HAL_GPIO_Init+0x2ec>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_GPIO_Init+0x304>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220a:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <HAL_GPIO_Init+0x304>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_GPIO_Init+0x304>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <HAL_GPIO_Init+0x304>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_GPIO_Init+0x304>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225e:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <HAL_GPIO_Init+0x304>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_GPIO_Init+0x304>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002288:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_GPIO_Init+0x304>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f aea2 	bls.w	8001fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40013c00 	.word	0x40013c00

080022cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e001      	b.n	80022ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002318:	e003      	b.n	8002322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	619a      	str	r2, [r3, #24]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e12b      	b.n	800259a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fada 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002394:	f001 f898 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a81      	ldr	r2, [pc, #516]	; (80025a4 <HAL_I2C_Init+0x274>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d807      	bhi.n	80023b4 <HAL_I2C_Init+0x84>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <HAL_I2C_Init+0x278>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e006      	b.n	80023c2 <HAL_I2C_Init+0x92>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a7d      	ldr	r2, [pc, #500]	; (80025ac <HAL_I2C_Init+0x27c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bf94      	ite	ls
 80023bc:	2301      	movls	r3, #1
 80023be:	2300      	movhi	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e7      	b.n	800259a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <HAL_I2C_Init+0x280>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9b      	lsrs	r3, r3, #18
 80023d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	; (80025a4 <HAL_I2C_Init+0x274>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d802      	bhi.n	8002404 <HAL_I2C_Init+0xd4>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	e009      	b.n	8002418 <HAL_I2C_Init+0xe8>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_I2C_Init+0x284>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	3301      	adds	r3, #1
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	495c      	ldr	r1, [pc, #368]	; (80025a4 <HAL_I2C_Init+0x274>)
 8002434:	428b      	cmp	r3, r1
 8002436:	d819      	bhi.n	800246c <HAL_I2C_Init+0x13c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e59      	subs	r1, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fbb1 f3f3 	udiv	r3, r1, r3
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800244c:	400b      	ands	r3, r1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_I2C_Init+0x138>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e59      	subs	r1, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002466:	e051      	b.n	800250c <HAL_I2C_Init+0x1dc>
 8002468:	2304      	movs	r3, #4
 800246a:	e04f      	b.n	800250c <HAL_I2C_Init+0x1dc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d111      	bne.n	8002498 <HAL_I2C_Init+0x168>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e012      	b.n	80024be <HAL_I2C_Init+0x18e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	0099      	lsls	r1, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x196>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e022      	b.n	800250c <HAL_I2C_Init+0x1dc>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <HAL_I2C_Init+0x1bc>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e58      	subs	r0, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	440b      	add	r3, r1
 80024dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	e00f      	b.n	800250c <HAL_I2C_Init+0x1dc>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	6809      	ldr	r1, [r1, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800253a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6911      	ldr	r1, [r2, #16]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	430b      	orrs	r3, r1
 800254e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	000186a0 	.word	0x000186a0
 80025a8:	001e847f 	.word	0x001e847f
 80025ac:	003d08ff 	.word	0x003d08ff
 80025b0:	431bde83 	.word	0x431bde83
 80025b4:	10624dd3 	.word	0x10624dd3

080025b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	460b      	mov	r3, r1
 80025cc:	813b      	strh	r3, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d2:	f7ff fbe1 	bl	8001d98 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	f040 80d9 	bne.w	8002798 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2319      	movs	r3, #25
 80025ec:	2201      	movs	r2, #1
 80025ee:	496d      	ldr	r1, [pc, #436]	; (80027a4 <HAL_I2C_Mem_Write+0x1ec>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f971 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0cc      	b.n	800279a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2C_Mem_Write+0x56>
 800260a:	2302      	movs	r3, #2
 800260c:	e0c5      	b.n	800279a <HAL_I2C_Mem_Write+0x1e2>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d007      	beq.n	8002634 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2221      	movs	r2, #33	; 0x21
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002676:	88f8      	ldrh	r0, [r7, #6]
 8002678:	893a      	ldrh	r2, [r7, #8]
 800267a:	8979      	ldrh	r1, [r7, #10]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4603      	mov	r3, r0
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f890 	bl	80027ac <I2C_RequestMemoryWrite>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d052      	beq.n	8002738 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e081      	b.n	800279a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9f2 	bl	8002a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d107      	bne.n	80026be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d11b      	bne.n	8002738 <HAL_I2C_Mem_Write+0x180>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1aa      	bne.n	8002696 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f9de 	bl	8002b06 <I2C_WaitOnBTFFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2b04      	cmp	r3, #4
 8002756:	d107      	bne.n	8002768 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e016      	b.n	800279a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	460b      	mov	r3, r1
 80027c0:	813b      	strh	r3, [r7, #8]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2200      	movs	r2, #0
 80027de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f878 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fc:	d103      	bne.n	8002806 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e05f      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002818:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	492d      	ldr	r1, [pc, #180]	; (80028d4 <I2C_RequestMemoryWrite+0x128>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f8b0 	bl	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e04c      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f91a 	bl	8002a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b04      	cmp	r3, #4
 800285c:	d107      	bne.n	800286e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e02b      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d105      	bne.n	8002884 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	e021      	b.n	80028c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29b      	uxth	r3, r3
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8f4 	bl	8002a84 <I2C_WaitOnTXEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e005      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028be:	893b      	ldrh	r3, [r7, #8]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	00010002 	.word	0x00010002

080028d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	e025      	b.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d021      	beq.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff fa51 	bl	8001d98 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e023      	b.n	800297e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10d      	bne.n	800295c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	e00c      	b.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	429a      	cmp	r2, r3
 800297a:	d0b6      	beq.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002994:	e051      	b.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	d123      	bne.n	80029ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e046      	b.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d021      	beq.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff f9cf 	bl	8001d98 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d116      	bne.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e020      	b.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10c      	bne.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e00b      	b.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	43da      	mvns	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d18d      	bne.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a90:	e02d      	b.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f878 	bl	8002b88 <I2C_IsAcknowledgeFailed>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e02d      	b.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d021      	beq.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7ff f975 	bl	8001d98 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e007      	b.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d1ca      	bne.n	8002a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b12:	e02d      	b.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f837 	bl	8002b88 <I2C_IsAcknowledgeFailed>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e02d      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d021      	beq.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7ff f934 	bl	8001d98 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d116      	bne.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e007      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d1ca      	bne.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d11b      	bne.n	8002bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e267      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d075      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00c      	beq.n	8002c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x108>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d157      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e242      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x74>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x98>
 8002c66:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6f      	ldr	r2, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6c      	ldr	r2, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c80:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a68      	ldr	r2, [pc, #416]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f87a 	bl	8001d98 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7ff f876 	bl	8001d98 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e207      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xc0>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f866 	bl	8001d98 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7ff f862 	bl	8001d98 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1f3      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xe8>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1c7      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCC_OscConfig+0x244>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7ff f81b 	bl	8001d98 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d66:	f7ff f817 	bl	8001d98 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1a8      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4925      	ldr	r1, [pc, #148]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_OscConfig+0x244>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fffa 	bl	8001d98 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fe fff6 	bl	8001d98 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e187      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_RCC_OscConfig+0x248>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe ffda 	bl	8001d98 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe ffd6 	bl	8001d98 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e167      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x200>
 8002e06:	e01b      	b.n	8002e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_OscConfig+0x248>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe ffc3 	bl	8001d98 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00e      	b.n	8002e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe ffbf 	bl	8001d98 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d907      	bls.n	8002e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e150      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470000 	.word	0x42470000
 8002e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ea      	bne.n	8002e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b7d      	ldr	r3, [pc, #500]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a7c      	ldr	r2, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b7a      	ldr	r3, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b77      	ldr	r3, [pc, #476]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b74      	ldr	r3, [pc, #464]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a73      	ldr	r2, [pc, #460]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe ff7f 	bl	8001d98 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe ff7b 	bl	8001d98 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e10c      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2ea>
 8002ec4:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x324>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x30c>
 8002eda:	4b5f      	ldr	r3, [pc, #380]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a5e      	ldr	r2, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a5b      	ldr	r2, [pc, #364]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x324>
 8002ef4:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a57      	ldr	r2, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe ff40 	bl	8001d98 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe ff3c 	bl	8001d98 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0cb      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ee      	beq.n	8002f1c <HAL_RCC_OscConfig+0x334>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f40:	f7fe ff2a 	bl	8001d98 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe ff26 	bl	8001d98 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0b5      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ee      	bne.n	8002f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a1 	beq.w	80030c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d05c      	beq.n	800304c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d141      	bne.n	800301e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fefa 	bl	8001d98 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fef6 	bl	8001d98 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e087      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x478>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fecf 	bl	8001d98 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fecb 	bl	8001d98 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e05c      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x416>
 800301c:	e054      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x478>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe feb8 	bl	8001d98 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe feb4 	bl	8001d98 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e045      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x444>
 800304a:	e03d      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e038      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x4ec>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d028      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d121      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d11a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d111      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0cc      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d90c      	bls.n	8003114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d044      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d119      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d003      	beq.n	8003196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e067      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4934      	ldr	r1, [pc, #208]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c8:	f7fe fde6 	bl	8001d98 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe fde2 	bl	8001d98 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e04f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20c      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fd46 	bl	8001d10 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023c00 	.word	0x40023c00
 8003294:	40023800 	.word	0x40023800
 8003298:	08007b78 	.word	0x08007b78
 800329c:	20000008 	.word	0x20000008
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b094      	sub	sp, #80	; 0x50
 80032aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	2300      	movs	r3, #0
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	2300      	movs	r3, #0
 80032b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032bc:	4b79      	ldr	r3, [pc, #484]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d00d      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x40>
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	f200 80e1 	bhi.w	8003490 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x34>
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x3a>
 80032d6:	e0db      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032dc:	e0db      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032de:	4b73      	ldr	r3, [pc, #460]	; (80034ac <HAL_RCC_GetSysClockFreq+0x208>)
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e2:	e0d8      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e4:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ee:	4b6d      	ldr	r3, [pc, #436]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d063      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	2200      	movs	r2, #0
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
 8003304:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
 8003312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003316:	4622      	mov	r2, r4
 8003318:	462b      	mov	r3, r5
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	0159      	lsls	r1, r3, #5
 8003324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003328:	0150      	lsls	r0, r2, #5
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4621      	mov	r1, r4
 8003330:	1a51      	subs	r1, r2, r1
 8003332:	6139      	str	r1, [r7, #16]
 8003334:	4629      	mov	r1, r5
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003348:	4659      	mov	r1, fp
 800334a:	018b      	lsls	r3, r1, #6
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003352:	4651      	mov	r1, sl
 8003354:	018a      	lsls	r2, r1, #6
 8003356:	4651      	mov	r1, sl
 8003358:	ebb2 0801 	subs.w	r8, r2, r1
 800335c:	4659      	mov	r1, fp
 800335e:	eb63 0901 	sbc.w	r9, r3, r1
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003376:	4690      	mov	r8, r2
 8003378:	4699      	mov	r9, r3
 800337a:	4623      	mov	r3, r4
 800337c:	eb18 0303 	adds.w	r3, r8, r3
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	462b      	mov	r3, r5
 8003384:	eb49 0303 	adc.w	r3, r9, r3
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003396:	4629      	mov	r1, r5
 8003398:	024b      	lsls	r3, r1, #9
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a0:	4621      	mov	r1, r4
 80033a2:	024a      	lsls	r2, r1, #9
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033aa:	2200      	movs	r2, #0
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033b4:	f7fd fc50 	bl	8000c58 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c0:	e058      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	2200      	movs	r2, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	4611      	mov	r1, r2
 80033ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	f04f 0000 	mov.w	r0, #0
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	0159      	lsls	r1, r3, #5
 80033ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ee:	0150      	lsls	r0, r2, #5
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4641      	mov	r1, r8
 80033f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800340c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003414:	ebb2 040a 	subs.w	r4, r2, sl
 8003418:	eb63 050b 	sbc.w	r5, r3, fp
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	00eb      	lsls	r3, r5, #3
 8003426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342a:	00e2      	lsls	r2, r4, #3
 800342c:	4614      	mov	r4, r2
 800342e:	461d      	mov	r5, r3
 8003430:	4643      	mov	r3, r8
 8003432:	18e3      	adds	r3, r4, r3
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	464b      	mov	r3, r9
 8003438:	eb45 0303 	adc.w	r3, r5, r3
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344a:	4629      	mov	r1, r5
 800344c:	028b      	lsls	r3, r1, #10
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003454:	4621      	mov	r1, r4
 8003456:	028a      	lsls	r2, r1, #10
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345e:	2200      	movs	r2, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	61fa      	str	r2, [r7, #28]
 8003464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003468:	f7fd fbf6 	bl	8000c58 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	3301      	adds	r3, #1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348e:	e002      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003498:	4618      	mov	r0, r3
 800349a:	3750      	adds	r7, #80	; 0x50
 800349c:	46bd      	mov	sp, r7
 800349e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000008 	.word	0x20000008

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034cc:	f7ff fff0 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08007b88 	.word	0x08007b88

080034f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f4:	f7ff ffdc 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0b5b      	lsrs	r3, r3, #13
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4903      	ldr	r1, [pc, #12]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800
 8003514:	08007b88 	.word	0x08007b88

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe fa2e 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 f8f4 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_ConfigClockSource+0x1c>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0b4      	b.n	800373c <HAL_TIM_ConfigClockSource+0x186>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360a:	d03e      	beq.n	800368a <HAL_TIM_ConfigClockSource+0xd4>
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003610:	f200 8087 	bhi.w	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003618:	f000 8086 	beq.w	8003728 <HAL_TIM_ConfigClockSource+0x172>
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	d87f      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 8003622:	2b70      	cmp	r3, #112	; 0x70
 8003624:	d01a      	beq.n	800365c <HAL_TIM_ConfigClockSource+0xa6>
 8003626:	2b70      	cmp	r3, #112	; 0x70
 8003628:	d87b      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 800362a:	2b60      	cmp	r3, #96	; 0x60
 800362c:	d050      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x11a>
 800362e:	2b60      	cmp	r3, #96	; 0x60
 8003630:	d877      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 8003632:	2b50      	cmp	r3, #80	; 0x50
 8003634:	d03c      	beq.n	80036b0 <HAL_TIM_ConfigClockSource+0xfa>
 8003636:	2b50      	cmp	r3, #80	; 0x50
 8003638:	d873      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d058      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0x13a>
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d86f      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 8003642:	2b30      	cmp	r3, #48	; 0x30
 8003644:	d064      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x15a>
 8003646:	2b30      	cmp	r3, #48	; 0x30
 8003648:	d86b      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 800364a:	2b20      	cmp	r3, #32
 800364c:	d060      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x15a>
 800364e:	2b20      	cmp	r3, #32
 8003650:	d867      	bhi.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d05c      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x15a>
 8003656:	2b10      	cmp	r3, #16
 8003658:	d05a      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x15a>
 800365a:	e062      	b.n	8003722 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f000 f964 	bl	8003938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800367e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
      break;
 8003688:	e04f      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f000 f94d 	bl	8003938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ac:	609a      	str	r2, [r3, #8]
      break;
 80036ae:	e03c      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	461a      	mov	r2, r3
 80036be:	f000 f8c1 	bl	8003844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2150      	movs	r1, #80	; 0x50
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f91a 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 80036ce:	e02c      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	461a      	mov	r2, r3
 80036de:	f000 f8e0 	bl	80038a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2160      	movs	r1, #96	; 0x60
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f90a 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 80036ee:	e01c      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	461a      	mov	r2, r3
 80036fe:	f000 f8a1 	bl	8003844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2140      	movs	r1, #64	; 0x40
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f8fa 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 800370e:	e00c      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 f8f1 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 8003720:	e003      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
      break;
 8003726:	e000      	b.n	800372a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a34      	ldr	r2, [pc, #208]	; (8003828 <TIM_Base_SetConfig+0xe4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00f      	beq.n	800377c <TIM_Base_SetConfig+0x38>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0x38>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a31      	ldr	r2, [pc, #196]	; (800382c <TIM_Base_SetConfig+0xe8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0x38>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a30      	ldr	r2, [pc, #192]	; (8003830 <TIM_Base_SetConfig+0xec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x38>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <TIM_Base_SetConfig+0xf0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <TIM_Base_SetConfig+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01b      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379c:	d017      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <TIM_Base_SetConfig+0xe8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a21      	ldr	r2, [pc, #132]	; (8003830 <TIM_Base_SetConfig+0xec>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00f      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <TIM_Base_SetConfig+0xf0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00b      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1f      	ldr	r2, [pc, #124]	; (8003838 <TIM_Base_SetConfig+0xf4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <TIM_Base_SetConfig+0xf8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <TIM_Base_SetConfig+0xfc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <TIM_Base_SetConfig+0xe4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d103      	bne.n	8003814 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	615a      	str	r2, [r3, #20]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800

08003844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 030a 	bic.w	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0210 	bic.w	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	031b      	lsls	r3, r3, #12
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	f043 0307 	orr.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	021a      	lsls	r2, r3, #8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	431a      	orrs	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800398c:	2302      	movs	r3, #2
 800398e:	e050      	b.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d018      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d013      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10c      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40014000 	.word	0x40014000

08003a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e03f      	b.n	8003ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd ffb2 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f829 	bl	8003af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b0c0      	sub	sp, #256	; 0x100
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	68d9      	ldr	r1, [r3, #12]
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	ea40 0301 	orr.w	r3, r0, r1
 8003b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b48:	f021 010c 	bic.w	r1, r1, #12
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b56:	430b      	orrs	r3, r1
 8003b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	6999      	ldr	r1, [r3, #24]
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	ea40 0301 	orr.w	r3, r0, r1
 8003b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b8f      	ldr	r3, [pc, #572]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d005      	beq.n	8003b90 <UART_SetConfig+0xa0>
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <UART_SetConfig+0x2d0>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d104      	bne.n	8003b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b90:	f7ff fcae 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 8003b94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b98:	e003      	b.n	8003ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b9a:	f7ff fc95 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8003b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bac:	f040 810c 	bne.w	8003dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	1891      	adds	r1, r2, r2
 8003bc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bca:	415b      	adcs	r3, r3
 8003bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	eb12 0801 	adds.w	r8, r2, r1
 8003bd8:	4629      	mov	r1, r5
 8003bda:	eb43 0901 	adc.w	r9, r3, r1
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf2:	4690      	mov	r8, r2
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	eb18 0303 	adds.w	r3, r8, r3
 8003bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c00:	462b      	mov	r3, r5
 8003c02:	eb49 0303 	adc.w	r3, r9, r3
 8003c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c1e:	460b      	mov	r3, r1
 8003c20:	18db      	adds	r3, r3, r3
 8003c22:	653b      	str	r3, [r7, #80]	; 0x50
 8003c24:	4613      	mov	r3, r2
 8003c26:	eb42 0303 	adc.w	r3, r2, r3
 8003c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c34:	f7fd f810 	bl	8000c58 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	011c      	lsls	r4, r3, #4
 8003c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	1891      	adds	r1, r2, r2
 8003c5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c60:	415b      	adcs	r3, r3
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c68:	4641      	mov	r1, r8
 8003c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c6e:	4649      	mov	r1, r9
 8003c70:	eb43 0b01 	adc.w	fp, r3, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c88:	4692      	mov	sl, r2
 8003c8a:	469b      	mov	fp, r3
 8003c8c:	4643      	mov	r3, r8
 8003c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c96:	464b      	mov	r3, r9
 8003c98:	eb4b 0303 	adc.w	r3, fp, r3
 8003c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	18db      	adds	r3, r3, r3
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cba:	4613      	mov	r3, r2
 8003cbc:	eb42 0303 	adc.w	r3, r2, r3
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cca:	f7fc ffc5 	bl	8000c58 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2264      	movs	r2, #100	; 0x64
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	1acb      	subs	r3, r1, r3
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cea:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003cec:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cf8:	441c      	add	r4, r3
 8003cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	1891      	adds	r1, r2, r2
 8003d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d14:	415b      	adcs	r3, r3
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	1851      	adds	r1, r2, r1
 8003d20:	6339      	str	r1, [r7, #48]	; 0x30
 8003d22:	4649      	mov	r1, r9
 8003d24:	414b      	adcs	r3, r1
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d34:	4659      	mov	r1, fp
 8003d36:	00cb      	lsls	r3, r1, #3
 8003d38:	4651      	mov	r1, sl
 8003d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3e:	4651      	mov	r1, sl
 8003d40:	00ca      	lsls	r2, r1, #3
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	4642      	mov	r2, r8
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d50:	464b      	mov	r3, r9
 8003d52:	460a      	mov	r2, r1
 8003d54:	eb42 0303 	adc.w	r3, r2, r3
 8003d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d70:	460b      	mov	r3, r1
 8003d72:	18db      	adds	r3, r3, r3
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d76:	4613      	mov	r3, r2
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d86:	f7fc ff67 	bl	8000c58 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003d90:	fba3 1302 	umull	r1, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	2164      	movs	r1, #100	; 0x64
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	3332      	adds	r3, #50	; 0x32
 8003da2:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	f003 0207 	and.w	r2, r3, #7
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4422      	add	r2, r4
 8003db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003db8:	e105      	b.n	8003fc6 <UART_SetConfig+0x4d6>
 8003dba:	bf00      	nop
 8003dbc:	40011000 	.word	0x40011000
 8003dc0:	40011400 	.word	0x40011400
 8003dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dda:	4642      	mov	r2, r8
 8003ddc:	464b      	mov	r3, r9
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	6239      	str	r1, [r7, #32]
 8003de2:	415b      	adcs	r3, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dea:	4641      	mov	r1, r8
 8003dec:	1854      	adds	r4, r2, r1
 8003dee:	4649      	mov	r1, r9
 8003df0:	eb43 0501 	adc.w	r5, r3, r1
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	00eb      	lsls	r3, r5, #3
 8003dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e02:	00e2      	lsls	r2, r4, #3
 8003e04:	4614      	mov	r4, r2
 8003e06:	461d      	mov	r5, r3
 8003e08:	4643      	mov	r3, r8
 8003e0a:	18e3      	adds	r3, r4, r3
 8003e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e10:	464b      	mov	r3, r9
 8003e12:	eb45 0303 	adc.w	r3, r5, r3
 8003e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e36:	4629      	mov	r1, r5
 8003e38:	008b      	lsls	r3, r1, #2
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e40:	4621      	mov	r1, r4
 8003e42:	008a      	lsls	r2, r1, #2
 8003e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e48:	f7fc ff06 	bl	8000c58 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4b60      	ldr	r3, [pc, #384]	; (8003fd4 <UART_SetConfig+0x4e4>)
 8003e52:	fba3 2302 	umull	r2, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	011c      	lsls	r4, r3, #4
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	61b9      	str	r1, [r7, #24]
 8003e74:	415b      	adcs	r3, r3
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	1851      	adds	r1, r2, r1
 8003e80:	6139      	str	r1, [r7, #16]
 8003e82:	4649      	mov	r1, r9
 8003e84:	414b      	adcs	r3, r1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e94:	4659      	mov	r1, fp
 8003e96:	00cb      	lsls	r3, r1, #3
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	00ca      	lsls	r2, r1, #3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ec6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	008b      	lsls	r3, r1, #2
 8003ed8:	4641      	mov	r1, r8
 8003eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ede:	4641      	mov	r1, r8
 8003ee0:	008a      	lsls	r2, r1, #2
 8003ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ee6:	f7fc feb7 	bl	8000c58 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <UART_SetConfig+0x4e4>)
 8003ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	2164      	movs	r1, #100	; 0x64
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	3332      	adds	r3, #50	; 0x32
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <UART_SetConfig+0x4e4>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0e:	441c      	add	r4, r3
 8003f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f14:	2200      	movs	r2, #0
 8003f16:	673b      	str	r3, [r7, #112]	; 0x70
 8003f18:	677a      	str	r2, [r7, #116]	; 0x74
 8003f1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	415b      	adcs	r3, r3
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2e:	4641      	mov	r1, r8
 8003f30:	1851      	adds	r1, r2, r1
 8003f32:	6039      	str	r1, [r7, #0]
 8003f34:	4649      	mov	r1, r9
 8003f36:	414b      	adcs	r3, r1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f46:	4659      	mov	r1, fp
 8003f48:	00cb      	lsls	r3, r1, #3
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f50:	4651      	mov	r1, sl
 8003f52:	00ca      	lsls	r2, r1, #3
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4642      	mov	r2, r8
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	663b      	str	r3, [r7, #96]	; 0x60
 8003f74:	667a      	str	r2, [r7, #100]	; 0x64
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f82:	4649      	mov	r1, r9
 8003f84:	008b      	lsls	r3, r1, #2
 8003f86:	4641      	mov	r1, r8
 8003f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	008a      	lsls	r2, r1, #2
 8003f90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f94:	f7fc fe60 	bl	8000c58 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <UART_SetConfig+0x4e4>)
 8003f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2164      	movs	r1, #100	; 0x64
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <UART_SetConfig+0x4e4>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4422      	add	r2, r4
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	51eb851f 	.word	0x51eb851f

08003fd8 <__errno>:
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <__errno+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000014 	.word	0x20000014

08003fe4 <__libc_init_array>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4d0d      	ldr	r5, [pc, #52]	; (800401c <__libc_init_array+0x38>)
 8003fe8:	4c0d      	ldr	r4, [pc, #52]	; (8004020 <__libc_init_array+0x3c>)
 8003fea:	1b64      	subs	r4, r4, r5
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	2600      	movs	r6, #0
 8003ff0:	42a6      	cmp	r6, r4
 8003ff2:	d109      	bne.n	8004008 <__libc_init_array+0x24>
 8003ff4:	4d0b      	ldr	r5, [pc, #44]	; (8004024 <__libc_init_array+0x40>)
 8003ff6:	4c0c      	ldr	r4, [pc, #48]	; (8004028 <__libc_init_array+0x44>)
 8003ff8:	f002 ff02 	bl	8006e00 <_init>
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	2600      	movs	r6, #0
 8004002:	42a6      	cmp	r6, r4
 8004004:	d105      	bne.n	8004012 <__libc_init_array+0x2e>
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	f855 3b04 	ldr.w	r3, [r5], #4
 800400c:	4798      	blx	r3
 800400e:	3601      	adds	r6, #1
 8004010:	e7ee      	b.n	8003ff0 <__libc_init_array+0xc>
 8004012:	f855 3b04 	ldr.w	r3, [r5], #4
 8004016:	4798      	blx	r3
 8004018:	3601      	adds	r6, #1
 800401a:	e7f2      	b.n	8004002 <__libc_init_array+0x1e>
 800401c:	08007f74 	.word	0x08007f74
 8004020:	08007f74 	.word	0x08007f74
 8004024:	08007f74 	.word	0x08007f74
 8004028:	08007f78 	.word	0x08007f78

0800402c <memcpy>:
 800402c:	440a      	add	r2, r1
 800402e:	4291      	cmp	r1, r2
 8004030:	f100 33ff 	add.w	r3, r0, #4294967295
 8004034:	d100      	bne.n	8004038 <memcpy+0xc>
 8004036:	4770      	bx	lr
 8004038:	b510      	push	{r4, lr}
 800403a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004042:	4291      	cmp	r1, r2
 8004044:	d1f9      	bne.n	800403a <memcpy+0xe>
 8004046:	bd10      	pop	{r4, pc}

08004048 <memmove>:
 8004048:	4288      	cmp	r0, r1
 800404a:	b510      	push	{r4, lr}
 800404c:	eb01 0402 	add.w	r4, r1, r2
 8004050:	d902      	bls.n	8004058 <memmove+0x10>
 8004052:	4284      	cmp	r4, r0
 8004054:	4623      	mov	r3, r4
 8004056:	d807      	bhi.n	8004068 <memmove+0x20>
 8004058:	1e43      	subs	r3, r0, #1
 800405a:	42a1      	cmp	r1, r4
 800405c:	d008      	beq.n	8004070 <memmove+0x28>
 800405e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004066:	e7f8      	b.n	800405a <memmove+0x12>
 8004068:	4402      	add	r2, r0
 800406a:	4601      	mov	r1, r0
 800406c:	428a      	cmp	r2, r1
 800406e:	d100      	bne.n	8004072 <memmove+0x2a>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407a:	e7f7      	b.n	800406c <memmove+0x24>

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__cvt>:
 800408c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	ec55 4b10 	vmov	r4, r5, d0
 8004094:	2d00      	cmp	r5, #0
 8004096:	460e      	mov	r6, r1
 8004098:	4619      	mov	r1, r3
 800409a:	462b      	mov	r3, r5
 800409c:	bfbb      	ittet	lt
 800409e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040a2:	461d      	movlt	r5, r3
 80040a4:	2300      	movge	r3, #0
 80040a6:	232d      	movlt	r3, #45	; 0x2d
 80040a8:	700b      	strb	r3, [r1, #0]
 80040aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040b0:	4691      	mov	r9, r2
 80040b2:	f023 0820 	bic.w	r8, r3, #32
 80040b6:	bfbc      	itt	lt
 80040b8:	4622      	movlt	r2, r4
 80040ba:	4614      	movlt	r4, r2
 80040bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040c0:	d005      	beq.n	80040ce <__cvt+0x42>
 80040c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040c6:	d100      	bne.n	80040ca <__cvt+0x3e>
 80040c8:	3601      	adds	r6, #1
 80040ca:	2102      	movs	r1, #2
 80040cc:	e000      	b.n	80040d0 <__cvt+0x44>
 80040ce:	2103      	movs	r1, #3
 80040d0:	ab03      	add	r3, sp, #12
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	ab02      	add	r3, sp, #8
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	ec45 4b10 	vmov	d0, r4, r5
 80040dc:	4653      	mov	r3, sl
 80040de:	4632      	mov	r2, r6
 80040e0:	f000 fcea 	bl	8004ab8 <_dtoa_r>
 80040e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040e8:	4607      	mov	r7, r0
 80040ea:	d102      	bne.n	80040f2 <__cvt+0x66>
 80040ec:	f019 0f01 	tst.w	r9, #1
 80040f0:	d022      	beq.n	8004138 <__cvt+0xac>
 80040f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040f6:	eb07 0906 	add.w	r9, r7, r6
 80040fa:	d110      	bne.n	800411e <__cvt+0x92>
 80040fc:	783b      	ldrb	r3, [r7, #0]
 80040fe:	2b30      	cmp	r3, #48	; 0x30
 8004100:	d10a      	bne.n	8004118 <__cvt+0x8c>
 8004102:	2200      	movs	r2, #0
 8004104:	2300      	movs	r3, #0
 8004106:	4620      	mov	r0, r4
 8004108:	4629      	mov	r1, r5
 800410a:	f7fc fce5 	bl	8000ad8 <__aeabi_dcmpeq>
 800410e:	b918      	cbnz	r0, 8004118 <__cvt+0x8c>
 8004110:	f1c6 0601 	rsb	r6, r6, #1
 8004114:	f8ca 6000 	str.w	r6, [sl]
 8004118:	f8da 3000 	ldr.w	r3, [sl]
 800411c:	4499      	add	r9, r3
 800411e:	2200      	movs	r2, #0
 8004120:	2300      	movs	r3, #0
 8004122:	4620      	mov	r0, r4
 8004124:	4629      	mov	r1, r5
 8004126:	f7fc fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800412a:	b108      	cbz	r0, 8004130 <__cvt+0xa4>
 800412c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004130:	2230      	movs	r2, #48	; 0x30
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	454b      	cmp	r3, r9
 8004136:	d307      	bcc.n	8004148 <__cvt+0xbc>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800413c:	1bdb      	subs	r3, r3, r7
 800413e:	4638      	mov	r0, r7
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	b004      	add	sp, #16
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	9103      	str	r1, [sp, #12]
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e7f0      	b.n	8004132 <__cvt+0xa6>

08004150 <__exponent>:
 8004150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004152:	4603      	mov	r3, r0
 8004154:	2900      	cmp	r1, #0
 8004156:	bfb8      	it	lt
 8004158:	4249      	neglt	r1, r1
 800415a:	f803 2b02 	strb.w	r2, [r3], #2
 800415e:	bfb4      	ite	lt
 8004160:	222d      	movlt	r2, #45	; 0x2d
 8004162:	222b      	movge	r2, #43	; 0x2b
 8004164:	2909      	cmp	r1, #9
 8004166:	7042      	strb	r2, [r0, #1]
 8004168:	dd2a      	ble.n	80041c0 <__exponent+0x70>
 800416a:	f10d 0407 	add.w	r4, sp, #7
 800416e:	46a4      	mov	ip, r4
 8004170:	270a      	movs	r7, #10
 8004172:	46a6      	mov	lr, r4
 8004174:	460a      	mov	r2, r1
 8004176:	fb91 f6f7 	sdiv	r6, r1, r7
 800417a:	fb07 1516 	mls	r5, r7, r6, r1
 800417e:	3530      	adds	r5, #48	; 0x30
 8004180:	2a63      	cmp	r2, #99	; 0x63
 8004182:	f104 34ff 	add.w	r4, r4, #4294967295
 8004186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800418a:	4631      	mov	r1, r6
 800418c:	dcf1      	bgt.n	8004172 <__exponent+0x22>
 800418e:	3130      	adds	r1, #48	; 0x30
 8004190:	f1ae 0502 	sub.w	r5, lr, #2
 8004194:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004198:	1c44      	adds	r4, r0, #1
 800419a:	4629      	mov	r1, r5
 800419c:	4561      	cmp	r1, ip
 800419e:	d30a      	bcc.n	80041b6 <__exponent+0x66>
 80041a0:	f10d 0209 	add.w	r2, sp, #9
 80041a4:	eba2 020e 	sub.w	r2, r2, lr
 80041a8:	4565      	cmp	r5, ip
 80041aa:	bf88      	it	hi
 80041ac:	2200      	movhi	r2, #0
 80041ae:	4413      	add	r3, r2
 80041b0:	1a18      	subs	r0, r3, r0
 80041b2:	b003      	add	sp, #12
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041be:	e7ed      	b.n	800419c <__exponent+0x4c>
 80041c0:	2330      	movs	r3, #48	; 0x30
 80041c2:	3130      	adds	r1, #48	; 0x30
 80041c4:	7083      	strb	r3, [r0, #2]
 80041c6:	70c1      	strb	r1, [r0, #3]
 80041c8:	1d03      	adds	r3, r0, #4
 80041ca:	e7f1      	b.n	80041b0 <__exponent+0x60>

080041cc <_printf_float>:
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	ed2d 8b02 	vpush	{d8}
 80041d4:	b08d      	sub	sp, #52	; 0x34
 80041d6:	460c      	mov	r4, r1
 80041d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041dc:	4616      	mov	r6, r2
 80041de:	461f      	mov	r7, r3
 80041e0:	4605      	mov	r5, r0
 80041e2:	f001 fa57 	bl	8005694 <_localeconv_r>
 80041e6:	f8d0 a000 	ldr.w	sl, [r0]
 80041ea:	4650      	mov	r0, sl
 80041ec:	f7fb fff8 	bl	80001e0 <strlen>
 80041f0:	2300      	movs	r3, #0
 80041f2:	930a      	str	r3, [sp, #40]	; 0x28
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	9305      	str	r3, [sp, #20]
 80041f8:	f8d8 3000 	ldr.w	r3, [r8]
 80041fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004200:	3307      	adds	r3, #7
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	f103 0208 	add.w	r2, r3, #8
 800420a:	f8c8 2000 	str.w	r2, [r8]
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800421a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800421e:	9307      	str	r3, [sp, #28]
 8004220:	f8cd 8018 	str.w	r8, [sp, #24]
 8004224:	ee08 0a10 	vmov	s16, r0
 8004228:	4b9f      	ldr	r3, [pc, #636]	; (80044a8 <_printf_float+0x2dc>)
 800422a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	f7fc fc83 	bl	8000b3c <__aeabi_dcmpun>
 8004236:	bb88      	cbnz	r0, 800429c <_printf_float+0xd0>
 8004238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800423c:	4b9a      	ldr	r3, [pc, #616]	; (80044a8 <_printf_float+0x2dc>)
 800423e:	f04f 32ff 	mov.w	r2, #4294967295
 8004242:	f7fc fc5d 	bl	8000b00 <__aeabi_dcmple>
 8004246:	bb48      	cbnz	r0, 800429c <_printf_float+0xd0>
 8004248:	2200      	movs	r2, #0
 800424a:	2300      	movs	r3, #0
 800424c:	4640      	mov	r0, r8
 800424e:	4649      	mov	r1, r9
 8004250:	f7fc fc4c 	bl	8000aec <__aeabi_dcmplt>
 8004254:	b110      	cbz	r0, 800425c <_printf_float+0x90>
 8004256:	232d      	movs	r3, #45	; 0x2d
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	4b93      	ldr	r3, [pc, #588]	; (80044ac <_printf_float+0x2e0>)
 800425e:	4894      	ldr	r0, [pc, #592]	; (80044b0 <_printf_float+0x2e4>)
 8004260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004264:	bf94      	ite	ls
 8004266:	4698      	movls	r8, r3
 8004268:	4680      	movhi	r8, r0
 800426a:	2303      	movs	r3, #3
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	9b05      	ldr	r3, [sp, #20]
 8004270:	f023 0204 	bic.w	r2, r3, #4
 8004274:	6022      	str	r2, [r4, #0]
 8004276:	f04f 0900 	mov.w	r9, #0
 800427a:	9700      	str	r7, [sp, #0]
 800427c:	4633      	mov	r3, r6
 800427e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004280:	4621      	mov	r1, r4
 8004282:	4628      	mov	r0, r5
 8004284:	f000 f9d8 	bl	8004638 <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	f040 8090 	bne.w	80043ae <_printf_float+0x1e2>
 800428e:	f04f 30ff 	mov.w	r0, #4294967295
 8004292:	b00d      	add	sp, #52	; 0x34
 8004294:	ecbd 8b02 	vpop	{d8}
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	4640      	mov	r0, r8
 80042a2:	4649      	mov	r1, r9
 80042a4:	f7fc fc4a 	bl	8000b3c <__aeabi_dcmpun>
 80042a8:	b140      	cbz	r0, 80042bc <_printf_float+0xf0>
 80042aa:	464b      	mov	r3, r9
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bfbc      	itt	lt
 80042b0:	232d      	movlt	r3, #45	; 0x2d
 80042b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042b6:	487f      	ldr	r0, [pc, #508]	; (80044b4 <_printf_float+0x2e8>)
 80042b8:	4b7f      	ldr	r3, [pc, #508]	; (80044b8 <_printf_float+0x2ec>)
 80042ba:	e7d1      	b.n	8004260 <_printf_float+0x94>
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042c2:	9206      	str	r2, [sp, #24]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	d13f      	bne.n	8004348 <_printf_float+0x17c>
 80042c8:	2306      	movs	r3, #6
 80042ca:	6063      	str	r3, [r4, #4]
 80042cc:	9b05      	ldr	r3, [sp, #20]
 80042ce:	6861      	ldr	r1, [r4, #4]
 80042d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042d4:	2300      	movs	r3, #0
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	ab0a      	add	r3, sp, #40	; 0x28
 80042da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042de:	ab09      	add	r3, sp, #36	; 0x24
 80042e0:	ec49 8b10 	vmov	d0, r8, r9
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6022      	str	r2, [r4, #0]
 80042e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042ec:	4628      	mov	r0, r5
 80042ee:	f7ff fecd 	bl	800408c <__cvt>
 80042f2:	9b06      	ldr	r3, [sp, #24]
 80042f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042f6:	2b47      	cmp	r3, #71	; 0x47
 80042f8:	4680      	mov	r8, r0
 80042fa:	d108      	bne.n	800430e <_printf_float+0x142>
 80042fc:	1cc8      	adds	r0, r1, #3
 80042fe:	db02      	blt.n	8004306 <_printf_float+0x13a>
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	4299      	cmp	r1, r3
 8004304:	dd41      	ble.n	800438a <_printf_float+0x1be>
 8004306:	f1ab 0b02 	sub.w	fp, fp, #2
 800430a:	fa5f fb8b 	uxtb.w	fp, fp
 800430e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004312:	d820      	bhi.n	8004356 <_printf_float+0x18a>
 8004314:	3901      	subs	r1, #1
 8004316:	465a      	mov	r2, fp
 8004318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800431c:	9109      	str	r1, [sp, #36]	; 0x24
 800431e:	f7ff ff17 	bl	8004150 <__exponent>
 8004322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004324:	1813      	adds	r3, r2, r0
 8004326:	2a01      	cmp	r2, #1
 8004328:	4681      	mov	r9, r0
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	dc02      	bgt.n	8004334 <_printf_float+0x168>
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	07d2      	lsls	r2, r2, #31
 8004332:	d501      	bpl.n	8004338 <_printf_float+0x16c>
 8004334:	3301      	adds	r3, #1
 8004336:	6123      	str	r3, [r4, #16]
 8004338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800433c:	2b00      	cmp	r3, #0
 800433e:	d09c      	beq.n	800427a <_printf_float+0xae>
 8004340:	232d      	movs	r3, #45	; 0x2d
 8004342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004346:	e798      	b.n	800427a <_printf_float+0xae>
 8004348:	9a06      	ldr	r2, [sp, #24]
 800434a:	2a47      	cmp	r2, #71	; 0x47
 800434c:	d1be      	bne.n	80042cc <_printf_float+0x100>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1bc      	bne.n	80042cc <_printf_float+0x100>
 8004352:	2301      	movs	r3, #1
 8004354:	e7b9      	b.n	80042ca <_printf_float+0xfe>
 8004356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800435a:	d118      	bne.n	800438e <_printf_float+0x1c2>
 800435c:	2900      	cmp	r1, #0
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	dd0b      	ble.n	800437a <_printf_float+0x1ae>
 8004362:	6121      	str	r1, [r4, #16]
 8004364:	b913      	cbnz	r3, 800436c <_printf_float+0x1a0>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	07d0      	lsls	r0, r2, #31
 800436a:	d502      	bpl.n	8004372 <_printf_float+0x1a6>
 800436c:	3301      	adds	r3, #1
 800436e:	440b      	add	r3, r1
 8004370:	6123      	str	r3, [r4, #16]
 8004372:	65a1      	str	r1, [r4, #88]	; 0x58
 8004374:	f04f 0900 	mov.w	r9, #0
 8004378:	e7de      	b.n	8004338 <_printf_float+0x16c>
 800437a:	b913      	cbnz	r3, 8004382 <_printf_float+0x1b6>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	07d2      	lsls	r2, r2, #31
 8004380:	d501      	bpl.n	8004386 <_printf_float+0x1ba>
 8004382:	3302      	adds	r3, #2
 8004384:	e7f4      	b.n	8004370 <_printf_float+0x1a4>
 8004386:	2301      	movs	r3, #1
 8004388:	e7f2      	b.n	8004370 <_printf_float+0x1a4>
 800438a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800438e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004390:	4299      	cmp	r1, r3
 8004392:	db05      	blt.n	80043a0 <_printf_float+0x1d4>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	6121      	str	r1, [r4, #16]
 8004398:	07d8      	lsls	r0, r3, #31
 800439a:	d5ea      	bpl.n	8004372 <_printf_float+0x1a6>
 800439c:	1c4b      	adds	r3, r1, #1
 800439e:	e7e7      	b.n	8004370 <_printf_float+0x1a4>
 80043a0:	2900      	cmp	r1, #0
 80043a2:	bfd4      	ite	le
 80043a4:	f1c1 0202 	rsble	r2, r1, #2
 80043a8:	2201      	movgt	r2, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	e7e0      	b.n	8004370 <_printf_float+0x1a4>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	055a      	lsls	r2, r3, #21
 80043b2:	d407      	bmi.n	80043c4 <_printf_float+0x1f8>
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	4642      	mov	r2, r8
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	d12c      	bne.n	800441c <_printf_float+0x250>
 80043c2:	e764      	b.n	800428e <_printf_float+0xc2>
 80043c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043c8:	f240 80e0 	bls.w	800458c <_printf_float+0x3c0>
 80043cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	f7fc fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d034      	beq.n	8004446 <_printf_float+0x27a>
 80043dc:	4a37      	ldr	r2, [pc, #220]	; (80044bc <_printf_float+0x2f0>)
 80043de:	2301      	movs	r3, #1
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f af51 	beq.w	800428e <_printf_float+0xc2>
 80043ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f0:	429a      	cmp	r2, r3
 80043f2:	db02      	blt.n	80043fa <_printf_float+0x22e>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	07d8      	lsls	r0, r3, #31
 80043f8:	d510      	bpl.n	800441c <_printf_float+0x250>
 80043fa:	ee18 3a10 	vmov	r3, s16
 80043fe:	4652      	mov	r2, sl
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af41 	beq.w	800428e <_printf_float+0xc2>
 800440c:	f04f 0800 	mov.w	r8, #0
 8004410:	f104 091a 	add.w	r9, r4, #26
 8004414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	4543      	cmp	r3, r8
 800441a:	dc09      	bgt.n	8004430 <_printf_float+0x264>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	079b      	lsls	r3, r3, #30
 8004420:	f100 8105 	bmi.w	800462e <_printf_float+0x462>
 8004424:	68e0      	ldr	r0, [r4, #12]
 8004426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004428:	4298      	cmp	r0, r3
 800442a:	bfb8      	it	lt
 800442c:	4618      	movlt	r0, r3
 800442e:	e730      	b.n	8004292 <_printf_float+0xc6>
 8004430:	2301      	movs	r3, #1
 8004432:	464a      	mov	r2, r9
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af27 	beq.w	800428e <_printf_float+0xc2>
 8004440:	f108 0801 	add.w	r8, r8, #1
 8004444:	e7e6      	b.n	8004414 <_printf_float+0x248>
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	dc39      	bgt.n	80044c0 <_printf_float+0x2f4>
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <_printf_float+0x2f0>)
 800444e:	2301      	movs	r3, #1
 8004450:	4631      	mov	r1, r6
 8004452:	4628      	mov	r0, r5
 8004454:	47b8      	blx	r7
 8004456:	3001      	adds	r0, #1
 8004458:	f43f af19 	beq.w	800428e <_printf_float+0xc2>
 800445c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004460:	4313      	orrs	r3, r2
 8004462:	d102      	bne.n	800446a <_printf_float+0x29e>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	07d9      	lsls	r1, r3, #31
 8004468:	d5d8      	bpl.n	800441c <_printf_float+0x250>
 800446a:	ee18 3a10 	vmov	r3, s16
 800446e:	4652      	mov	r2, sl
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	47b8      	blx	r7
 8004476:	3001      	adds	r0, #1
 8004478:	f43f af09 	beq.w	800428e <_printf_float+0xc2>
 800447c:	f04f 0900 	mov.w	r9, #0
 8004480:	f104 0a1a 	add.w	sl, r4, #26
 8004484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004486:	425b      	negs	r3, r3
 8004488:	454b      	cmp	r3, r9
 800448a:	dc01      	bgt.n	8004490 <_printf_float+0x2c4>
 800448c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800448e:	e792      	b.n	80043b6 <_printf_float+0x1ea>
 8004490:	2301      	movs	r3, #1
 8004492:	4652      	mov	r2, sl
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	47b8      	blx	r7
 800449a:	3001      	adds	r0, #1
 800449c:	f43f aef7 	beq.w	800428e <_printf_float+0xc2>
 80044a0:	f109 0901 	add.w	r9, r9, #1
 80044a4:	e7ee      	b.n	8004484 <_printf_float+0x2b8>
 80044a6:	bf00      	nop
 80044a8:	7fefffff 	.word	0x7fefffff
 80044ac:	08007b94 	.word	0x08007b94
 80044b0:	08007b98 	.word	0x08007b98
 80044b4:	08007ba0 	.word	0x08007ba0
 80044b8:	08007b9c 	.word	0x08007b9c
 80044bc:	08007ba4 	.word	0x08007ba4
 80044c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bfa8      	it	ge
 80044c8:	461a      	movge	r2, r3
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	4691      	mov	r9, r2
 80044ce:	dc37      	bgt.n	8004540 <_printf_float+0x374>
 80044d0:	f04f 0b00 	mov.w	fp, #0
 80044d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d8:	f104 021a 	add.w	r2, r4, #26
 80044dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	eba3 0309 	sub.w	r3, r3, r9
 80044e4:	455b      	cmp	r3, fp
 80044e6:	dc33      	bgt.n	8004550 <_printf_float+0x384>
 80044e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044ec:	429a      	cmp	r2, r3
 80044ee:	db3b      	blt.n	8004568 <_printf_float+0x39c>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	07da      	lsls	r2, r3, #31
 80044f4:	d438      	bmi.n	8004568 <_printf_float+0x39c>
 80044f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044f8:	9a05      	ldr	r2, [sp, #20]
 80044fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044fc:	1a9a      	subs	r2, r3, r2
 80044fe:	eba3 0901 	sub.w	r9, r3, r1
 8004502:	4591      	cmp	r9, r2
 8004504:	bfa8      	it	ge
 8004506:	4691      	movge	r9, r2
 8004508:	f1b9 0f00 	cmp.w	r9, #0
 800450c:	dc35      	bgt.n	800457a <_printf_float+0x3ae>
 800450e:	f04f 0800 	mov.w	r8, #0
 8004512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004516:	f104 0a1a 	add.w	sl, r4, #26
 800451a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	eba3 0309 	sub.w	r3, r3, r9
 8004524:	4543      	cmp	r3, r8
 8004526:	f77f af79 	ble.w	800441c <_printf_float+0x250>
 800452a:	2301      	movs	r3, #1
 800452c:	4652      	mov	r2, sl
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	47b8      	blx	r7
 8004534:	3001      	adds	r0, #1
 8004536:	f43f aeaa 	beq.w	800428e <_printf_float+0xc2>
 800453a:	f108 0801 	add.w	r8, r8, #1
 800453e:	e7ec      	b.n	800451a <_printf_float+0x34e>
 8004540:	4613      	mov	r3, r2
 8004542:	4631      	mov	r1, r6
 8004544:	4642      	mov	r2, r8
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	d1c0      	bne.n	80044d0 <_printf_float+0x304>
 800454e:	e69e      	b.n	800428e <_printf_float+0xc2>
 8004550:	2301      	movs	r3, #1
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	9205      	str	r2, [sp, #20]
 8004558:	47b8      	blx	r7
 800455a:	3001      	adds	r0, #1
 800455c:	f43f ae97 	beq.w	800428e <_printf_float+0xc2>
 8004560:	9a05      	ldr	r2, [sp, #20]
 8004562:	f10b 0b01 	add.w	fp, fp, #1
 8004566:	e7b9      	b.n	80044dc <_printf_float+0x310>
 8004568:	ee18 3a10 	vmov	r3, s16
 800456c:	4652      	mov	r2, sl
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	47b8      	blx	r7
 8004574:	3001      	adds	r0, #1
 8004576:	d1be      	bne.n	80044f6 <_printf_float+0x32a>
 8004578:	e689      	b.n	800428e <_printf_float+0xc2>
 800457a:	9a05      	ldr	r2, [sp, #20]
 800457c:	464b      	mov	r3, r9
 800457e:	4442      	add	r2, r8
 8004580:	4631      	mov	r1, r6
 8004582:	4628      	mov	r0, r5
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	d1c1      	bne.n	800450e <_printf_float+0x342>
 800458a:	e680      	b.n	800428e <_printf_float+0xc2>
 800458c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800458e:	2a01      	cmp	r2, #1
 8004590:	dc01      	bgt.n	8004596 <_printf_float+0x3ca>
 8004592:	07db      	lsls	r3, r3, #31
 8004594:	d538      	bpl.n	8004608 <_printf_float+0x43c>
 8004596:	2301      	movs	r3, #1
 8004598:	4642      	mov	r2, r8
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f ae74 	beq.w	800428e <_printf_float+0xc2>
 80045a6:	ee18 3a10 	vmov	r3, s16
 80045aa:	4652      	mov	r2, sl
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f ae6b 	beq.w	800428e <_printf_float+0xc2>
 80045b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045bc:	2200      	movs	r2, #0
 80045be:	2300      	movs	r3, #0
 80045c0:	f7fc fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80045c4:	b9d8      	cbnz	r0, 80045fe <_printf_float+0x432>
 80045c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045c8:	f108 0201 	add.w	r2, r8, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	d10e      	bne.n	80045f6 <_printf_float+0x42a>
 80045d8:	e659      	b.n	800428e <_printf_float+0xc2>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f ae52 	beq.w	800428e <_printf_float+0xc2>
 80045ea:	f108 0801 	add.w	r8, r8, #1
 80045ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	4543      	cmp	r3, r8
 80045f4:	dcf1      	bgt.n	80045da <_printf_float+0x40e>
 80045f6:	464b      	mov	r3, r9
 80045f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045fc:	e6dc      	b.n	80043b8 <_printf_float+0x1ec>
 80045fe:	f04f 0800 	mov.w	r8, #0
 8004602:	f104 0a1a 	add.w	sl, r4, #26
 8004606:	e7f2      	b.n	80045ee <_printf_float+0x422>
 8004608:	2301      	movs	r3, #1
 800460a:	4642      	mov	r2, r8
 800460c:	e7df      	b.n	80045ce <_printf_float+0x402>
 800460e:	2301      	movs	r3, #1
 8004610:	464a      	mov	r2, r9
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f ae38 	beq.w	800428e <_printf_float+0xc2>
 800461e:	f108 0801 	add.w	r8, r8, #1
 8004622:	68e3      	ldr	r3, [r4, #12]
 8004624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004626:	1a5b      	subs	r3, r3, r1
 8004628:	4543      	cmp	r3, r8
 800462a:	dcf0      	bgt.n	800460e <_printf_float+0x442>
 800462c:	e6fa      	b.n	8004424 <_printf_float+0x258>
 800462e:	f04f 0800 	mov.w	r8, #0
 8004632:	f104 0919 	add.w	r9, r4, #25
 8004636:	e7f4      	b.n	8004622 <_printf_float+0x456>

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4699      	mov	r9, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfb8      	it	lt
 800464c:	4613      	movlt	r3, r2
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004654:	4607      	mov	r7, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc26      	bgt.n	80046ce <_printf_common+0x96>
 8004680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004684:	1e13      	subs	r3, r2, #0
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42b      	bmi.n	80046e8 <_printf_common+0xb0>
 8004690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004694:	4649      	mov	r1, r9
 8004696:	4638      	mov	r0, r7
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d01e      	beq.n	80046dc <_printf_common+0xa4>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	68e5      	ldr	r5, [r4, #12]
 80046a2:	6832      	ldr	r2, [r6, #0]
 80046a4:	f003 0306 	and.w	r3, r3, #6
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	bf08      	it	eq
 80046ac:	1aad      	subeq	r5, r5, r2
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	6922      	ldr	r2, [r4, #16]
 80046b2:	bf0c      	ite	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	2500      	movne	r5, #0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfc4      	itt	gt
 80046be:	1a9b      	subgt	r3, r3, r2
 80046c0:	18ed      	addgt	r5, r5, r3
 80046c2:	2600      	movs	r6, #0
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xc8>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xa8>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4649      	mov	r1, r9
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c0      	blx	r8
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xac>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c6      	b.n	8004676 <_printf_common+0x3e>
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	2030      	movs	r0, #48	; 0x30
 80046ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046f2:	4422      	add	r2, r4
 80046f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046fc:	3302      	adds	r3, #2
 80046fe:	e7c7      	b.n	8004690 <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4649      	mov	r1, r9
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa4>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x8e>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	7e0f      	ldrb	r7, [r1, #24]
 800471a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800471c:	2f78      	cmp	r7, #120	; 0x78
 800471e:	4691      	mov	r9, r2
 8004720:	4680      	mov	r8, r0
 8004722:	460c      	mov	r4, r1
 8004724:	469a      	mov	sl, r3
 8004726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	; 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d8 	beq.w	80048e6 <_printf_i+0x1d2>
 8004736:	2f58      	cmp	r7, #88	; 0x58
 8004738:	f000 80a3 	beq.w	8004882 <_printf_i+0x16e>
 800473c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a101      	add	r1, pc, #4	; (adr r1, 8004754 <_printf_i+0x40>)
 8004750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048cd 	.word	0x080048cd
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080048af 	.word	0x080048af
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048ef 	.word	0x080048ef
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	080048b7 	.word	0x080048b7
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e0a3      	b.n	8004908 <_printf_i+0x1f4>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	6829      	ldr	r1, [r5, #0]
 80047c4:	0606      	lsls	r6, r0, #24
 80047c6:	f101 0304 	add.w	r3, r1, #4
 80047ca:	d50a      	bpl.n	80047e2 <_printf_i+0xce>
 80047cc:	680e      	ldr	r6, [r1, #0]
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	2e00      	cmp	r6, #0
 80047d2:	da03      	bge.n	80047dc <_printf_i+0xc8>
 80047d4:	232d      	movs	r3, #45	; 0x2d
 80047d6:	4276      	negs	r6, r6
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	485e      	ldr	r0, [pc, #376]	; (8004958 <_printf_i+0x244>)
 80047de:	230a      	movs	r3, #10
 80047e0:	e019      	b.n	8004816 <_printf_i+0x102>
 80047e2:	680e      	ldr	r6, [r1, #0]
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ea:	bf18      	it	ne
 80047ec:	b236      	sxthne	r6, r6
 80047ee:	e7ef      	b.n	80047d0 <_printf_i+0xbc>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	6820      	ldr	r0, [r4, #0]
 80047f4:	1d19      	adds	r1, r3, #4
 80047f6:	6029      	str	r1, [r5, #0]
 80047f8:	0601      	lsls	r1, r0, #24
 80047fa:	d501      	bpl.n	8004800 <_printf_i+0xec>
 80047fc:	681e      	ldr	r6, [r3, #0]
 80047fe:	e002      	b.n	8004806 <_printf_i+0xf2>
 8004800:	0646      	lsls	r6, r0, #25
 8004802:	d5fb      	bpl.n	80047fc <_printf_i+0xe8>
 8004804:	881e      	ldrh	r6, [r3, #0]
 8004806:	4854      	ldr	r0, [pc, #336]	; (8004958 <_printf_i+0x244>)
 8004808:	2f6f      	cmp	r7, #111	; 0x6f
 800480a:	bf0c      	ite	eq
 800480c:	2308      	moveq	r3, #8
 800480e:	230a      	movne	r3, #10
 8004810:	2100      	movs	r1, #0
 8004812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004816:	6865      	ldr	r5, [r4, #4]
 8004818:	60a5      	str	r5, [r4, #8]
 800481a:	2d00      	cmp	r5, #0
 800481c:	bfa2      	ittt	ge
 800481e:	6821      	ldrge	r1, [r4, #0]
 8004820:	f021 0104 	bicge.w	r1, r1, #4
 8004824:	6021      	strge	r1, [r4, #0]
 8004826:	b90e      	cbnz	r6, 800482c <_printf_i+0x118>
 8004828:	2d00      	cmp	r5, #0
 800482a:	d04d      	beq.n	80048c8 <_printf_i+0x1b4>
 800482c:	4615      	mov	r5, r2
 800482e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004832:	fb03 6711 	mls	r7, r3, r1, r6
 8004836:	5dc7      	ldrb	r7, [r0, r7]
 8004838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800483c:	4637      	mov	r7, r6
 800483e:	42bb      	cmp	r3, r7
 8004840:	460e      	mov	r6, r1
 8004842:	d9f4      	bls.n	800482e <_printf_i+0x11a>
 8004844:	2b08      	cmp	r3, #8
 8004846:	d10b      	bne.n	8004860 <_printf_i+0x14c>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	07de      	lsls	r6, r3, #31
 800484c:	d508      	bpl.n	8004860 <_printf_i+0x14c>
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	6861      	ldr	r1, [r4, #4]
 8004852:	4299      	cmp	r1, r3
 8004854:	bfde      	ittt	le
 8004856:	2330      	movle	r3, #48	; 0x30
 8004858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800485c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004860:	1b52      	subs	r2, r2, r5
 8004862:	6122      	str	r2, [r4, #16]
 8004864:	f8cd a000 	str.w	sl, [sp]
 8004868:	464b      	mov	r3, r9
 800486a:	aa03      	add	r2, sp, #12
 800486c:	4621      	mov	r1, r4
 800486e:	4640      	mov	r0, r8
 8004870:	f7ff fee2 	bl	8004638 <_printf_common>
 8004874:	3001      	adds	r0, #1
 8004876:	d14c      	bne.n	8004912 <_printf_i+0x1fe>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	b004      	add	sp, #16
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	4835      	ldr	r0, [pc, #212]	; (8004958 <_printf_i+0x244>)
 8004884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004888:	6829      	ldr	r1, [r5, #0]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004890:	6029      	str	r1, [r5, #0]
 8004892:	061d      	lsls	r5, r3, #24
 8004894:	d514      	bpl.n	80048c0 <_printf_i+0x1ac>
 8004896:	07df      	lsls	r7, r3, #31
 8004898:	bf44      	itt	mi
 800489a:	f043 0320 	orrmi.w	r3, r3, #32
 800489e:	6023      	strmi	r3, [r4, #0]
 80048a0:	b91e      	cbnz	r6, 80048aa <_printf_i+0x196>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f023 0320 	bic.w	r3, r3, #32
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	2310      	movs	r3, #16
 80048ac:	e7b0      	b.n	8004810 <_printf_i+0xfc>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f043 0320 	orr.w	r3, r3, #32
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	2378      	movs	r3, #120	; 0x78
 80048b8:	4828      	ldr	r0, [pc, #160]	; (800495c <_printf_i+0x248>)
 80048ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048be:	e7e3      	b.n	8004888 <_printf_i+0x174>
 80048c0:	0659      	lsls	r1, r3, #25
 80048c2:	bf48      	it	mi
 80048c4:	b2b6      	uxthmi	r6, r6
 80048c6:	e7e6      	b.n	8004896 <_printf_i+0x182>
 80048c8:	4615      	mov	r5, r2
 80048ca:	e7bb      	b.n	8004844 <_printf_i+0x130>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	6826      	ldr	r6, [r4, #0]
 80048d0:	6961      	ldr	r1, [r4, #20]
 80048d2:	1d18      	adds	r0, r3, #4
 80048d4:	6028      	str	r0, [r5, #0]
 80048d6:	0635      	lsls	r5, r6, #24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	d501      	bpl.n	80048e0 <_printf_i+0x1cc>
 80048dc:	6019      	str	r1, [r3, #0]
 80048de:	e002      	b.n	80048e6 <_printf_i+0x1d2>
 80048e0:	0670      	lsls	r0, r6, #25
 80048e2:	d5fb      	bpl.n	80048dc <_printf_i+0x1c8>
 80048e4:	8019      	strh	r1, [r3, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	4615      	mov	r5, r2
 80048ec:	e7ba      	b.n	8004864 <_printf_i+0x150>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	602a      	str	r2, [r5, #0]
 80048f4:	681d      	ldr	r5, [r3, #0]
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4628      	mov	r0, r5
 80048fc:	f7fb fc78 	bl	80001f0 <memchr>
 8004900:	b108      	cbz	r0, 8004906 <_printf_i+0x1f2>
 8004902:	1b40      	subs	r0, r0, r5
 8004904:	6060      	str	r0, [r4, #4]
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	2300      	movs	r3, #0
 800490c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004910:	e7a8      	b.n	8004864 <_printf_i+0x150>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	462a      	mov	r2, r5
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d0ab      	beq.n	8004878 <_printf_i+0x164>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	079b      	lsls	r3, r3, #30
 8004924:	d413      	bmi.n	800494e <_printf_i+0x23a>
 8004926:	68e0      	ldr	r0, [r4, #12]
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	4298      	cmp	r0, r3
 800492c:	bfb8      	it	lt
 800492e:	4618      	movlt	r0, r3
 8004930:	e7a4      	b.n	800487c <_printf_i+0x168>
 8004932:	2301      	movs	r3, #1
 8004934:	4632      	mov	r2, r6
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	47d0      	blx	sl
 800493c:	3001      	adds	r0, #1
 800493e:	d09b      	beq.n	8004878 <_printf_i+0x164>
 8004940:	3501      	adds	r5, #1
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	9903      	ldr	r1, [sp, #12]
 8004946:	1a5b      	subs	r3, r3, r1
 8004948:	42ab      	cmp	r3, r5
 800494a:	dcf2      	bgt.n	8004932 <_printf_i+0x21e>
 800494c:	e7eb      	b.n	8004926 <_printf_i+0x212>
 800494e:	2500      	movs	r5, #0
 8004950:	f104 0619 	add.w	r6, r4, #25
 8004954:	e7f5      	b.n	8004942 <_printf_i+0x22e>
 8004956:	bf00      	nop
 8004958:	08007ba6 	.word	0x08007ba6
 800495c:	08007bb7 	.word	0x08007bb7

08004960 <siprintf>:
 8004960:	b40e      	push	{r1, r2, r3}
 8004962:	b500      	push	{lr}
 8004964:	b09c      	sub	sp, #112	; 0x70
 8004966:	ab1d      	add	r3, sp, #116	; 0x74
 8004968:	9002      	str	r0, [sp, #8]
 800496a:	9006      	str	r0, [sp, #24]
 800496c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004970:	4809      	ldr	r0, [pc, #36]	; (8004998 <siprintf+0x38>)
 8004972:	9107      	str	r1, [sp, #28]
 8004974:	9104      	str	r1, [sp, #16]
 8004976:	4909      	ldr	r1, [pc, #36]	; (800499c <siprintf+0x3c>)
 8004978:	f853 2b04 	ldr.w	r2, [r3], #4
 800497c:	9105      	str	r1, [sp, #20]
 800497e:	6800      	ldr	r0, [r0, #0]
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	a902      	add	r1, sp, #8
 8004984:	f001 fb68 	bl	8006058 <_svfiprintf_r>
 8004988:	9b02      	ldr	r3, [sp, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	b01c      	add	sp, #112	; 0x70
 8004990:	f85d eb04 	ldr.w	lr, [sp], #4
 8004994:	b003      	add	sp, #12
 8004996:	4770      	bx	lr
 8004998:	20000014 	.word	0x20000014
 800499c:	ffff0208 	.word	0xffff0208

080049a0 <quorem>:
 80049a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	6903      	ldr	r3, [r0, #16]
 80049a6:	690c      	ldr	r4, [r1, #16]
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	4607      	mov	r7, r0
 80049ac:	f2c0 8081 	blt.w	8004ab2 <quorem+0x112>
 80049b0:	3c01      	subs	r4, #1
 80049b2:	f101 0814 	add.w	r8, r1, #20
 80049b6:	f100 0514 	add.w	r5, r0, #20
 80049ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049c8:	3301      	adds	r3, #1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80049d8:	d331      	bcc.n	8004a3e <quorem+0x9e>
 80049da:	f04f 0e00 	mov.w	lr, #0
 80049de:	4640      	mov	r0, r8
 80049e0:	46ac      	mov	ip, r5
 80049e2:	46f2      	mov	sl, lr
 80049e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049e8:	b293      	uxth	r3, r2
 80049ea:	fb06 e303 	mla	r3, r6, r3, lr
 80049ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	ebaa 0303 	sub.w	r3, sl, r3
 80049f8:	f8dc a000 	ldr.w	sl, [ip]
 80049fc:	0c12      	lsrs	r2, r2, #16
 80049fe:	fa13 f38a 	uxtah	r3, r3, sl
 8004a02:	fb06 e202 	mla	r2, r6, r2, lr
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	9b00      	ldr	r3, [sp, #0]
 8004a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a18:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a1c:	4581      	cmp	r9, r0
 8004a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a22:	f84c 3b04 	str.w	r3, [ip], #4
 8004a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a2a:	d2db      	bcs.n	80049e4 <quorem+0x44>
 8004a2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a30:	b92b      	cbnz	r3, 8004a3e <quorem+0x9e>
 8004a32:	9b01      	ldr	r3, [sp, #4]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	429d      	cmp	r5, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	d32e      	bcc.n	8004a9a <quorem+0xfa>
 8004a3c:	613c      	str	r4, [r7, #16]
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f001 f8b6 	bl	8005bb0 <__mcmp>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	db24      	blt.n	8004a92 <quorem+0xf2>
 8004a48:	3601      	adds	r6, #1
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f04f 0c00 	mov.w	ip, #0
 8004a50:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a54:	f8d0 e000 	ldr.w	lr, [r0]
 8004a58:	b293      	uxth	r3, r2
 8004a5a:	ebac 0303 	sub.w	r3, ip, r3
 8004a5e:	0c12      	lsrs	r2, r2, #16
 8004a60:	fa13 f38e 	uxtah	r3, r3, lr
 8004a64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a72:	45c1      	cmp	r9, r8
 8004a74:	f840 3b04 	str.w	r3, [r0], #4
 8004a78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a7c:	d2e8      	bcs.n	8004a50 <quorem+0xb0>
 8004a7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a86:	b922      	cbnz	r2, 8004a92 <quorem+0xf2>
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	429d      	cmp	r5, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	d30a      	bcc.n	8004aa6 <quorem+0x106>
 8004a90:	613c      	str	r4, [r7, #16]
 8004a92:	4630      	mov	r0, r6
 8004a94:	b003      	add	sp, #12
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d1cc      	bne.n	8004a3c <quorem+0x9c>
 8004aa2:	3c01      	subs	r4, #1
 8004aa4:	e7c7      	b.n	8004a36 <quorem+0x96>
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	3b04      	subs	r3, #4
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	d1f0      	bne.n	8004a90 <quorem+0xf0>
 8004aae:	3c01      	subs	r4, #1
 8004ab0:	e7eb      	b.n	8004a8a <quorem+0xea>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e7ee      	b.n	8004a94 <quorem+0xf4>
	...

08004ab8 <_dtoa_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	ed2d 8b04 	vpush	{d8-d9}
 8004ac0:	ec57 6b10 	vmov	r6, r7, d0
 8004ac4:	b093      	sub	sp, #76	; 0x4c
 8004ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004acc:	9106      	str	r1, [sp, #24]
 8004ace:	ee10 aa10 	vmov	sl, s0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ad8:	46bb      	mov	fp, r7
 8004ada:	b975      	cbnz	r5, 8004afa <_dtoa_r+0x42>
 8004adc:	2010      	movs	r0, #16
 8004ade:	f000 fddd 	bl	800569c <malloc>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8004ae6:	b920      	cbnz	r0, 8004af2 <_dtoa_r+0x3a>
 8004ae8:	4ba7      	ldr	r3, [pc, #668]	; (8004d88 <_dtoa_r+0x2d0>)
 8004aea:	21ea      	movs	r1, #234	; 0xea
 8004aec:	48a7      	ldr	r0, [pc, #668]	; (8004d8c <_dtoa_r+0x2d4>)
 8004aee:	f001 fbc3 	bl	8006278 <__assert_func>
 8004af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004af6:	6005      	str	r5, [r0, #0]
 8004af8:	60c5      	str	r5, [r0, #12]
 8004afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	b151      	cbz	r1, 8004b16 <_dtoa_r+0x5e>
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	604a      	str	r2, [r1, #4]
 8004b04:	2301      	movs	r3, #1
 8004b06:	4093      	lsls	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 fe0e 	bl	800572c <_Bfree>
 8004b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	1e3b      	subs	r3, r7, #0
 8004b18:	bfaa      	itet	ge
 8004b1a:	2300      	movge	r3, #0
 8004b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004b20:	f8c8 3000 	strge.w	r3, [r8]
 8004b24:	4b9a      	ldr	r3, [pc, #616]	; (8004d90 <_dtoa_r+0x2d8>)
 8004b26:	bfbc      	itt	lt
 8004b28:	2201      	movlt	r2, #1
 8004b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8004b2e:	ea33 030b 	bics.w	r3, r3, fp
 8004b32:	d11b      	bne.n	8004b6c <_dtoa_r+0xb4>
 8004b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b40:	4333      	orrs	r3, r6
 8004b42:	f000 8592 	beq.w	800566a <_dtoa_r+0xbb2>
 8004b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b48:	b963      	cbnz	r3, 8004b64 <_dtoa_r+0xac>
 8004b4a:	4b92      	ldr	r3, [pc, #584]	; (8004d94 <_dtoa_r+0x2dc>)
 8004b4c:	e022      	b.n	8004b94 <_dtoa_r+0xdc>
 8004b4e:	4b92      	ldr	r3, [pc, #584]	; (8004d98 <_dtoa_r+0x2e0>)
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	3308      	adds	r3, #8
 8004b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	9801      	ldr	r0, [sp, #4]
 8004b5a:	b013      	add	sp, #76	; 0x4c
 8004b5c:	ecbd 8b04 	vpop	{d8-d9}
 8004b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b64:	4b8b      	ldr	r3, [pc, #556]	; (8004d94 <_dtoa_r+0x2dc>)
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	3303      	adds	r3, #3
 8004b6a:	e7f3      	b.n	8004b54 <_dtoa_r+0x9c>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4650      	mov	r0, sl
 8004b72:	4659      	mov	r1, fp
 8004b74:	f7fb ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b78:	ec4b ab19 	vmov	d9, sl, fp
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	b158      	cbz	r0, 8004b98 <_dtoa_r+0xe0>
 8004b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b82:	2301      	movs	r3, #1
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 856b 	beq.w	8005664 <_dtoa_r+0xbac>
 8004b8e:	4883      	ldr	r0, [pc, #524]	; (8004d9c <_dtoa_r+0x2e4>)
 8004b90:	6018      	str	r0, [r3, #0]
 8004b92:	1e43      	subs	r3, r0, #1
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	e7df      	b.n	8004b58 <_dtoa_r+0xa0>
 8004b98:	ec4b ab10 	vmov	d0, sl, fp
 8004b9c:	aa10      	add	r2, sp, #64	; 0x40
 8004b9e:	a911      	add	r1, sp, #68	; 0x44
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f001 f8ab 	bl	8005cfc <__d2b>
 8004ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004baa:	ee08 0a10 	vmov	s16, r0
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	f000 8084 	beq.w	8004cbc <_dtoa_r+0x204>
 8004bb4:	ee19 3a90 	vmov	r3, s19
 8004bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004bc0:	4656      	mov	r6, sl
 8004bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004bce:	4b74      	ldr	r3, [pc, #464]	; (8004da0 <_dtoa_r+0x2e8>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb fb5f 	bl	8000298 <__aeabi_dsub>
 8004bda:	a365      	add	r3, pc, #404	; (adr r3, 8004d70 <_dtoa_r+0x2b8>)
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f7fb fd12 	bl	8000608 <__aeabi_dmul>
 8004be4:	a364      	add	r3, pc, #400	; (adr r3, 8004d78 <_dtoa_r+0x2c0>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f7fb fb57 	bl	800029c <__adddf3>
 8004bee:	4606      	mov	r6, r0
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	f7fb fc9e 	bl	8000534 <__aeabi_i2d>
 8004bf8:	a361      	add	r3, pc, #388	; (adr r3, 8004d80 <_dtoa_r+0x2c8>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fd03 	bl	8000608 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4630      	mov	r0, r6
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7fb fb47 	bl	800029c <__adddf3>
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	f7fb ffa9 	bl	8000b68 <__aeabi_d2iz>
 8004c16:	2200      	movs	r2, #0
 8004c18:	9000      	str	r0, [sp, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	4639      	mov	r1, r7
 8004c20:	f7fb ff64 	bl	8000aec <__aeabi_dcmplt>
 8004c24:	b150      	cbz	r0, 8004c3c <_dtoa_r+0x184>
 8004c26:	9800      	ldr	r0, [sp, #0]
 8004c28:	f7fb fc84 	bl	8000534 <__aeabi_i2d>
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	463b      	mov	r3, r7
 8004c30:	f7fb ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c34:	b910      	cbnz	r0, 8004c3c <_dtoa_r+0x184>
 8004c36:	9b00      	ldr	r3, [sp, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	9b00      	ldr	r3, [sp, #0]
 8004c3e:	2b16      	cmp	r3, #22
 8004c40:	d85a      	bhi.n	8004cf8 <_dtoa_r+0x240>
 8004c42:	9a00      	ldr	r2, [sp, #0]
 8004c44:	4b57      	ldr	r3, [pc, #348]	; (8004da4 <_dtoa_r+0x2ec>)
 8004c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	ec51 0b19 	vmov	r0, r1, d9
 8004c52:	f7fb ff4b 	bl	8000aec <__aeabi_dcmplt>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d050      	beq.n	8004cfc <_dtoa_r+0x244>
 8004c5a:	9b00      	ldr	r3, [sp, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c66:	1b5d      	subs	r5, r3, r5
 8004c68:	1e6b      	subs	r3, r5, #1
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	bf45      	ittet	mi
 8004c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c72:	9304      	strmi	r3, [sp, #16]
 8004c74:	2300      	movpl	r3, #0
 8004c76:	2300      	movmi	r3, #0
 8004c78:	bf4c      	ite	mi
 8004c7a:	9305      	strmi	r3, [sp, #20]
 8004c7c:	9304      	strpl	r3, [sp, #16]
 8004c7e:	9b00      	ldr	r3, [sp, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db3d      	blt.n	8004d00 <_dtoa_r+0x248>
 8004c84:	9b05      	ldr	r3, [sp, #20]
 8004c86:	9a00      	ldr	r2, [sp, #0]
 8004c88:	920a      	str	r2, [sp, #40]	; 0x28
 8004c8a:	4413      	add	r3, r2
 8004c8c:	9305      	str	r3, [sp, #20]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9307      	str	r3, [sp, #28]
 8004c92:	9b06      	ldr	r3, [sp, #24]
 8004c94:	2b09      	cmp	r3, #9
 8004c96:	f200 8089 	bhi.w	8004dac <_dtoa_r+0x2f4>
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	bfc4      	itt	gt
 8004c9e:	3b04      	subgt	r3, #4
 8004ca0:	9306      	strgt	r3, [sp, #24]
 8004ca2:	9b06      	ldr	r3, [sp, #24]
 8004ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8004ca8:	bfcc      	ite	gt
 8004caa:	2500      	movgt	r5, #0
 8004cac:	2501      	movle	r5, #1
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	f200 8087 	bhi.w	8004dc2 <_dtoa_r+0x30a>
 8004cb4:	e8df f003 	tbb	[pc, r3]
 8004cb8:	59383a2d 	.word	0x59383a2d
 8004cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004cc0:	441d      	add	r5, r3
 8004cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	bfc1      	itttt	gt
 8004cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8004cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cda:	bfda      	itte	le
 8004cdc:	f1c3 0320 	rsble	r3, r3, #32
 8004ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8004ce4:	4318      	orrgt	r0, r3
 8004ce6:	f7fb fc15 	bl	8000514 <__aeabi_ui2d>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4606      	mov	r6, r0
 8004cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004cf2:	3d01      	subs	r5, #1
 8004cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8004cf6:	e76a      	b.n	8004bce <_dtoa_r+0x116>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e7b2      	b.n	8004c62 <_dtoa_r+0x1aa>
 8004cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8004cfe:	e7b1      	b.n	8004c64 <_dtoa_r+0x1ac>
 8004d00:	9b04      	ldr	r3, [sp, #16]
 8004d02:	9a00      	ldr	r2, [sp, #0]
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	4253      	negs	r3, r2
 8004d0a:	9307      	str	r3, [sp, #28]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d10:	e7bf      	b.n	8004c92 <_dtoa_r+0x1da>
 8004d12:	2300      	movs	r3, #0
 8004d14:	9308      	str	r3, [sp, #32]
 8004d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	dc55      	bgt.n	8004dc8 <_dtoa_r+0x310>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d22:	461a      	mov	r2, r3
 8004d24:	9209      	str	r2, [sp, #36]	; 0x24
 8004d26:	e00c      	b.n	8004d42 <_dtoa_r+0x28a>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e7f3      	b.n	8004d14 <_dtoa_r+0x25c>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d30:	9308      	str	r3, [sp, #32]
 8004d32:	9b00      	ldr	r3, [sp, #0]
 8004d34:	4413      	add	r3, r2
 8004d36:	9302      	str	r3, [sp, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	9303      	str	r3, [sp, #12]
 8004d3e:	bfb8      	it	lt
 8004d40:	2301      	movlt	r3, #1
 8004d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d44:	2200      	movs	r2, #0
 8004d46:	6042      	str	r2, [r0, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	f102 0614 	add.w	r6, r2, #20
 8004d4e:	429e      	cmp	r6, r3
 8004d50:	6841      	ldr	r1, [r0, #4]
 8004d52:	d93d      	bls.n	8004dd0 <_dtoa_r+0x318>
 8004d54:	4620      	mov	r0, r4
 8004d56:	f000 fca9 	bl	80056ac <_Balloc>
 8004d5a:	9001      	str	r0, [sp, #4]
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d13b      	bne.n	8004dd8 <_dtoa_r+0x320>
 8004d60:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <_dtoa_r+0x2f0>)
 8004d62:	4602      	mov	r2, r0
 8004d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d68:	e6c0      	b.n	8004aec <_dtoa_r+0x34>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e7df      	b.n	8004d2e <_dtoa_r+0x276>
 8004d6e:	bf00      	nop
 8004d70:	636f4361 	.word	0x636f4361
 8004d74:	3fd287a7 	.word	0x3fd287a7
 8004d78:	8b60c8b3 	.word	0x8b60c8b3
 8004d7c:	3fc68a28 	.word	0x3fc68a28
 8004d80:	509f79fb 	.word	0x509f79fb
 8004d84:	3fd34413 	.word	0x3fd34413
 8004d88:	08007bd5 	.word	0x08007bd5
 8004d8c:	08007bec 	.word	0x08007bec
 8004d90:	7ff00000 	.word	0x7ff00000
 8004d94:	08007bd1 	.word	0x08007bd1
 8004d98:	08007bc8 	.word	0x08007bc8
 8004d9c:	08007ba5 	.word	0x08007ba5
 8004da0:	3ff80000 	.word	0x3ff80000
 8004da4:	08007ce0 	.word	0x08007ce0
 8004da8:	08007c47 	.word	0x08007c47
 8004dac:	2501      	movs	r5, #1
 8004dae:	2300      	movs	r3, #0
 8004db0:	9306      	str	r3, [sp, #24]
 8004db2:	9508      	str	r5, [sp, #32]
 8004db4:	f04f 33ff 	mov.w	r3, #4294967295
 8004db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2312      	movs	r3, #18
 8004dc0:	e7b0      	b.n	8004d24 <_dtoa_r+0x26c>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	9308      	str	r3, [sp, #32]
 8004dc6:	e7f5      	b.n	8004db4 <_dtoa_r+0x2fc>
 8004dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004dce:	e7b8      	b.n	8004d42 <_dtoa_r+0x28a>
 8004dd0:	3101      	adds	r1, #1
 8004dd2:	6041      	str	r1, [r0, #4]
 8004dd4:	0052      	lsls	r2, r2, #1
 8004dd6:	e7b8      	b.n	8004d4a <_dtoa_r+0x292>
 8004dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dda:	9a01      	ldr	r2, [sp, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	2b0e      	cmp	r3, #14
 8004de2:	f200 809d 	bhi.w	8004f20 <_dtoa_r+0x468>
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f000 809a 	beq.w	8004f20 <_dtoa_r+0x468>
 8004dec:	9b00      	ldr	r3, [sp, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dd32      	ble.n	8004e58 <_dtoa_r+0x3a0>
 8004df2:	4ab7      	ldr	r2, [pc, #732]	; (80050d0 <_dtoa_r+0x618>)
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e00:	9b00      	ldr	r3, [sp, #0]
 8004e02:	05d8      	lsls	r0, r3, #23
 8004e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004e08:	d516      	bpl.n	8004e38 <_dtoa_r+0x380>
 8004e0a:	4bb2      	ldr	r3, [pc, #712]	; (80050d4 <_dtoa_r+0x61c>)
 8004e0c:	ec51 0b19 	vmov	r0, r1, d9
 8004e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e14:	f7fb fd22 	bl	800085c <__aeabi_ddiv>
 8004e18:	f007 070f 	and.w	r7, r7, #15
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	468b      	mov	fp, r1
 8004e20:	2503      	movs	r5, #3
 8004e22:	4eac      	ldr	r6, [pc, #688]	; (80050d4 <_dtoa_r+0x61c>)
 8004e24:	b957      	cbnz	r7, 8004e3c <_dtoa_r+0x384>
 8004e26:	4642      	mov	r2, r8
 8004e28:	464b      	mov	r3, r9
 8004e2a:	4650      	mov	r0, sl
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	f7fb fd15 	bl	800085c <__aeabi_ddiv>
 8004e32:	4682      	mov	sl, r0
 8004e34:	468b      	mov	fp, r1
 8004e36:	e028      	b.n	8004e8a <_dtoa_r+0x3d2>
 8004e38:	2502      	movs	r5, #2
 8004e3a:	e7f2      	b.n	8004e22 <_dtoa_r+0x36a>
 8004e3c:	07f9      	lsls	r1, r7, #31
 8004e3e:	d508      	bpl.n	8004e52 <_dtoa_r+0x39a>
 8004e40:	4640      	mov	r0, r8
 8004e42:	4649      	mov	r1, r9
 8004e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e48:	f7fb fbde 	bl	8000608 <__aeabi_dmul>
 8004e4c:	3501      	adds	r5, #1
 8004e4e:	4680      	mov	r8, r0
 8004e50:	4689      	mov	r9, r1
 8004e52:	107f      	asrs	r7, r7, #1
 8004e54:	3608      	adds	r6, #8
 8004e56:	e7e5      	b.n	8004e24 <_dtoa_r+0x36c>
 8004e58:	f000 809b 	beq.w	8004f92 <_dtoa_r+0x4da>
 8004e5c:	9b00      	ldr	r3, [sp, #0]
 8004e5e:	4f9d      	ldr	r7, [pc, #628]	; (80050d4 <_dtoa_r+0x61c>)
 8004e60:	425e      	negs	r6, r3
 8004e62:	4b9b      	ldr	r3, [pc, #620]	; (80050d0 <_dtoa_r+0x618>)
 8004e64:	f006 020f 	and.w	r2, r6, #15
 8004e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	ec51 0b19 	vmov	r0, r1, d9
 8004e74:	f7fb fbc8 	bl	8000608 <__aeabi_dmul>
 8004e78:	1136      	asrs	r6, r6, #4
 8004e7a:	4682      	mov	sl, r0
 8004e7c:	468b      	mov	fp, r1
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2502      	movs	r5, #2
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d17a      	bne.n	8004f7c <_dtoa_r+0x4c4>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1d3      	bne.n	8004e32 <_dtoa_r+0x37a>
 8004e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8082 	beq.w	8004f96 <_dtoa_r+0x4de>
 8004e92:	4b91      	ldr	r3, [pc, #580]	; (80050d8 <_dtoa_r+0x620>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	4650      	mov	r0, sl
 8004e98:	4659      	mov	r1, fp
 8004e9a:	f7fb fe27 	bl	8000aec <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d079      	beq.n	8004f96 <_dtoa_r+0x4de>
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d076      	beq.n	8004f96 <_dtoa_r+0x4de>
 8004ea8:	9b02      	ldr	r3, [sp, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dd36      	ble.n	8004f1c <_dtoa_r+0x464>
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	4650      	mov	r0, sl
 8004eb2:	4659      	mov	r1, fp
 8004eb4:	1e5f      	subs	r7, r3, #1
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4b88      	ldr	r3, [pc, #544]	; (80050dc <_dtoa_r+0x624>)
 8004eba:	f7fb fba5 	bl	8000608 <__aeabi_dmul>
 8004ebe:	9e02      	ldr	r6, [sp, #8]
 8004ec0:	4682      	mov	sl, r0
 8004ec2:	468b      	mov	fp, r1
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f7fb fb34 	bl	8000534 <__aeabi_i2d>
 8004ecc:	4652      	mov	r2, sl
 8004ece:	465b      	mov	r3, fp
 8004ed0:	f7fb fb9a 	bl	8000608 <__aeabi_dmul>
 8004ed4:	4b82      	ldr	r3, [pc, #520]	; (80050e0 <_dtoa_r+0x628>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f7fb f9e0 	bl	800029c <__adddf3>
 8004edc:	46d0      	mov	r8, sl
 8004ede:	46d9      	mov	r9, fp
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	d158      	bne.n	8004f9c <_dtoa_r+0x4e4>
 8004eea:	4b7e      	ldr	r3, [pc, #504]	; (80050e4 <_dtoa_r+0x62c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	4640      	mov	r0, r8
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	f7fb f9d1 	bl	8000298 <__aeabi_dsub>
 8004ef6:	4652      	mov	r2, sl
 8004ef8:	465b      	mov	r3, fp
 8004efa:	4680      	mov	r8, r0
 8004efc:	4689      	mov	r9, r1
 8004efe:	f7fb fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f040 8295 	bne.w	8005432 <_dtoa_r+0x97a>
 8004f08:	4652      	mov	r2, sl
 8004f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004f0e:	4640      	mov	r0, r8
 8004f10:	4649      	mov	r1, r9
 8004f12:	f7fb fdeb 	bl	8000aec <__aeabi_dcmplt>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f040 8289 	bne.w	800542e <_dtoa_r+0x976>
 8004f1c:	ec5b ab19 	vmov	sl, fp, d9
 8004f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f2c0 8148 	blt.w	80051b8 <_dtoa_r+0x700>
 8004f28:	9a00      	ldr	r2, [sp, #0]
 8004f2a:	2a0e      	cmp	r2, #14
 8004f2c:	f300 8144 	bgt.w	80051b8 <_dtoa_r+0x700>
 8004f30:	4b67      	ldr	r3, [pc, #412]	; (80050d0 <_dtoa_r+0x618>)
 8004f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f280 80d5 	bge.w	80050ec <_dtoa_r+0x634>
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f300 80d1 	bgt.w	80050ec <_dtoa_r+0x634>
 8004f4a:	f040 826f 	bne.w	800542c <_dtoa_r+0x974>
 8004f4e:	4b65      	ldr	r3, [pc, #404]	; (80050e4 <_dtoa_r+0x62c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	4640      	mov	r0, r8
 8004f54:	4649      	mov	r1, r9
 8004f56:	f7fb fb57 	bl	8000608 <__aeabi_dmul>
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	465b      	mov	r3, fp
 8004f5e:	f7fb fdd9 	bl	8000b14 <__aeabi_dcmpge>
 8004f62:	9e03      	ldr	r6, [sp, #12]
 8004f64:	4637      	mov	r7, r6
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f040 8245 	bne.w	80053f6 <_dtoa_r+0x93e>
 8004f6c:	9d01      	ldr	r5, [sp, #4]
 8004f6e:	2331      	movs	r3, #49	; 0x31
 8004f70:	f805 3b01 	strb.w	r3, [r5], #1
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	e240      	b.n	80053fe <_dtoa_r+0x946>
 8004f7c:	07f2      	lsls	r2, r6, #31
 8004f7e:	d505      	bpl.n	8004f8c <_dtoa_r+0x4d4>
 8004f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f84:	f7fb fb40 	bl	8000608 <__aeabi_dmul>
 8004f88:	3501      	adds	r5, #1
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	1076      	asrs	r6, r6, #1
 8004f8e:	3708      	adds	r7, #8
 8004f90:	e777      	b.n	8004e82 <_dtoa_r+0x3ca>
 8004f92:	2502      	movs	r5, #2
 8004f94:	e779      	b.n	8004e8a <_dtoa_r+0x3d2>
 8004f96:	9f00      	ldr	r7, [sp, #0]
 8004f98:	9e03      	ldr	r6, [sp, #12]
 8004f9a:	e794      	b.n	8004ec6 <_dtoa_r+0x40e>
 8004f9c:	9901      	ldr	r1, [sp, #4]
 8004f9e:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <_dtoa_r+0x618>)
 8004fa0:	4431      	add	r1, r6
 8004fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8004fa4:	9908      	ldr	r1, [sp, #32]
 8004fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	d043      	beq.n	800503a <_dtoa_r+0x582>
 8004fb2:	494d      	ldr	r1, [pc, #308]	; (80050e8 <_dtoa_r+0x630>)
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7fb fc51 	bl	800085c <__aeabi_ddiv>
 8004fba:	4652      	mov	r2, sl
 8004fbc:	465b      	mov	r3, fp
 8004fbe:	f7fb f96b 	bl	8000298 <__aeabi_dsub>
 8004fc2:	9d01      	ldr	r5, [sp, #4]
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	468b      	mov	fp, r1
 8004fc8:	4649      	mov	r1, r9
 8004fca:	4640      	mov	r0, r8
 8004fcc:	f7fb fdcc 	bl	8000b68 <__aeabi_d2iz>
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	f7fb faaf 	bl	8000534 <__aeabi_i2d>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4640      	mov	r0, r8
 8004fdc:	4649      	mov	r1, r9
 8004fde:	f7fb f95b 	bl	8000298 <__aeabi_dsub>
 8004fe2:	3630      	adds	r6, #48	; 0x30
 8004fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8004fe8:	4652      	mov	r2, sl
 8004fea:	465b      	mov	r3, fp
 8004fec:	4680      	mov	r8, r0
 8004fee:	4689      	mov	r9, r1
 8004ff0:	f7fb fd7c 	bl	8000aec <__aeabi_dcmplt>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d163      	bne.n	80050c0 <_dtoa_r+0x608>
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	4936      	ldr	r1, [pc, #216]	; (80050d8 <_dtoa_r+0x620>)
 8004ffe:	2000      	movs	r0, #0
 8005000:	f7fb f94a 	bl	8000298 <__aeabi_dsub>
 8005004:	4652      	mov	r2, sl
 8005006:	465b      	mov	r3, fp
 8005008:	f7fb fd70 	bl	8000aec <__aeabi_dcmplt>
 800500c:	2800      	cmp	r0, #0
 800500e:	f040 80b5 	bne.w	800517c <_dtoa_r+0x6c4>
 8005012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005014:	429d      	cmp	r5, r3
 8005016:	d081      	beq.n	8004f1c <_dtoa_r+0x464>
 8005018:	4b30      	ldr	r3, [pc, #192]	; (80050dc <_dtoa_r+0x624>)
 800501a:	2200      	movs	r2, #0
 800501c:	4650      	mov	r0, sl
 800501e:	4659      	mov	r1, fp
 8005020:	f7fb faf2 	bl	8000608 <__aeabi_dmul>
 8005024:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <_dtoa_r+0x624>)
 8005026:	4682      	mov	sl, r0
 8005028:	468b      	mov	fp, r1
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	2200      	movs	r2, #0
 8005030:	f7fb faea 	bl	8000608 <__aeabi_dmul>
 8005034:	4680      	mov	r8, r0
 8005036:	4689      	mov	r9, r1
 8005038:	e7c6      	b.n	8004fc8 <_dtoa_r+0x510>
 800503a:	4650      	mov	r0, sl
 800503c:	4659      	mov	r1, fp
 800503e:	f7fb fae3 	bl	8000608 <__aeabi_dmul>
 8005042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005044:	9d01      	ldr	r5, [sp, #4]
 8005046:	930f      	str	r3, [sp, #60]	; 0x3c
 8005048:	4682      	mov	sl, r0
 800504a:	468b      	mov	fp, r1
 800504c:	4649      	mov	r1, r9
 800504e:	4640      	mov	r0, r8
 8005050:	f7fb fd8a 	bl	8000b68 <__aeabi_d2iz>
 8005054:	4606      	mov	r6, r0
 8005056:	f7fb fa6d 	bl	8000534 <__aeabi_i2d>
 800505a:	3630      	adds	r6, #48	; 0x30
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb f918 	bl	8000298 <__aeabi_dsub>
 8005068:	f805 6b01 	strb.w	r6, [r5], #1
 800506c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800506e:	429d      	cmp	r5, r3
 8005070:	4680      	mov	r8, r0
 8005072:	4689      	mov	r9, r1
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	d124      	bne.n	80050c4 <_dtoa_r+0x60c>
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <_dtoa_r+0x630>)
 800507c:	4650      	mov	r0, sl
 800507e:	4659      	mov	r1, fp
 8005080:	f7fb f90c 	bl	800029c <__adddf3>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4640      	mov	r0, r8
 800508a:	4649      	mov	r1, r9
 800508c:	f7fb fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 8005090:	2800      	cmp	r0, #0
 8005092:	d173      	bne.n	800517c <_dtoa_r+0x6c4>
 8005094:	4652      	mov	r2, sl
 8005096:	465b      	mov	r3, fp
 8005098:	4913      	ldr	r1, [pc, #76]	; (80050e8 <_dtoa_r+0x630>)
 800509a:	2000      	movs	r0, #0
 800509c:	f7fb f8fc 	bl	8000298 <__aeabi_dsub>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4640      	mov	r0, r8
 80050a6:	4649      	mov	r1, r9
 80050a8:	f7fb fd20 	bl	8000aec <__aeabi_dcmplt>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f43f af35 	beq.w	8004f1c <_dtoa_r+0x464>
 80050b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050b4:	1e6b      	subs	r3, r5, #1
 80050b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80050b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050bc:	2b30      	cmp	r3, #48	; 0x30
 80050be:	d0f8      	beq.n	80050b2 <_dtoa_r+0x5fa>
 80050c0:	9700      	str	r7, [sp, #0]
 80050c2:	e049      	b.n	8005158 <_dtoa_r+0x6a0>
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <_dtoa_r+0x624>)
 80050c6:	f7fb fa9f 	bl	8000608 <__aeabi_dmul>
 80050ca:	4680      	mov	r8, r0
 80050cc:	4689      	mov	r9, r1
 80050ce:	e7bd      	b.n	800504c <_dtoa_r+0x594>
 80050d0:	08007ce0 	.word	0x08007ce0
 80050d4:	08007cb8 	.word	0x08007cb8
 80050d8:	3ff00000 	.word	0x3ff00000
 80050dc:	40240000 	.word	0x40240000
 80050e0:	401c0000 	.word	0x401c0000
 80050e4:	40140000 	.word	0x40140000
 80050e8:	3fe00000 	.word	0x3fe00000
 80050ec:	9d01      	ldr	r5, [sp, #4]
 80050ee:	4656      	mov	r6, sl
 80050f0:	465f      	mov	r7, fp
 80050f2:	4642      	mov	r2, r8
 80050f4:	464b      	mov	r3, r9
 80050f6:	4630      	mov	r0, r6
 80050f8:	4639      	mov	r1, r7
 80050fa:	f7fb fbaf 	bl	800085c <__aeabi_ddiv>
 80050fe:	f7fb fd33 	bl	8000b68 <__aeabi_d2iz>
 8005102:	4682      	mov	sl, r0
 8005104:	f7fb fa16 	bl	8000534 <__aeabi_i2d>
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	f7fb fa7c 	bl	8000608 <__aeabi_dmul>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4630      	mov	r0, r6
 8005116:	4639      	mov	r1, r7
 8005118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800511c:	f7fb f8bc 	bl	8000298 <__aeabi_dsub>
 8005120:	f805 6b01 	strb.w	r6, [r5], #1
 8005124:	9e01      	ldr	r6, [sp, #4]
 8005126:	9f03      	ldr	r7, [sp, #12]
 8005128:	1bae      	subs	r6, r5, r6
 800512a:	42b7      	cmp	r7, r6
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	d135      	bne.n	800519e <_dtoa_r+0x6e6>
 8005132:	f7fb f8b3 	bl	800029c <__adddf3>
 8005136:	4642      	mov	r2, r8
 8005138:	464b      	mov	r3, r9
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	f7fb fcf3 	bl	8000b28 <__aeabi_dcmpgt>
 8005142:	b9d0      	cbnz	r0, 800517a <_dtoa_r+0x6c2>
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb fcc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005150:	b110      	cbz	r0, 8005158 <_dtoa_r+0x6a0>
 8005152:	f01a 0f01 	tst.w	sl, #1
 8005156:	d110      	bne.n	800517a <_dtoa_r+0x6c2>
 8005158:	4620      	mov	r0, r4
 800515a:	ee18 1a10 	vmov	r1, s16
 800515e:	f000 fae5 	bl	800572c <_Bfree>
 8005162:	2300      	movs	r3, #0
 8005164:	9800      	ldr	r0, [sp, #0]
 8005166:	702b      	strb	r3, [r5, #0]
 8005168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800516a:	3001      	adds	r0, #1
 800516c:	6018      	str	r0, [r3, #0]
 800516e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005170:	2b00      	cmp	r3, #0
 8005172:	f43f acf1 	beq.w	8004b58 <_dtoa_r+0xa0>
 8005176:	601d      	str	r5, [r3, #0]
 8005178:	e4ee      	b.n	8004b58 <_dtoa_r+0xa0>
 800517a:	9f00      	ldr	r7, [sp, #0]
 800517c:	462b      	mov	r3, r5
 800517e:	461d      	mov	r5, r3
 8005180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005184:	2a39      	cmp	r2, #57	; 0x39
 8005186:	d106      	bne.n	8005196 <_dtoa_r+0x6de>
 8005188:	9a01      	ldr	r2, [sp, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d1f7      	bne.n	800517e <_dtoa_r+0x6c6>
 800518e:	9901      	ldr	r1, [sp, #4]
 8005190:	2230      	movs	r2, #48	; 0x30
 8005192:	3701      	adds	r7, #1
 8005194:	700a      	strb	r2, [r1, #0]
 8005196:	781a      	ldrb	r2, [r3, #0]
 8005198:	3201      	adds	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e790      	b.n	80050c0 <_dtoa_r+0x608>
 800519e:	4ba6      	ldr	r3, [pc, #664]	; (8005438 <_dtoa_r+0x980>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	f7fb fa31 	bl	8000608 <__aeabi_dmul>
 80051a6:	2200      	movs	r2, #0
 80051a8:	2300      	movs	r3, #0
 80051aa:	4606      	mov	r6, r0
 80051ac:	460f      	mov	r7, r1
 80051ae:	f7fb fc93 	bl	8000ad8 <__aeabi_dcmpeq>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d09d      	beq.n	80050f2 <_dtoa_r+0x63a>
 80051b6:	e7cf      	b.n	8005158 <_dtoa_r+0x6a0>
 80051b8:	9a08      	ldr	r2, [sp, #32]
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	f000 80d7 	beq.w	800536e <_dtoa_r+0x8b6>
 80051c0:	9a06      	ldr	r2, [sp, #24]
 80051c2:	2a01      	cmp	r2, #1
 80051c4:	f300 80ba 	bgt.w	800533c <_dtoa_r+0x884>
 80051c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	f000 80b2 	beq.w	8005334 <_dtoa_r+0x87c>
 80051d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051d4:	9e07      	ldr	r6, [sp, #28]
 80051d6:	9d04      	ldr	r5, [sp, #16]
 80051d8:	9a04      	ldr	r2, [sp, #16]
 80051da:	441a      	add	r2, r3
 80051dc:	9204      	str	r2, [sp, #16]
 80051de:	9a05      	ldr	r2, [sp, #20]
 80051e0:	2101      	movs	r1, #1
 80051e2:	441a      	add	r2, r3
 80051e4:	4620      	mov	r0, r4
 80051e6:	9205      	str	r2, [sp, #20]
 80051e8:	f000 fb58 	bl	800589c <__i2b>
 80051ec:	4607      	mov	r7, r0
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	dd0c      	ble.n	800520c <_dtoa_r+0x754>
 80051f2:	9b05      	ldr	r3, [sp, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dd09      	ble.n	800520c <_dtoa_r+0x754>
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	9a04      	ldr	r2, [sp, #16]
 80051fc:	bfa8      	it	ge
 80051fe:	462b      	movge	r3, r5
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	9204      	str	r2, [sp, #16]
 8005204:	9a05      	ldr	r2, [sp, #20]
 8005206:	1aed      	subs	r5, r5, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	b31b      	cbz	r3, 8005258 <_dtoa_r+0x7a0>
 8005210:	9b08      	ldr	r3, [sp, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80af 	beq.w	8005376 <_dtoa_r+0x8be>
 8005218:	2e00      	cmp	r6, #0
 800521a:	dd13      	ble.n	8005244 <_dtoa_r+0x78c>
 800521c:	4639      	mov	r1, r7
 800521e:	4632      	mov	r2, r6
 8005220:	4620      	mov	r0, r4
 8005222:	f000 fbfb 	bl	8005a1c <__pow5mult>
 8005226:	ee18 2a10 	vmov	r2, s16
 800522a:	4601      	mov	r1, r0
 800522c:	4607      	mov	r7, r0
 800522e:	4620      	mov	r0, r4
 8005230:	f000 fb4a 	bl	80058c8 <__multiply>
 8005234:	ee18 1a10 	vmov	r1, s16
 8005238:	4680      	mov	r8, r0
 800523a:	4620      	mov	r0, r4
 800523c:	f000 fa76 	bl	800572c <_Bfree>
 8005240:	ee08 8a10 	vmov	s16, r8
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	1b9a      	subs	r2, r3, r6
 8005248:	d006      	beq.n	8005258 <_dtoa_r+0x7a0>
 800524a:	ee18 1a10 	vmov	r1, s16
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fbe4 	bl	8005a1c <__pow5mult>
 8005254:	ee08 0a10 	vmov	s16, r0
 8005258:	2101      	movs	r1, #1
 800525a:	4620      	mov	r0, r4
 800525c:	f000 fb1e 	bl	800589c <__i2b>
 8005260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	4606      	mov	r6, r0
 8005266:	f340 8088 	ble.w	800537a <_dtoa_r+0x8c2>
 800526a:	461a      	mov	r2, r3
 800526c:	4601      	mov	r1, r0
 800526e:	4620      	mov	r0, r4
 8005270:	f000 fbd4 	bl	8005a1c <__pow5mult>
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	2b01      	cmp	r3, #1
 8005278:	4606      	mov	r6, r0
 800527a:	f340 8081 	ble.w	8005380 <_dtoa_r+0x8c8>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	6933      	ldr	r3, [r6, #16]
 8005284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005288:	6918      	ldr	r0, [r3, #16]
 800528a:	f000 fab7 	bl	80057fc <__hi0bits>
 800528e:	f1c0 0020 	rsb	r0, r0, #32
 8005292:	9b05      	ldr	r3, [sp, #20]
 8005294:	4418      	add	r0, r3
 8005296:	f010 001f 	ands.w	r0, r0, #31
 800529a:	f000 8092 	beq.w	80053c2 <_dtoa_r+0x90a>
 800529e:	f1c0 0320 	rsb	r3, r0, #32
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	f340 808a 	ble.w	80053bc <_dtoa_r+0x904>
 80052a8:	f1c0 001c 	rsb	r0, r0, #28
 80052ac:	9b04      	ldr	r3, [sp, #16]
 80052ae:	4403      	add	r3, r0
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	9b05      	ldr	r3, [sp, #20]
 80052b4:	4403      	add	r3, r0
 80052b6:	4405      	add	r5, r0
 80052b8:	9305      	str	r3, [sp, #20]
 80052ba:	9b04      	ldr	r3, [sp, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dd07      	ble.n	80052d0 <_dtoa_r+0x818>
 80052c0:	ee18 1a10 	vmov	r1, s16
 80052c4:	461a      	mov	r2, r3
 80052c6:	4620      	mov	r0, r4
 80052c8:	f000 fc02 	bl	8005ad0 <__lshift>
 80052cc:	ee08 0a10 	vmov	s16, r0
 80052d0:	9b05      	ldr	r3, [sp, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	dd05      	ble.n	80052e2 <_dtoa_r+0x82a>
 80052d6:	4631      	mov	r1, r6
 80052d8:	461a      	mov	r2, r3
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 fbf8 	bl	8005ad0 <__lshift>
 80052e0:	4606      	mov	r6, r0
 80052e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d06e      	beq.n	80053c6 <_dtoa_r+0x90e>
 80052e8:	ee18 0a10 	vmov	r0, s16
 80052ec:	4631      	mov	r1, r6
 80052ee:	f000 fc5f 	bl	8005bb0 <__mcmp>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	da67      	bge.n	80053c6 <_dtoa_r+0x90e>
 80052f6:	9b00      	ldr	r3, [sp, #0]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	ee18 1a10 	vmov	r1, s16
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	220a      	movs	r2, #10
 8005302:	2300      	movs	r3, #0
 8005304:	4620      	mov	r0, r4
 8005306:	f000 fa33 	bl	8005770 <__multadd>
 800530a:	9b08      	ldr	r3, [sp, #32]
 800530c:	ee08 0a10 	vmov	s16, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 81b1 	beq.w	8005678 <_dtoa_r+0xbc0>
 8005316:	2300      	movs	r3, #0
 8005318:	4639      	mov	r1, r7
 800531a:	220a      	movs	r2, #10
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fa27 	bl	8005770 <__multadd>
 8005322:	9b02      	ldr	r3, [sp, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	4607      	mov	r7, r0
 8005328:	f300 808e 	bgt.w	8005448 <_dtoa_r+0x990>
 800532c:	9b06      	ldr	r3, [sp, #24]
 800532e:	2b02      	cmp	r3, #2
 8005330:	dc51      	bgt.n	80053d6 <_dtoa_r+0x91e>
 8005332:	e089      	b.n	8005448 <_dtoa_r+0x990>
 8005334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800533a:	e74b      	b.n	80051d4 <_dtoa_r+0x71c>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	1e5e      	subs	r6, r3, #1
 8005340:	9b07      	ldr	r3, [sp, #28]
 8005342:	42b3      	cmp	r3, r6
 8005344:	bfbf      	itttt	lt
 8005346:	9b07      	ldrlt	r3, [sp, #28]
 8005348:	9607      	strlt	r6, [sp, #28]
 800534a:	1af2      	sublt	r2, r6, r3
 800534c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800534e:	bfb6      	itet	lt
 8005350:	189b      	addlt	r3, r3, r2
 8005352:	1b9e      	subge	r6, r3, r6
 8005354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	bfb8      	it	lt
 800535a:	2600      	movlt	r6, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfb7      	itett	lt
 8005360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005368:	1a9d      	sublt	r5, r3, r2
 800536a:	2300      	movlt	r3, #0
 800536c:	e734      	b.n	80051d8 <_dtoa_r+0x720>
 800536e:	9e07      	ldr	r6, [sp, #28]
 8005370:	9d04      	ldr	r5, [sp, #16]
 8005372:	9f08      	ldr	r7, [sp, #32]
 8005374:	e73b      	b.n	80051ee <_dtoa_r+0x736>
 8005376:	9a07      	ldr	r2, [sp, #28]
 8005378:	e767      	b.n	800524a <_dtoa_r+0x792>
 800537a:	9b06      	ldr	r3, [sp, #24]
 800537c:	2b01      	cmp	r3, #1
 800537e:	dc18      	bgt.n	80053b2 <_dtoa_r+0x8fa>
 8005380:	f1ba 0f00 	cmp.w	sl, #0
 8005384:	d115      	bne.n	80053b2 <_dtoa_r+0x8fa>
 8005386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800538a:	b993      	cbnz	r3, 80053b2 <_dtoa_r+0x8fa>
 800538c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	051b      	lsls	r3, r3, #20
 8005394:	b183      	cbz	r3, 80053b8 <_dtoa_r+0x900>
 8005396:	9b04      	ldr	r3, [sp, #16]
 8005398:	3301      	adds	r3, #1
 800539a:	9304      	str	r3, [sp, #16]
 800539c:	9b05      	ldr	r3, [sp, #20]
 800539e:	3301      	adds	r3, #1
 80053a0:	9305      	str	r3, [sp, #20]
 80053a2:	f04f 0801 	mov.w	r8, #1
 80053a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f af6a 	bne.w	8005282 <_dtoa_r+0x7ca>
 80053ae:	2001      	movs	r0, #1
 80053b0:	e76f      	b.n	8005292 <_dtoa_r+0x7da>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	e7f6      	b.n	80053a6 <_dtoa_r+0x8ee>
 80053b8:	4698      	mov	r8, r3
 80053ba:	e7f4      	b.n	80053a6 <_dtoa_r+0x8ee>
 80053bc:	f43f af7d 	beq.w	80052ba <_dtoa_r+0x802>
 80053c0:	4618      	mov	r0, r3
 80053c2:	301c      	adds	r0, #28
 80053c4:	e772      	b.n	80052ac <_dtoa_r+0x7f4>
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dc37      	bgt.n	800543c <_dtoa_r+0x984>
 80053cc:	9b06      	ldr	r3, [sp, #24]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	dd34      	ble.n	800543c <_dtoa_r+0x984>
 80053d2:	9b03      	ldr	r3, [sp, #12]
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	b96b      	cbnz	r3, 80053f6 <_dtoa_r+0x93e>
 80053da:	4631      	mov	r1, r6
 80053dc:	2205      	movs	r2, #5
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 f9c6 	bl	8005770 <__multadd>
 80053e4:	4601      	mov	r1, r0
 80053e6:	4606      	mov	r6, r0
 80053e8:	ee18 0a10 	vmov	r0, s16
 80053ec:	f000 fbe0 	bl	8005bb0 <__mcmp>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f73f adbb 	bgt.w	8004f6c <_dtoa_r+0x4b4>
 80053f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f8:	9d01      	ldr	r5, [sp, #4]
 80053fa:	43db      	mvns	r3, r3
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	f04f 0800 	mov.w	r8, #0
 8005402:	4631      	mov	r1, r6
 8005404:	4620      	mov	r0, r4
 8005406:	f000 f991 	bl	800572c <_Bfree>
 800540a:	2f00      	cmp	r7, #0
 800540c:	f43f aea4 	beq.w	8005158 <_dtoa_r+0x6a0>
 8005410:	f1b8 0f00 	cmp.w	r8, #0
 8005414:	d005      	beq.n	8005422 <_dtoa_r+0x96a>
 8005416:	45b8      	cmp	r8, r7
 8005418:	d003      	beq.n	8005422 <_dtoa_r+0x96a>
 800541a:	4641      	mov	r1, r8
 800541c:	4620      	mov	r0, r4
 800541e:	f000 f985 	bl	800572c <_Bfree>
 8005422:	4639      	mov	r1, r7
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f981 	bl	800572c <_Bfree>
 800542a:	e695      	b.n	8005158 <_dtoa_r+0x6a0>
 800542c:	2600      	movs	r6, #0
 800542e:	4637      	mov	r7, r6
 8005430:	e7e1      	b.n	80053f6 <_dtoa_r+0x93e>
 8005432:	9700      	str	r7, [sp, #0]
 8005434:	4637      	mov	r7, r6
 8005436:	e599      	b.n	8004f6c <_dtoa_r+0x4b4>
 8005438:	40240000 	.word	0x40240000
 800543c:	9b08      	ldr	r3, [sp, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80ca 	beq.w	80055d8 <_dtoa_r+0xb20>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	9302      	str	r3, [sp, #8]
 8005448:	2d00      	cmp	r5, #0
 800544a:	dd05      	ble.n	8005458 <_dtoa_r+0x9a0>
 800544c:	4639      	mov	r1, r7
 800544e:	462a      	mov	r2, r5
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fb3d 	bl	8005ad0 <__lshift>
 8005456:	4607      	mov	r7, r0
 8005458:	f1b8 0f00 	cmp.w	r8, #0
 800545c:	d05b      	beq.n	8005516 <_dtoa_r+0xa5e>
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4620      	mov	r0, r4
 8005462:	f000 f923 	bl	80056ac <_Balloc>
 8005466:	4605      	mov	r5, r0
 8005468:	b928      	cbnz	r0, 8005476 <_dtoa_r+0x9be>
 800546a:	4b87      	ldr	r3, [pc, #540]	; (8005688 <_dtoa_r+0xbd0>)
 800546c:	4602      	mov	r2, r0
 800546e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005472:	f7ff bb3b 	b.w	8004aec <_dtoa_r+0x34>
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	3202      	adds	r2, #2
 800547a:	0092      	lsls	r2, r2, #2
 800547c:	f107 010c 	add.w	r1, r7, #12
 8005480:	300c      	adds	r0, #12
 8005482:	f7fe fdd3 	bl	800402c <memcpy>
 8005486:	2201      	movs	r2, #1
 8005488:	4629      	mov	r1, r5
 800548a:	4620      	mov	r0, r4
 800548c:	f000 fb20 	bl	8005ad0 <__lshift>
 8005490:	9b01      	ldr	r3, [sp, #4]
 8005492:	f103 0901 	add.w	r9, r3, #1
 8005496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800549a:	4413      	add	r3, r2
 800549c:	9305      	str	r3, [sp, #20]
 800549e:	f00a 0301 	and.w	r3, sl, #1
 80054a2:	46b8      	mov	r8, r7
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	4607      	mov	r7, r0
 80054a8:	4631      	mov	r1, r6
 80054aa:	ee18 0a10 	vmov	r0, s16
 80054ae:	f7ff fa77 	bl	80049a0 <quorem>
 80054b2:	4641      	mov	r1, r8
 80054b4:	9002      	str	r0, [sp, #8]
 80054b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80054ba:	ee18 0a10 	vmov	r0, s16
 80054be:	f000 fb77 	bl	8005bb0 <__mcmp>
 80054c2:	463a      	mov	r2, r7
 80054c4:	9003      	str	r0, [sp, #12]
 80054c6:	4631      	mov	r1, r6
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 fb8d 	bl	8005be8 <__mdiff>
 80054ce:	68c2      	ldr	r2, [r0, #12]
 80054d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80054d4:	4605      	mov	r5, r0
 80054d6:	bb02      	cbnz	r2, 800551a <_dtoa_r+0xa62>
 80054d8:	4601      	mov	r1, r0
 80054da:	ee18 0a10 	vmov	r0, s16
 80054de:	f000 fb67 	bl	8005bb0 <__mcmp>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4629      	mov	r1, r5
 80054e6:	4620      	mov	r0, r4
 80054e8:	9207      	str	r2, [sp, #28]
 80054ea:	f000 f91f 	bl	800572c <_Bfree>
 80054ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80054f2:	ea43 0102 	orr.w	r1, r3, r2
 80054f6:	9b04      	ldr	r3, [sp, #16]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	464d      	mov	r5, r9
 80054fc:	d10f      	bne.n	800551e <_dtoa_r+0xa66>
 80054fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005502:	d02a      	beq.n	800555a <_dtoa_r+0xaa2>
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	dd02      	ble.n	8005510 <_dtoa_r+0xa58>
 800550a:	9b02      	ldr	r3, [sp, #8]
 800550c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005510:	f88b a000 	strb.w	sl, [fp]
 8005514:	e775      	b.n	8005402 <_dtoa_r+0x94a>
 8005516:	4638      	mov	r0, r7
 8005518:	e7ba      	b.n	8005490 <_dtoa_r+0x9d8>
 800551a:	2201      	movs	r2, #1
 800551c:	e7e2      	b.n	80054e4 <_dtoa_r+0xa2c>
 800551e:	9b03      	ldr	r3, [sp, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db04      	blt.n	800552e <_dtoa_r+0xa76>
 8005524:	9906      	ldr	r1, [sp, #24]
 8005526:	430b      	orrs	r3, r1
 8005528:	9904      	ldr	r1, [sp, #16]
 800552a:	430b      	orrs	r3, r1
 800552c:	d122      	bne.n	8005574 <_dtoa_r+0xabc>
 800552e:	2a00      	cmp	r2, #0
 8005530:	ddee      	ble.n	8005510 <_dtoa_r+0xa58>
 8005532:	ee18 1a10 	vmov	r1, s16
 8005536:	2201      	movs	r2, #1
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fac9 	bl	8005ad0 <__lshift>
 800553e:	4631      	mov	r1, r6
 8005540:	ee08 0a10 	vmov	s16, r0
 8005544:	f000 fb34 	bl	8005bb0 <__mcmp>
 8005548:	2800      	cmp	r0, #0
 800554a:	dc03      	bgt.n	8005554 <_dtoa_r+0xa9c>
 800554c:	d1e0      	bne.n	8005510 <_dtoa_r+0xa58>
 800554e:	f01a 0f01 	tst.w	sl, #1
 8005552:	d0dd      	beq.n	8005510 <_dtoa_r+0xa58>
 8005554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005558:	d1d7      	bne.n	800550a <_dtoa_r+0xa52>
 800555a:	2339      	movs	r3, #57	; 0x39
 800555c:	f88b 3000 	strb.w	r3, [fp]
 8005560:	462b      	mov	r3, r5
 8005562:	461d      	mov	r5, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800556a:	2a39      	cmp	r2, #57	; 0x39
 800556c:	d071      	beq.n	8005652 <_dtoa_r+0xb9a>
 800556e:	3201      	adds	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e746      	b.n	8005402 <_dtoa_r+0x94a>
 8005574:	2a00      	cmp	r2, #0
 8005576:	dd07      	ble.n	8005588 <_dtoa_r+0xad0>
 8005578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800557c:	d0ed      	beq.n	800555a <_dtoa_r+0xaa2>
 800557e:	f10a 0301 	add.w	r3, sl, #1
 8005582:	f88b 3000 	strb.w	r3, [fp]
 8005586:	e73c      	b.n	8005402 <_dtoa_r+0x94a>
 8005588:	9b05      	ldr	r3, [sp, #20]
 800558a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800558e:	4599      	cmp	r9, r3
 8005590:	d047      	beq.n	8005622 <_dtoa_r+0xb6a>
 8005592:	ee18 1a10 	vmov	r1, s16
 8005596:	2300      	movs	r3, #0
 8005598:	220a      	movs	r2, #10
 800559a:	4620      	mov	r0, r4
 800559c:	f000 f8e8 	bl	8005770 <__multadd>
 80055a0:	45b8      	cmp	r8, r7
 80055a2:	ee08 0a10 	vmov	s16, r0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f04f 020a 	mov.w	r2, #10
 80055ae:	4641      	mov	r1, r8
 80055b0:	4620      	mov	r0, r4
 80055b2:	d106      	bne.n	80055c2 <_dtoa_r+0xb0a>
 80055b4:	f000 f8dc 	bl	8005770 <__multadd>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4607      	mov	r7, r0
 80055bc:	f109 0901 	add.w	r9, r9, #1
 80055c0:	e772      	b.n	80054a8 <_dtoa_r+0x9f0>
 80055c2:	f000 f8d5 	bl	8005770 <__multadd>
 80055c6:	4639      	mov	r1, r7
 80055c8:	4680      	mov	r8, r0
 80055ca:	2300      	movs	r3, #0
 80055cc:	220a      	movs	r2, #10
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 f8ce 	bl	8005770 <__multadd>
 80055d4:	4607      	mov	r7, r0
 80055d6:	e7f1      	b.n	80055bc <_dtoa_r+0xb04>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	9d01      	ldr	r5, [sp, #4]
 80055de:	ee18 0a10 	vmov	r0, s16
 80055e2:	4631      	mov	r1, r6
 80055e4:	f7ff f9dc 	bl	80049a0 <quorem>
 80055e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	f805 ab01 	strb.w	sl, [r5], #1
 80055f2:	1aea      	subs	r2, r5, r3
 80055f4:	9b02      	ldr	r3, [sp, #8]
 80055f6:	4293      	cmp	r3, r2
 80055f8:	dd09      	ble.n	800560e <_dtoa_r+0xb56>
 80055fa:	ee18 1a10 	vmov	r1, s16
 80055fe:	2300      	movs	r3, #0
 8005600:	220a      	movs	r2, #10
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f8b4 	bl	8005770 <__multadd>
 8005608:	ee08 0a10 	vmov	s16, r0
 800560c:	e7e7      	b.n	80055de <_dtoa_r+0xb26>
 800560e:	9b02      	ldr	r3, [sp, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	bfc8      	it	gt
 8005614:	461d      	movgt	r5, r3
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	bfd8      	it	le
 800561a:	2501      	movle	r5, #1
 800561c:	441d      	add	r5, r3
 800561e:	f04f 0800 	mov.w	r8, #0
 8005622:	ee18 1a10 	vmov	r1, s16
 8005626:	2201      	movs	r2, #1
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fa51 	bl	8005ad0 <__lshift>
 800562e:	4631      	mov	r1, r6
 8005630:	ee08 0a10 	vmov	s16, r0
 8005634:	f000 fabc 	bl	8005bb0 <__mcmp>
 8005638:	2800      	cmp	r0, #0
 800563a:	dc91      	bgt.n	8005560 <_dtoa_r+0xaa8>
 800563c:	d102      	bne.n	8005644 <_dtoa_r+0xb8c>
 800563e:	f01a 0f01 	tst.w	sl, #1
 8005642:	d18d      	bne.n	8005560 <_dtoa_r+0xaa8>
 8005644:	462b      	mov	r3, r5
 8005646:	461d      	mov	r5, r3
 8005648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800564c:	2a30      	cmp	r2, #48	; 0x30
 800564e:	d0fa      	beq.n	8005646 <_dtoa_r+0xb8e>
 8005650:	e6d7      	b.n	8005402 <_dtoa_r+0x94a>
 8005652:	9a01      	ldr	r2, [sp, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d184      	bne.n	8005562 <_dtoa_r+0xaaa>
 8005658:	9b00      	ldr	r3, [sp, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2331      	movs	r3, #49	; 0x31
 8005660:	7013      	strb	r3, [r2, #0]
 8005662:	e6ce      	b.n	8005402 <_dtoa_r+0x94a>
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <_dtoa_r+0xbd4>)
 8005666:	f7ff ba95 	b.w	8004b94 <_dtoa_r+0xdc>
 800566a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f aa6e 	bne.w	8004b4e <_dtoa_r+0x96>
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <_dtoa_r+0xbd8>)
 8005674:	f7ff ba8e 	b.w	8004b94 <_dtoa_r+0xdc>
 8005678:	9b02      	ldr	r3, [sp, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	dcae      	bgt.n	80055dc <_dtoa_r+0xb24>
 800567e:	9b06      	ldr	r3, [sp, #24]
 8005680:	2b02      	cmp	r3, #2
 8005682:	f73f aea8 	bgt.w	80053d6 <_dtoa_r+0x91e>
 8005686:	e7a9      	b.n	80055dc <_dtoa_r+0xb24>
 8005688:	08007c47 	.word	0x08007c47
 800568c:	08007ba4 	.word	0x08007ba4
 8005690:	08007bc8 	.word	0x08007bc8

08005694 <_localeconv_r>:
 8005694:	4800      	ldr	r0, [pc, #0]	; (8005698 <_localeconv_r+0x4>)
 8005696:	4770      	bx	lr
 8005698:	20000168 	.word	0x20000168

0800569c <malloc>:
 800569c:	4b02      	ldr	r3, [pc, #8]	; (80056a8 <malloc+0xc>)
 800569e:	4601      	mov	r1, r0
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	f000 bc09 	b.w	8005eb8 <_malloc_r>
 80056a6:	bf00      	nop
 80056a8:	20000014 	.word	0x20000014

080056ac <_Balloc>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056b0:	4604      	mov	r4, r0
 80056b2:	460d      	mov	r5, r1
 80056b4:	b976      	cbnz	r6, 80056d4 <_Balloc+0x28>
 80056b6:	2010      	movs	r0, #16
 80056b8:	f7ff fff0 	bl	800569c <malloc>
 80056bc:	4602      	mov	r2, r0
 80056be:	6260      	str	r0, [r4, #36]	; 0x24
 80056c0:	b920      	cbnz	r0, 80056cc <_Balloc+0x20>
 80056c2:	4b18      	ldr	r3, [pc, #96]	; (8005724 <_Balloc+0x78>)
 80056c4:	4818      	ldr	r0, [pc, #96]	; (8005728 <_Balloc+0x7c>)
 80056c6:	2166      	movs	r1, #102	; 0x66
 80056c8:	f000 fdd6 	bl	8006278 <__assert_func>
 80056cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056d0:	6006      	str	r6, [r0, #0]
 80056d2:	60c6      	str	r6, [r0, #12]
 80056d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056d6:	68f3      	ldr	r3, [r6, #12]
 80056d8:	b183      	cbz	r3, 80056fc <_Balloc+0x50>
 80056da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056e2:	b9b8      	cbnz	r0, 8005714 <_Balloc+0x68>
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f605 	lsl.w	r6, r1, r5
 80056ea:	1d72      	adds	r2, r6, #5
 80056ec:	0092      	lsls	r2, r2, #2
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 fb60 	bl	8005db4 <_calloc_r>
 80056f4:	b160      	cbz	r0, 8005710 <_Balloc+0x64>
 80056f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056fa:	e00e      	b.n	800571a <_Balloc+0x6e>
 80056fc:	2221      	movs	r2, #33	; 0x21
 80056fe:	2104      	movs	r1, #4
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fb57 	bl	8005db4 <_calloc_r>
 8005706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005708:	60f0      	str	r0, [r6, #12]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e4      	bne.n	80056da <_Balloc+0x2e>
 8005710:	2000      	movs	r0, #0
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	6802      	ldr	r2, [r0, #0]
 8005716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800571a:	2300      	movs	r3, #0
 800571c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005720:	e7f7      	b.n	8005712 <_Balloc+0x66>
 8005722:	bf00      	nop
 8005724:	08007bd5 	.word	0x08007bd5
 8005728:	08007c58 	.word	0x08007c58

0800572c <_Bfree>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005730:	4605      	mov	r5, r0
 8005732:	460c      	mov	r4, r1
 8005734:	b976      	cbnz	r6, 8005754 <_Bfree+0x28>
 8005736:	2010      	movs	r0, #16
 8005738:	f7ff ffb0 	bl	800569c <malloc>
 800573c:	4602      	mov	r2, r0
 800573e:	6268      	str	r0, [r5, #36]	; 0x24
 8005740:	b920      	cbnz	r0, 800574c <_Bfree+0x20>
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <_Bfree+0x3c>)
 8005744:	4809      	ldr	r0, [pc, #36]	; (800576c <_Bfree+0x40>)
 8005746:	218a      	movs	r1, #138	; 0x8a
 8005748:	f000 fd96 	bl	8006278 <__assert_func>
 800574c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005750:	6006      	str	r6, [r0, #0]
 8005752:	60c6      	str	r6, [r0, #12]
 8005754:	b13c      	cbz	r4, 8005766 <_Bfree+0x3a>
 8005756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005758:	6862      	ldr	r2, [r4, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005760:	6021      	str	r1, [r4, #0]
 8005762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	08007bd5 	.word	0x08007bd5
 800576c:	08007c58 	.word	0x08007c58

08005770 <__multadd>:
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	690d      	ldr	r5, [r1, #16]
 8005776:	4607      	mov	r7, r0
 8005778:	460c      	mov	r4, r1
 800577a:	461e      	mov	r6, r3
 800577c:	f101 0c14 	add.w	ip, r1, #20
 8005780:	2000      	movs	r0, #0
 8005782:	f8dc 3000 	ldr.w	r3, [ip]
 8005786:	b299      	uxth	r1, r3
 8005788:	fb02 6101 	mla	r1, r2, r1, r6
 800578c:	0c1e      	lsrs	r6, r3, #16
 800578e:	0c0b      	lsrs	r3, r1, #16
 8005790:	fb02 3306 	mla	r3, r2, r6, r3
 8005794:	b289      	uxth	r1, r1
 8005796:	3001      	adds	r0, #1
 8005798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800579c:	4285      	cmp	r5, r0
 800579e:	f84c 1b04 	str.w	r1, [ip], #4
 80057a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057a6:	dcec      	bgt.n	8005782 <__multadd+0x12>
 80057a8:	b30e      	cbz	r6, 80057ee <__multadd+0x7e>
 80057aa:	68a3      	ldr	r3, [r4, #8]
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dc19      	bgt.n	80057e4 <__multadd+0x74>
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	4638      	mov	r0, r7
 80057b4:	3101      	adds	r1, #1
 80057b6:	f7ff ff79 	bl	80056ac <_Balloc>
 80057ba:	4680      	mov	r8, r0
 80057bc:	b928      	cbnz	r0, 80057ca <__multadd+0x5a>
 80057be:	4602      	mov	r2, r0
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <__multadd+0x84>)
 80057c2:	480d      	ldr	r0, [pc, #52]	; (80057f8 <__multadd+0x88>)
 80057c4:	21b5      	movs	r1, #181	; 0xb5
 80057c6:	f000 fd57 	bl	8006278 <__assert_func>
 80057ca:	6922      	ldr	r2, [r4, #16]
 80057cc:	3202      	adds	r2, #2
 80057ce:	f104 010c 	add.w	r1, r4, #12
 80057d2:	0092      	lsls	r2, r2, #2
 80057d4:	300c      	adds	r0, #12
 80057d6:	f7fe fc29 	bl	800402c <memcpy>
 80057da:	4621      	mov	r1, r4
 80057dc:	4638      	mov	r0, r7
 80057de:	f7ff ffa5 	bl	800572c <_Bfree>
 80057e2:	4644      	mov	r4, r8
 80057e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057e8:	3501      	adds	r5, #1
 80057ea:	615e      	str	r6, [r3, #20]
 80057ec:	6125      	str	r5, [r4, #16]
 80057ee:	4620      	mov	r0, r4
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f4:	08007c47 	.word	0x08007c47
 80057f8:	08007c58 	.word	0x08007c58

080057fc <__hi0bits>:
 80057fc:	0c03      	lsrs	r3, r0, #16
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	b9d3      	cbnz	r3, 8005838 <__hi0bits+0x3c>
 8005802:	0400      	lsls	r0, r0, #16
 8005804:	2310      	movs	r3, #16
 8005806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800580a:	bf04      	itt	eq
 800580c:	0200      	lsleq	r0, r0, #8
 800580e:	3308      	addeq	r3, #8
 8005810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005814:	bf04      	itt	eq
 8005816:	0100      	lsleq	r0, r0, #4
 8005818:	3304      	addeq	r3, #4
 800581a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800581e:	bf04      	itt	eq
 8005820:	0080      	lsleq	r0, r0, #2
 8005822:	3302      	addeq	r3, #2
 8005824:	2800      	cmp	r0, #0
 8005826:	db05      	blt.n	8005834 <__hi0bits+0x38>
 8005828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800582c:	f103 0301 	add.w	r3, r3, #1
 8005830:	bf08      	it	eq
 8005832:	2320      	moveq	r3, #32
 8005834:	4618      	mov	r0, r3
 8005836:	4770      	bx	lr
 8005838:	2300      	movs	r3, #0
 800583a:	e7e4      	b.n	8005806 <__hi0bits+0xa>

0800583c <__lo0bits>:
 800583c:	6803      	ldr	r3, [r0, #0]
 800583e:	f013 0207 	ands.w	r2, r3, #7
 8005842:	4601      	mov	r1, r0
 8005844:	d00b      	beq.n	800585e <__lo0bits+0x22>
 8005846:	07da      	lsls	r2, r3, #31
 8005848:	d423      	bmi.n	8005892 <__lo0bits+0x56>
 800584a:	0798      	lsls	r0, r3, #30
 800584c:	bf49      	itett	mi
 800584e:	085b      	lsrmi	r3, r3, #1
 8005850:	089b      	lsrpl	r3, r3, #2
 8005852:	2001      	movmi	r0, #1
 8005854:	600b      	strmi	r3, [r1, #0]
 8005856:	bf5c      	itt	pl
 8005858:	600b      	strpl	r3, [r1, #0]
 800585a:	2002      	movpl	r0, #2
 800585c:	4770      	bx	lr
 800585e:	b298      	uxth	r0, r3
 8005860:	b9a8      	cbnz	r0, 800588e <__lo0bits+0x52>
 8005862:	0c1b      	lsrs	r3, r3, #16
 8005864:	2010      	movs	r0, #16
 8005866:	b2da      	uxtb	r2, r3
 8005868:	b90a      	cbnz	r2, 800586e <__lo0bits+0x32>
 800586a:	3008      	adds	r0, #8
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	071a      	lsls	r2, r3, #28
 8005870:	bf04      	itt	eq
 8005872:	091b      	lsreq	r3, r3, #4
 8005874:	3004      	addeq	r0, #4
 8005876:	079a      	lsls	r2, r3, #30
 8005878:	bf04      	itt	eq
 800587a:	089b      	lsreq	r3, r3, #2
 800587c:	3002      	addeq	r0, #2
 800587e:	07da      	lsls	r2, r3, #31
 8005880:	d403      	bmi.n	800588a <__lo0bits+0x4e>
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	f100 0001 	add.w	r0, r0, #1
 8005888:	d005      	beq.n	8005896 <__lo0bits+0x5a>
 800588a:	600b      	str	r3, [r1, #0]
 800588c:	4770      	bx	lr
 800588e:	4610      	mov	r0, r2
 8005890:	e7e9      	b.n	8005866 <__lo0bits+0x2a>
 8005892:	2000      	movs	r0, #0
 8005894:	4770      	bx	lr
 8005896:	2020      	movs	r0, #32
 8005898:	4770      	bx	lr
	...

0800589c <__i2b>:
 800589c:	b510      	push	{r4, lr}
 800589e:	460c      	mov	r4, r1
 80058a0:	2101      	movs	r1, #1
 80058a2:	f7ff ff03 	bl	80056ac <_Balloc>
 80058a6:	4602      	mov	r2, r0
 80058a8:	b928      	cbnz	r0, 80058b6 <__i2b+0x1a>
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <__i2b+0x24>)
 80058ac:	4805      	ldr	r0, [pc, #20]	; (80058c4 <__i2b+0x28>)
 80058ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058b2:	f000 fce1 	bl	8006278 <__assert_func>
 80058b6:	2301      	movs	r3, #1
 80058b8:	6144      	str	r4, [r0, #20]
 80058ba:	6103      	str	r3, [r0, #16]
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	bf00      	nop
 80058c0:	08007c47 	.word	0x08007c47
 80058c4:	08007c58 	.word	0x08007c58

080058c8 <__multiply>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	4691      	mov	r9, r2
 80058ce:	690a      	ldr	r2, [r1, #16]
 80058d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	bfb8      	it	lt
 80058d8:	460b      	movlt	r3, r1
 80058da:	460c      	mov	r4, r1
 80058dc:	bfbc      	itt	lt
 80058de:	464c      	movlt	r4, r9
 80058e0:	4699      	movlt	r9, r3
 80058e2:	6927      	ldr	r7, [r4, #16]
 80058e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058e8:	68a3      	ldr	r3, [r4, #8]
 80058ea:	6861      	ldr	r1, [r4, #4]
 80058ec:	eb07 060a 	add.w	r6, r7, sl
 80058f0:	42b3      	cmp	r3, r6
 80058f2:	b085      	sub	sp, #20
 80058f4:	bfb8      	it	lt
 80058f6:	3101      	addlt	r1, #1
 80058f8:	f7ff fed8 	bl	80056ac <_Balloc>
 80058fc:	b930      	cbnz	r0, 800590c <__multiply+0x44>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b44      	ldr	r3, [pc, #272]	; (8005a14 <__multiply+0x14c>)
 8005902:	4845      	ldr	r0, [pc, #276]	; (8005a18 <__multiply+0x150>)
 8005904:	f240 115d 	movw	r1, #349	; 0x15d
 8005908:	f000 fcb6 	bl	8006278 <__assert_func>
 800590c:	f100 0514 	add.w	r5, r0, #20
 8005910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005914:	462b      	mov	r3, r5
 8005916:	2200      	movs	r2, #0
 8005918:	4543      	cmp	r3, r8
 800591a:	d321      	bcc.n	8005960 <__multiply+0x98>
 800591c:	f104 0314 	add.w	r3, r4, #20
 8005920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005924:	f109 0314 	add.w	r3, r9, #20
 8005928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800592c:	9202      	str	r2, [sp, #8]
 800592e:	1b3a      	subs	r2, r7, r4
 8005930:	3a15      	subs	r2, #21
 8005932:	f022 0203 	bic.w	r2, r2, #3
 8005936:	3204      	adds	r2, #4
 8005938:	f104 0115 	add.w	r1, r4, #21
 800593c:	428f      	cmp	r7, r1
 800593e:	bf38      	it	cc
 8005940:	2204      	movcc	r2, #4
 8005942:	9201      	str	r2, [sp, #4]
 8005944:	9a02      	ldr	r2, [sp, #8]
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	429a      	cmp	r2, r3
 800594a:	d80c      	bhi.n	8005966 <__multiply+0x9e>
 800594c:	2e00      	cmp	r6, #0
 800594e:	dd03      	ble.n	8005958 <__multiply+0x90>
 8005950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05a      	beq.n	8005a0e <__multiply+0x146>
 8005958:	6106      	str	r6, [r0, #16]
 800595a:	b005      	add	sp, #20
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	f843 2b04 	str.w	r2, [r3], #4
 8005964:	e7d8      	b.n	8005918 <__multiply+0x50>
 8005966:	f8b3 a000 	ldrh.w	sl, [r3]
 800596a:	f1ba 0f00 	cmp.w	sl, #0
 800596e:	d024      	beq.n	80059ba <__multiply+0xf2>
 8005970:	f104 0e14 	add.w	lr, r4, #20
 8005974:	46a9      	mov	r9, r5
 8005976:	f04f 0c00 	mov.w	ip, #0
 800597a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800597e:	f8d9 1000 	ldr.w	r1, [r9]
 8005982:	fa1f fb82 	uxth.w	fp, r2
 8005986:	b289      	uxth	r1, r1
 8005988:	fb0a 110b 	mla	r1, sl, fp, r1
 800598c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005990:	f8d9 2000 	ldr.w	r2, [r9]
 8005994:	4461      	add	r1, ip
 8005996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800599a:	fb0a c20b 	mla	r2, sl, fp, ip
 800599e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059a2:	b289      	uxth	r1, r1
 80059a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059a8:	4577      	cmp	r7, lr
 80059aa:	f849 1b04 	str.w	r1, [r9], #4
 80059ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059b2:	d8e2      	bhi.n	800597a <__multiply+0xb2>
 80059b4:	9a01      	ldr	r2, [sp, #4]
 80059b6:	f845 c002 	str.w	ip, [r5, r2]
 80059ba:	9a03      	ldr	r2, [sp, #12]
 80059bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059c0:	3304      	adds	r3, #4
 80059c2:	f1b9 0f00 	cmp.w	r9, #0
 80059c6:	d020      	beq.n	8005a0a <__multiply+0x142>
 80059c8:	6829      	ldr	r1, [r5, #0]
 80059ca:	f104 0c14 	add.w	ip, r4, #20
 80059ce:	46ae      	mov	lr, r5
 80059d0:	f04f 0a00 	mov.w	sl, #0
 80059d4:	f8bc b000 	ldrh.w	fp, [ip]
 80059d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059dc:	fb09 220b 	mla	r2, r9, fp, r2
 80059e0:	4492      	add	sl, r2
 80059e2:	b289      	uxth	r1, r1
 80059e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80059e8:	f84e 1b04 	str.w	r1, [lr], #4
 80059ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059f0:	f8be 1000 	ldrh.w	r1, [lr]
 80059f4:	0c12      	lsrs	r2, r2, #16
 80059f6:	fb09 1102 	mla	r1, r9, r2, r1
 80059fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80059fe:	4567      	cmp	r7, ip
 8005a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a04:	d8e6      	bhi.n	80059d4 <__multiply+0x10c>
 8005a06:	9a01      	ldr	r2, [sp, #4]
 8005a08:	50a9      	str	r1, [r5, r2]
 8005a0a:	3504      	adds	r5, #4
 8005a0c:	e79a      	b.n	8005944 <__multiply+0x7c>
 8005a0e:	3e01      	subs	r6, #1
 8005a10:	e79c      	b.n	800594c <__multiply+0x84>
 8005a12:	bf00      	nop
 8005a14:	08007c47 	.word	0x08007c47
 8005a18:	08007c58 	.word	0x08007c58

08005a1c <__pow5mult>:
 8005a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a20:	4615      	mov	r5, r2
 8005a22:	f012 0203 	ands.w	r2, r2, #3
 8005a26:	4606      	mov	r6, r0
 8005a28:	460f      	mov	r7, r1
 8005a2a:	d007      	beq.n	8005a3c <__pow5mult+0x20>
 8005a2c:	4c25      	ldr	r4, [pc, #148]	; (8005ac4 <__pow5mult+0xa8>)
 8005a2e:	3a01      	subs	r2, #1
 8005a30:	2300      	movs	r3, #0
 8005a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a36:	f7ff fe9b 	bl	8005770 <__multadd>
 8005a3a:	4607      	mov	r7, r0
 8005a3c:	10ad      	asrs	r5, r5, #2
 8005a3e:	d03d      	beq.n	8005abc <__pow5mult+0xa0>
 8005a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a42:	b97c      	cbnz	r4, 8005a64 <__pow5mult+0x48>
 8005a44:	2010      	movs	r0, #16
 8005a46:	f7ff fe29 	bl	800569c <malloc>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8005a4e:	b928      	cbnz	r0, 8005a5c <__pow5mult+0x40>
 8005a50:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <__pow5mult+0xac>)
 8005a52:	481e      	ldr	r0, [pc, #120]	; (8005acc <__pow5mult+0xb0>)
 8005a54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a58:	f000 fc0e 	bl	8006278 <__assert_func>
 8005a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a60:	6004      	str	r4, [r0, #0]
 8005a62:	60c4      	str	r4, [r0, #12]
 8005a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a6c:	b94c      	cbnz	r4, 8005a82 <__pow5mult+0x66>
 8005a6e:	f240 2171 	movw	r1, #625	; 0x271
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ff12 	bl	800589c <__i2b>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a7e:	4604      	mov	r4, r0
 8005a80:	6003      	str	r3, [r0, #0]
 8005a82:	f04f 0900 	mov.w	r9, #0
 8005a86:	07eb      	lsls	r3, r5, #31
 8005a88:	d50a      	bpl.n	8005aa0 <__pow5mult+0x84>
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7ff ff1a 	bl	80058c8 <__multiply>
 8005a94:	4639      	mov	r1, r7
 8005a96:	4680      	mov	r8, r0
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7ff fe47 	bl	800572c <_Bfree>
 8005a9e:	4647      	mov	r7, r8
 8005aa0:	106d      	asrs	r5, r5, #1
 8005aa2:	d00b      	beq.n	8005abc <__pow5mult+0xa0>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	b938      	cbnz	r0, 8005ab8 <__pow5mult+0x9c>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4630      	mov	r0, r6
 8005aae:	f7ff ff0b 	bl	80058c8 <__multiply>
 8005ab2:	6020      	str	r0, [r4, #0]
 8005ab4:	f8c0 9000 	str.w	r9, [r0]
 8005ab8:	4604      	mov	r4, r0
 8005aba:	e7e4      	b.n	8005a86 <__pow5mult+0x6a>
 8005abc:	4638      	mov	r0, r7
 8005abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac2:	bf00      	nop
 8005ac4:	08007da8 	.word	0x08007da8
 8005ac8:	08007bd5 	.word	0x08007bd5
 8005acc:	08007c58 	.word	0x08007c58

08005ad0 <__lshift>:
 8005ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6849      	ldr	r1, [r1, #4]
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	4691      	mov	r9, r2
 8005ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ae8:	f108 0601 	add.w	r6, r8, #1
 8005aec:	42b3      	cmp	r3, r6
 8005aee:	db0b      	blt.n	8005b08 <__lshift+0x38>
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff fddb 	bl	80056ac <_Balloc>
 8005af6:	4605      	mov	r5, r0
 8005af8:	b948      	cbnz	r0, 8005b0e <__lshift+0x3e>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b2a      	ldr	r3, [pc, #168]	; (8005ba8 <__lshift+0xd8>)
 8005afe:	482b      	ldr	r0, [pc, #172]	; (8005bac <__lshift+0xdc>)
 8005b00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b04:	f000 fbb8 	bl	8006278 <__assert_func>
 8005b08:	3101      	adds	r1, #1
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	e7ee      	b.n	8005aec <__lshift+0x1c>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f100 0114 	add.w	r1, r0, #20
 8005b14:	f100 0210 	add.w	r2, r0, #16
 8005b18:	4618      	mov	r0, r3
 8005b1a:	4553      	cmp	r3, sl
 8005b1c:	db37      	blt.n	8005b8e <__lshift+0xbe>
 8005b1e:	6920      	ldr	r0, [r4, #16]
 8005b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b24:	f104 0314 	add.w	r3, r4, #20
 8005b28:	f019 091f 	ands.w	r9, r9, #31
 8005b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b34:	d02f      	beq.n	8005b96 <__lshift+0xc6>
 8005b36:	f1c9 0e20 	rsb	lr, r9, #32
 8005b3a:	468a      	mov	sl, r1
 8005b3c:	f04f 0c00 	mov.w	ip, #0
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	fa02 f209 	lsl.w	r2, r2, r9
 8005b46:	ea42 020c 	orr.w	r2, r2, ip
 8005b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8005b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b52:	4298      	cmp	r0, r3
 8005b54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005b58:	d8f2      	bhi.n	8005b40 <__lshift+0x70>
 8005b5a:	1b03      	subs	r3, r0, r4
 8005b5c:	3b15      	subs	r3, #21
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	3304      	adds	r3, #4
 8005b64:	f104 0215 	add.w	r2, r4, #21
 8005b68:	4290      	cmp	r0, r2
 8005b6a:	bf38      	it	cc
 8005b6c:	2304      	movcc	r3, #4
 8005b6e:	f841 c003 	str.w	ip, [r1, r3]
 8005b72:	f1bc 0f00 	cmp.w	ip, #0
 8005b76:	d001      	beq.n	8005b7c <__lshift+0xac>
 8005b78:	f108 0602 	add.w	r6, r8, #2
 8005b7c:	3e01      	subs	r6, #1
 8005b7e:	4638      	mov	r0, r7
 8005b80:	612e      	str	r6, [r5, #16]
 8005b82:	4621      	mov	r1, r4
 8005b84:	f7ff fdd2 	bl	800572c <_Bfree>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b92:	3301      	adds	r3, #1
 8005b94:	e7c1      	b.n	8005b1a <__lshift+0x4a>
 8005b96:	3904      	subs	r1, #4
 8005b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba0:	4298      	cmp	r0, r3
 8005ba2:	d8f9      	bhi.n	8005b98 <__lshift+0xc8>
 8005ba4:	e7ea      	b.n	8005b7c <__lshift+0xac>
 8005ba6:	bf00      	nop
 8005ba8:	08007c47 	.word	0x08007c47
 8005bac:	08007c58 	.word	0x08007c58

08005bb0 <__mcmp>:
 8005bb0:	b530      	push	{r4, r5, lr}
 8005bb2:	6902      	ldr	r2, [r0, #16]
 8005bb4:	690c      	ldr	r4, [r1, #16]
 8005bb6:	1b12      	subs	r2, r2, r4
 8005bb8:	d10e      	bne.n	8005bd8 <__mcmp+0x28>
 8005bba:	f100 0314 	add.w	r3, r0, #20
 8005bbe:	3114      	adds	r1, #20
 8005bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bd0:	42a5      	cmp	r5, r4
 8005bd2:	d003      	beq.n	8005bdc <__mcmp+0x2c>
 8005bd4:	d305      	bcc.n	8005be2 <__mcmp+0x32>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4610      	mov	r0, r2
 8005bda:	bd30      	pop	{r4, r5, pc}
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	d3f3      	bcc.n	8005bc8 <__mcmp+0x18>
 8005be0:	e7fa      	b.n	8005bd8 <__mcmp+0x28>
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	e7f7      	b.n	8005bd8 <__mcmp+0x28>

08005be8 <__mdiff>:
 8005be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460c      	mov	r4, r1
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4690      	mov	r8, r2
 8005bf6:	f7ff ffdb 	bl	8005bb0 <__mcmp>
 8005bfa:	1e05      	subs	r5, r0, #0
 8005bfc:	d110      	bne.n	8005c20 <__mdiff+0x38>
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4630      	mov	r0, r6
 8005c02:	f7ff fd53 	bl	80056ac <_Balloc>
 8005c06:	b930      	cbnz	r0, 8005c16 <__mdiff+0x2e>
 8005c08:	4b3a      	ldr	r3, [pc, #232]	; (8005cf4 <__mdiff+0x10c>)
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f240 2132 	movw	r1, #562	; 0x232
 8005c10:	4839      	ldr	r0, [pc, #228]	; (8005cf8 <__mdiff+0x110>)
 8005c12:	f000 fb31 	bl	8006278 <__assert_func>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	bfa4      	itt	ge
 8005c22:	4643      	movge	r3, r8
 8005c24:	46a0      	movge	r8, r4
 8005c26:	4630      	mov	r0, r6
 8005c28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c2c:	bfa6      	itte	ge
 8005c2e:	461c      	movge	r4, r3
 8005c30:	2500      	movge	r5, #0
 8005c32:	2501      	movlt	r5, #1
 8005c34:	f7ff fd3a 	bl	80056ac <_Balloc>
 8005c38:	b920      	cbnz	r0, 8005c44 <__mdiff+0x5c>
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <__mdiff+0x10c>)
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c42:	e7e5      	b.n	8005c10 <__mdiff+0x28>
 8005c44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c48:	6926      	ldr	r6, [r4, #16]
 8005c4a:	60c5      	str	r5, [r0, #12]
 8005c4c:	f104 0914 	add.w	r9, r4, #20
 8005c50:	f108 0514 	add.w	r5, r8, #20
 8005c54:	f100 0e14 	add.w	lr, r0, #20
 8005c58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c60:	f108 0210 	add.w	r2, r8, #16
 8005c64:	46f2      	mov	sl, lr
 8005c66:	2100      	movs	r1, #0
 8005c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c70:	fa1f f883 	uxth.w	r8, r3
 8005c74:	fa11 f18b 	uxtah	r1, r1, fp
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	eba1 0808 	sub.w	r8, r1, r8
 8005c7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c86:	fa1f f888 	uxth.w	r8, r8
 8005c8a:	1419      	asrs	r1, r3, #16
 8005c8c:	454e      	cmp	r6, r9
 8005c8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c92:	f84a 3b04 	str.w	r3, [sl], #4
 8005c96:	d8e7      	bhi.n	8005c68 <__mdiff+0x80>
 8005c98:	1b33      	subs	r3, r6, r4
 8005c9a:	3b15      	subs	r3, #21
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	3415      	adds	r4, #21
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	bf38      	it	cc
 8005ca8:	2304      	movcc	r3, #4
 8005caa:	441d      	add	r5, r3
 8005cac:	4473      	add	r3, lr
 8005cae:	469e      	mov	lr, r3
 8005cb0:	462e      	mov	r6, r5
 8005cb2:	4566      	cmp	r6, ip
 8005cb4:	d30e      	bcc.n	8005cd4 <__mdiff+0xec>
 8005cb6:	f10c 0203 	add.w	r2, ip, #3
 8005cba:	1b52      	subs	r2, r2, r5
 8005cbc:	f022 0203 	bic.w	r2, r2, #3
 8005cc0:	3d03      	subs	r5, #3
 8005cc2:	45ac      	cmp	ip, r5
 8005cc4:	bf38      	it	cc
 8005cc6:	2200      	movcc	r2, #0
 8005cc8:	441a      	add	r2, r3
 8005cca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cce:	b17b      	cbz	r3, 8005cf0 <__mdiff+0x108>
 8005cd0:	6107      	str	r7, [r0, #16]
 8005cd2:	e7a3      	b.n	8005c1c <__mdiff+0x34>
 8005cd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8005cd8:	fa11 f288 	uxtah	r2, r1, r8
 8005cdc:	1414      	asrs	r4, r2, #16
 8005cde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ce8:	f84e 2b04 	str.w	r2, [lr], #4
 8005cec:	1421      	asrs	r1, r4, #16
 8005cee:	e7e0      	b.n	8005cb2 <__mdiff+0xca>
 8005cf0:	3f01      	subs	r7, #1
 8005cf2:	e7ea      	b.n	8005cca <__mdiff+0xe2>
 8005cf4:	08007c47 	.word	0x08007c47
 8005cf8:	08007c58 	.word	0x08007c58

08005cfc <__d2b>:
 8005cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d00:	4689      	mov	r9, r1
 8005d02:	2101      	movs	r1, #1
 8005d04:	ec57 6b10 	vmov	r6, r7, d0
 8005d08:	4690      	mov	r8, r2
 8005d0a:	f7ff fccf 	bl	80056ac <_Balloc>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b930      	cbnz	r0, 8005d20 <__d2b+0x24>
 8005d12:	4602      	mov	r2, r0
 8005d14:	4b25      	ldr	r3, [pc, #148]	; (8005dac <__d2b+0xb0>)
 8005d16:	4826      	ldr	r0, [pc, #152]	; (8005db0 <__d2b+0xb4>)
 8005d18:	f240 310a 	movw	r1, #778	; 0x30a
 8005d1c:	f000 faac 	bl	8006278 <__assert_func>
 8005d20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d28:	bb35      	cbnz	r5, 8005d78 <__d2b+0x7c>
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	d028      	beq.n	8005d82 <__d2b+0x86>
 8005d30:	4668      	mov	r0, sp
 8005d32:	9600      	str	r6, [sp, #0]
 8005d34:	f7ff fd82 	bl	800583c <__lo0bits>
 8005d38:	9900      	ldr	r1, [sp, #0]
 8005d3a:	b300      	cbz	r0, 8005d7e <__d2b+0x82>
 8005d3c:	9a01      	ldr	r2, [sp, #4]
 8005d3e:	f1c0 0320 	rsb	r3, r0, #32
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	430b      	orrs	r3, r1
 8005d48:	40c2      	lsrs	r2, r0
 8005d4a:	6163      	str	r3, [r4, #20]
 8005d4c:	9201      	str	r2, [sp, #4]
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	61a3      	str	r3, [r4, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf14      	ite	ne
 8005d56:	2202      	movne	r2, #2
 8005d58:	2201      	moveq	r2, #1
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	b1d5      	cbz	r5, 8005d94 <__d2b+0x98>
 8005d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d62:	4405      	add	r5, r0
 8005d64:	f8c9 5000 	str.w	r5, [r9]
 8005d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d6c:	f8c8 0000 	str.w	r0, [r8]
 8005d70:	4620      	mov	r0, r4
 8005d72:	b003      	add	sp, #12
 8005d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d7c:	e7d5      	b.n	8005d2a <__d2b+0x2e>
 8005d7e:	6161      	str	r1, [r4, #20]
 8005d80:	e7e5      	b.n	8005d4e <__d2b+0x52>
 8005d82:	a801      	add	r0, sp, #4
 8005d84:	f7ff fd5a 	bl	800583c <__lo0bits>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	6163      	str	r3, [r4, #20]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	6122      	str	r2, [r4, #16]
 8005d90:	3020      	adds	r0, #32
 8005d92:	e7e3      	b.n	8005d5c <__d2b+0x60>
 8005d94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d9c:	f8c9 0000 	str.w	r0, [r9]
 8005da0:	6918      	ldr	r0, [r3, #16]
 8005da2:	f7ff fd2b 	bl	80057fc <__hi0bits>
 8005da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005daa:	e7df      	b.n	8005d6c <__d2b+0x70>
 8005dac:	08007c47 	.word	0x08007c47
 8005db0:	08007c58 	.word	0x08007c58

08005db4 <_calloc_r>:
 8005db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005db6:	fba1 2402 	umull	r2, r4, r1, r2
 8005dba:	b94c      	cbnz	r4, 8005dd0 <_calloc_r+0x1c>
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	9201      	str	r2, [sp, #4]
 8005dc0:	f000 f87a 	bl	8005eb8 <_malloc_r>
 8005dc4:	9a01      	ldr	r2, [sp, #4]
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	b930      	cbnz	r0, 8005dd8 <_calloc_r+0x24>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	6002      	str	r2, [r0, #0]
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	e7f8      	b.n	8005dca <_calloc_r+0x16>
 8005dd8:	4621      	mov	r1, r4
 8005dda:	f7fe f94f 	bl	800407c <memset>
 8005dde:	e7f4      	b.n	8005dca <_calloc_r+0x16>

08005de0 <_free_r>:
 8005de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d044      	beq.n	8005e70 <_free_r+0x90>
 8005de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dea:	9001      	str	r0, [sp, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f1a1 0404 	sub.w	r4, r1, #4
 8005df2:	bfb8      	it	lt
 8005df4:	18e4      	addlt	r4, r4, r3
 8005df6:	f000 fa81 	bl	80062fc <__malloc_lock>
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <_free_r+0x94>)
 8005dfc:	9801      	ldr	r0, [sp, #4]
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	b933      	cbnz	r3, 8005e10 <_free_r+0x30>
 8005e02:	6063      	str	r3, [r4, #4]
 8005e04:	6014      	str	r4, [r2, #0]
 8005e06:	b003      	add	sp, #12
 8005e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e0c:	f000 ba7c 	b.w	8006308 <__malloc_unlock>
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d908      	bls.n	8005e26 <_free_r+0x46>
 8005e14:	6825      	ldr	r5, [r4, #0]
 8005e16:	1961      	adds	r1, r4, r5
 8005e18:	428b      	cmp	r3, r1
 8005e1a:	bf01      	itttt	eq
 8005e1c:	6819      	ldreq	r1, [r3, #0]
 8005e1e:	685b      	ldreq	r3, [r3, #4]
 8005e20:	1949      	addeq	r1, r1, r5
 8005e22:	6021      	streq	r1, [r4, #0]
 8005e24:	e7ed      	b.n	8005e02 <_free_r+0x22>
 8005e26:	461a      	mov	r2, r3
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	b10b      	cbz	r3, 8005e30 <_free_r+0x50>
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d9fa      	bls.n	8005e26 <_free_r+0x46>
 8005e30:	6811      	ldr	r1, [r2, #0]
 8005e32:	1855      	adds	r5, r2, r1
 8005e34:	42a5      	cmp	r5, r4
 8005e36:	d10b      	bne.n	8005e50 <_free_r+0x70>
 8005e38:	6824      	ldr	r4, [r4, #0]
 8005e3a:	4421      	add	r1, r4
 8005e3c:	1854      	adds	r4, r2, r1
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	d1e0      	bne.n	8005e06 <_free_r+0x26>
 8005e44:	681c      	ldr	r4, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	6053      	str	r3, [r2, #4]
 8005e4a:	4421      	add	r1, r4
 8005e4c:	6011      	str	r1, [r2, #0]
 8005e4e:	e7da      	b.n	8005e06 <_free_r+0x26>
 8005e50:	d902      	bls.n	8005e58 <_free_r+0x78>
 8005e52:	230c      	movs	r3, #12
 8005e54:	6003      	str	r3, [r0, #0]
 8005e56:	e7d6      	b.n	8005e06 <_free_r+0x26>
 8005e58:	6825      	ldr	r5, [r4, #0]
 8005e5a:	1961      	adds	r1, r4, r5
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf04      	itt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	bf04      	itt	eq
 8005e68:	1949      	addeq	r1, r1, r5
 8005e6a:	6021      	streq	r1, [r4, #0]
 8005e6c:	6054      	str	r4, [r2, #4]
 8005e6e:	e7ca      	b.n	8005e06 <_free_r+0x26>
 8005e70:	b003      	add	sp, #12
 8005e72:	bd30      	pop	{r4, r5, pc}
 8005e74:	2000070c 	.word	0x2000070c

08005e78 <sbrk_aligned>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	4e0e      	ldr	r6, [pc, #56]	; (8005eb4 <sbrk_aligned+0x3c>)
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	6831      	ldr	r1, [r6, #0]
 8005e80:	4605      	mov	r5, r0
 8005e82:	b911      	cbnz	r1, 8005e8a <sbrk_aligned+0x12>
 8005e84:	f000 f9e8 	bl	8006258 <_sbrk_r>
 8005e88:	6030      	str	r0, [r6, #0]
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 f9e3 	bl	8006258 <_sbrk_r>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	d00a      	beq.n	8005eac <sbrk_aligned+0x34>
 8005e96:	1cc4      	adds	r4, r0, #3
 8005e98:	f024 0403 	bic.w	r4, r4, #3
 8005e9c:	42a0      	cmp	r0, r4
 8005e9e:	d007      	beq.n	8005eb0 <sbrk_aligned+0x38>
 8005ea0:	1a21      	subs	r1, r4, r0
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 f9d8 	bl	8006258 <_sbrk_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d101      	bne.n	8005eb0 <sbrk_aligned+0x38>
 8005eac:	f04f 34ff 	mov.w	r4, #4294967295
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	20000710 	.word	0x20000710

08005eb8 <_malloc_r>:
 8005eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebc:	1ccd      	adds	r5, r1, #3
 8005ebe:	f025 0503 	bic.w	r5, r5, #3
 8005ec2:	3508      	adds	r5, #8
 8005ec4:	2d0c      	cmp	r5, #12
 8005ec6:	bf38      	it	cc
 8005ec8:	250c      	movcc	r5, #12
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	4607      	mov	r7, r0
 8005ece:	db01      	blt.n	8005ed4 <_malloc_r+0x1c>
 8005ed0:	42a9      	cmp	r1, r5
 8005ed2:	d905      	bls.n	8005ee0 <_malloc_r+0x28>
 8005ed4:	230c      	movs	r3, #12
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	2600      	movs	r6, #0
 8005eda:	4630      	mov	r0, r6
 8005edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee0:	4e2e      	ldr	r6, [pc, #184]	; (8005f9c <_malloc_r+0xe4>)
 8005ee2:	f000 fa0b 	bl	80062fc <__malloc_lock>
 8005ee6:	6833      	ldr	r3, [r6, #0]
 8005ee8:	461c      	mov	r4, r3
 8005eea:	bb34      	cbnz	r4, 8005f3a <_malloc_r+0x82>
 8005eec:	4629      	mov	r1, r5
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f7ff ffc2 	bl	8005e78 <sbrk_aligned>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	d14d      	bne.n	8005f96 <_malloc_r+0xde>
 8005efa:	6834      	ldr	r4, [r6, #0]
 8005efc:	4626      	mov	r6, r4
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d140      	bne.n	8005f84 <_malloc_r+0xcc>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	4631      	mov	r1, r6
 8005f06:	4638      	mov	r0, r7
 8005f08:	eb04 0803 	add.w	r8, r4, r3
 8005f0c:	f000 f9a4 	bl	8006258 <_sbrk_r>
 8005f10:	4580      	cmp	r8, r0
 8005f12:	d13a      	bne.n	8005f8a <_malloc_r+0xd2>
 8005f14:	6821      	ldr	r1, [r4, #0]
 8005f16:	3503      	adds	r5, #3
 8005f18:	1a6d      	subs	r5, r5, r1
 8005f1a:	f025 0503 	bic.w	r5, r5, #3
 8005f1e:	3508      	adds	r5, #8
 8005f20:	2d0c      	cmp	r5, #12
 8005f22:	bf38      	it	cc
 8005f24:	250c      	movcc	r5, #12
 8005f26:	4629      	mov	r1, r5
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f7ff ffa5 	bl	8005e78 <sbrk_aligned>
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d02b      	beq.n	8005f8a <_malloc_r+0xd2>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	442b      	add	r3, r5
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	e00e      	b.n	8005f58 <_malloc_r+0xa0>
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	1b52      	subs	r2, r2, r5
 8005f3e:	d41e      	bmi.n	8005f7e <_malloc_r+0xc6>
 8005f40:	2a0b      	cmp	r2, #11
 8005f42:	d916      	bls.n	8005f72 <_malloc_r+0xba>
 8005f44:	1961      	adds	r1, r4, r5
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	6025      	str	r5, [r4, #0]
 8005f4a:	bf18      	it	ne
 8005f4c:	6059      	strne	r1, [r3, #4]
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	bf08      	it	eq
 8005f52:	6031      	streq	r1, [r6, #0]
 8005f54:	5162      	str	r2, [r4, r5]
 8005f56:	604b      	str	r3, [r1, #4]
 8005f58:	4638      	mov	r0, r7
 8005f5a:	f104 060b 	add.w	r6, r4, #11
 8005f5e:	f000 f9d3 	bl	8006308 <__malloc_unlock>
 8005f62:	f026 0607 	bic.w	r6, r6, #7
 8005f66:	1d23      	adds	r3, r4, #4
 8005f68:	1af2      	subs	r2, r6, r3
 8005f6a:	d0b6      	beq.n	8005eda <_malloc_r+0x22>
 8005f6c:	1b9b      	subs	r3, r3, r6
 8005f6e:	50a3      	str	r3, [r4, r2]
 8005f70:	e7b3      	b.n	8005eda <_malloc_r+0x22>
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	bf0c      	ite	eq
 8005f78:	6032      	streq	r2, [r6, #0]
 8005f7a:	605a      	strne	r2, [r3, #4]
 8005f7c:	e7ec      	b.n	8005f58 <_malloc_r+0xa0>
 8005f7e:	4623      	mov	r3, r4
 8005f80:	6864      	ldr	r4, [r4, #4]
 8005f82:	e7b2      	b.n	8005eea <_malloc_r+0x32>
 8005f84:	4634      	mov	r4, r6
 8005f86:	6876      	ldr	r6, [r6, #4]
 8005f88:	e7b9      	b.n	8005efe <_malloc_r+0x46>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4638      	mov	r0, r7
 8005f90:	f000 f9ba 	bl	8006308 <__malloc_unlock>
 8005f94:	e7a1      	b.n	8005eda <_malloc_r+0x22>
 8005f96:	6025      	str	r5, [r4, #0]
 8005f98:	e7de      	b.n	8005f58 <_malloc_r+0xa0>
 8005f9a:	bf00      	nop
 8005f9c:	2000070c 	.word	0x2000070c

08005fa0 <__ssputs_r>:
 8005fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	688e      	ldr	r6, [r1, #8]
 8005fa6:	429e      	cmp	r6, r3
 8005fa8:	4682      	mov	sl, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4690      	mov	r8, r2
 8005fae:	461f      	mov	r7, r3
 8005fb0:	d838      	bhi.n	8006024 <__ssputs_r+0x84>
 8005fb2:	898a      	ldrh	r2, [r1, #12]
 8005fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fb8:	d032      	beq.n	8006020 <__ssputs_r+0x80>
 8005fba:	6825      	ldr	r5, [r4, #0]
 8005fbc:	6909      	ldr	r1, [r1, #16]
 8005fbe:	eba5 0901 	sub.w	r9, r5, r1
 8005fc2:	6965      	ldr	r5, [r4, #20]
 8005fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fcc:	3301      	adds	r3, #1
 8005fce:	444b      	add	r3, r9
 8005fd0:	106d      	asrs	r5, r5, #1
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	bf38      	it	cc
 8005fd6:	461d      	movcc	r5, r3
 8005fd8:	0553      	lsls	r3, r2, #21
 8005fda:	d531      	bpl.n	8006040 <__ssputs_r+0xa0>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7ff ff6b 	bl	8005eb8 <_malloc_r>
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	b950      	cbnz	r0, 8005ffc <__ssputs_r+0x5c>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	f8ca 3000 	str.w	r3, [sl]
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	6921      	ldr	r1, [r4, #16]
 8005ffe:	464a      	mov	r2, r9
 8006000:	f7fe f814 	bl	800402c <memcpy>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	6126      	str	r6, [r4, #16]
 8006012:	6165      	str	r5, [r4, #20]
 8006014:	444e      	add	r6, r9
 8006016:	eba5 0509 	sub.w	r5, r5, r9
 800601a:	6026      	str	r6, [r4, #0]
 800601c:	60a5      	str	r5, [r4, #8]
 800601e:	463e      	mov	r6, r7
 8006020:	42be      	cmp	r6, r7
 8006022:	d900      	bls.n	8006026 <__ssputs_r+0x86>
 8006024:	463e      	mov	r6, r7
 8006026:	6820      	ldr	r0, [r4, #0]
 8006028:	4632      	mov	r2, r6
 800602a:	4641      	mov	r1, r8
 800602c:	f7fe f80c 	bl	8004048 <memmove>
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	1b9b      	subs	r3, r3, r6
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	4433      	add	r3, r6
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	2000      	movs	r0, #0
 800603e:	e7db      	b.n	8005ff8 <__ssputs_r+0x58>
 8006040:	462a      	mov	r2, r5
 8006042:	f000 f967 	bl	8006314 <_realloc_r>
 8006046:	4606      	mov	r6, r0
 8006048:	2800      	cmp	r0, #0
 800604a:	d1e1      	bne.n	8006010 <__ssputs_r+0x70>
 800604c:	6921      	ldr	r1, [r4, #16]
 800604e:	4650      	mov	r0, sl
 8006050:	f7ff fec6 	bl	8005de0 <_free_r>
 8006054:	e7c7      	b.n	8005fe6 <__ssputs_r+0x46>
	...

08006058 <_svfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4698      	mov	r8, r3
 800605e:	898b      	ldrh	r3, [r1, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	b09d      	sub	sp, #116	; 0x74
 8006064:	4607      	mov	r7, r0
 8006066:	460d      	mov	r5, r1
 8006068:	4614      	mov	r4, r2
 800606a:	d50e      	bpl.n	800608a <_svfiprintf_r+0x32>
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	b963      	cbnz	r3, 800608a <_svfiprintf_r+0x32>
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	f7ff ff21 	bl	8005eb8 <_malloc_r>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	6128      	str	r0, [r5, #16]
 800607a:	b920      	cbnz	r0, 8006086 <_svfiprintf_r+0x2e>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e0d1      	b.n	800622a <_svfiprintf_r+0x1d2>
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	616b      	str	r3, [r5, #20]
 800608a:	2300      	movs	r3, #0
 800608c:	9309      	str	r3, [sp, #36]	; 0x24
 800608e:	2320      	movs	r3, #32
 8006090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006094:	f8cd 800c 	str.w	r8, [sp, #12]
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006244 <_svfiprintf_r+0x1ec>
 800609e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a2:	f04f 0901 	mov.w	r9, #1
 80060a6:	4623      	mov	r3, r4
 80060a8:	469a      	mov	sl, r3
 80060aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ae:	b10a      	cbz	r2, 80060b4 <_svfiprintf_r+0x5c>
 80060b0:	2a25      	cmp	r2, #37	; 0x25
 80060b2:	d1f9      	bne.n	80060a8 <_svfiprintf_r+0x50>
 80060b4:	ebba 0b04 	subs.w	fp, sl, r4
 80060b8:	d00b      	beq.n	80060d2 <_svfiprintf_r+0x7a>
 80060ba:	465b      	mov	r3, fp
 80060bc:	4622      	mov	r2, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff ff6d 	bl	8005fa0 <__ssputs_r>
 80060c6:	3001      	adds	r0, #1
 80060c8:	f000 80aa 	beq.w	8006220 <_svfiprintf_r+0x1c8>
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	445a      	add	r2, fp
 80060d0:	9209      	str	r2, [sp, #36]	; 0x24
 80060d2:	f89a 3000 	ldrb.w	r3, [sl]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80a2 	beq.w	8006220 <_svfiprintf_r+0x1c8>
 80060dc:	2300      	movs	r3, #0
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e6:	f10a 0a01 	add.w	sl, sl, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f2:	931a      	str	r3, [sp, #104]	; 0x68
 80060f4:	4654      	mov	r4, sl
 80060f6:	2205      	movs	r2, #5
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	4851      	ldr	r0, [pc, #324]	; (8006244 <_svfiprintf_r+0x1ec>)
 80060fe:	f7fa f877 	bl	80001f0 <memchr>
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	b9d8      	cbnz	r0, 800613e <_svfiprintf_r+0xe6>
 8006106:	06d0      	lsls	r0, r2, #27
 8006108:	bf44      	itt	mi
 800610a:	2320      	movmi	r3, #32
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	0711      	lsls	r1, r2, #28
 8006112:	bf44      	itt	mi
 8006114:	232b      	movmi	r3, #43	; 0x2b
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	f89a 3000 	ldrb.w	r3, [sl]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d015      	beq.n	800614e <_svfiprintf_r+0xf6>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	4654      	mov	r4, sl
 8006126:	2000      	movs	r0, #0
 8006128:	f04f 0c0a 	mov.w	ip, #10
 800612c:	4621      	mov	r1, r4
 800612e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006132:	3b30      	subs	r3, #48	; 0x30
 8006134:	2b09      	cmp	r3, #9
 8006136:	d94e      	bls.n	80061d6 <_svfiprintf_r+0x17e>
 8006138:	b1b0      	cbz	r0, 8006168 <_svfiprintf_r+0x110>
 800613a:	9207      	str	r2, [sp, #28]
 800613c:	e014      	b.n	8006168 <_svfiprintf_r+0x110>
 800613e:	eba0 0308 	sub.w	r3, r0, r8
 8006142:	fa09 f303 	lsl.w	r3, r9, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	46a2      	mov	sl, r4
 800614c:	e7d2      	b.n	80060f4 <_svfiprintf_r+0x9c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9103      	str	r1, [sp, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfbb      	ittet	lt
 800615a:	425b      	neglt	r3, r3
 800615c:	f042 0202 	orrlt.w	r2, r2, #2
 8006160:	9307      	strge	r3, [sp, #28]
 8006162:	9307      	strlt	r3, [sp, #28]
 8006164:	bfb8      	it	lt
 8006166:	9204      	strlt	r2, [sp, #16]
 8006168:	7823      	ldrb	r3, [r4, #0]
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	d10c      	bne.n	8006188 <_svfiprintf_r+0x130>
 800616e:	7863      	ldrb	r3, [r4, #1]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d135      	bne.n	80061e0 <_svfiprintf_r+0x188>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb8      	it	lt
 8006180:	f04f 33ff 	movlt.w	r3, #4294967295
 8006184:	3402      	adds	r4, #2
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006254 <_svfiprintf_r+0x1fc>
 800618c:	7821      	ldrb	r1, [r4, #0]
 800618e:	2203      	movs	r2, #3
 8006190:	4650      	mov	r0, sl
 8006192:	f7fa f82d 	bl	80001f0 <memchr>
 8006196:	b140      	cbz	r0, 80061aa <_svfiprintf_r+0x152>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	eba0 000a 	sub.w	r0, r0, sl
 800619e:	fa03 f000 	lsl.w	r0, r3, r0
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	4303      	orrs	r3, r0
 80061a6:	3401      	adds	r4, #1
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ae:	4826      	ldr	r0, [pc, #152]	; (8006248 <_svfiprintf_r+0x1f0>)
 80061b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b4:	2206      	movs	r2, #6
 80061b6:	f7fa f81b 	bl	80001f0 <memchr>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d038      	beq.n	8006230 <_svfiprintf_r+0x1d8>
 80061be:	4b23      	ldr	r3, [pc, #140]	; (800624c <_svfiprintf_r+0x1f4>)
 80061c0:	bb1b      	cbnz	r3, 800620a <_svfiprintf_r+0x1b2>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	3307      	adds	r3, #7
 80061c6:	f023 0307 	bic.w	r3, r3, #7
 80061ca:	3308      	adds	r3, #8
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d0:	4433      	add	r3, r6
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	e767      	b.n	80060a6 <_svfiprintf_r+0x4e>
 80061d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80061da:	460c      	mov	r4, r1
 80061dc:	2001      	movs	r0, #1
 80061de:	e7a5      	b.n	800612c <_svfiprintf_r+0xd4>
 80061e0:	2300      	movs	r3, #0
 80061e2:	3401      	adds	r4, #1
 80061e4:	9305      	str	r3, [sp, #20]
 80061e6:	4619      	mov	r1, r3
 80061e8:	f04f 0c0a 	mov.w	ip, #10
 80061ec:	4620      	mov	r0, r4
 80061ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f2:	3a30      	subs	r2, #48	; 0x30
 80061f4:	2a09      	cmp	r2, #9
 80061f6:	d903      	bls.n	8006200 <_svfiprintf_r+0x1a8>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0c5      	beq.n	8006188 <_svfiprintf_r+0x130>
 80061fc:	9105      	str	r1, [sp, #20]
 80061fe:	e7c3      	b.n	8006188 <_svfiprintf_r+0x130>
 8006200:	fb0c 2101 	mla	r1, ip, r1, r2
 8006204:	4604      	mov	r4, r0
 8006206:	2301      	movs	r3, #1
 8006208:	e7f0      	b.n	80061ec <_svfiprintf_r+0x194>
 800620a:	ab03      	add	r3, sp, #12
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	462a      	mov	r2, r5
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <_svfiprintf_r+0x1f8>)
 8006212:	a904      	add	r1, sp, #16
 8006214:	4638      	mov	r0, r7
 8006216:	f7fd ffd9 	bl	80041cc <_printf_float>
 800621a:	1c42      	adds	r2, r0, #1
 800621c:	4606      	mov	r6, r0
 800621e:	d1d6      	bne.n	80061ce <_svfiprintf_r+0x176>
 8006220:	89ab      	ldrh	r3, [r5, #12]
 8006222:	065b      	lsls	r3, r3, #25
 8006224:	f53f af2c 	bmi.w	8006080 <_svfiprintf_r+0x28>
 8006228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800622a:	b01d      	add	sp, #116	; 0x74
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	ab03      	add	r3, sp, #12
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	462a      	mov	r2, r5
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <_svfiprintf_r+0x1f8>)
 8006238:	a904      	add	r1, sp, #16
 800623a:	4638      	mov	r0, r7
 800623c:	f7fe fa6a 	bl	8004714 <_printf_i>
 8006240:	e7eb      	b.n	800621a <_svfiprintf_r+0x1c2>
 8006242:	bf00      	nop
 8006244:	08007db4 	.word	0x08007db4
 8006248:	08007dbe 	.word	0x08007dbe
 800624c:	080041cd 	.word	0x080041cd
 8006250:	08005fa1 	.word	0x08005fa1
 8006254:	08007dba 	.word	0x08007dba

08006258 <_sbrk_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	; (8006274 <_sbrk_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fb fcc0 	bl	8001be8 <_sbrk>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_sbrk_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_sbrk_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	20000714 	.word	0x20000714

08006278 <__assert_func>:
 8006278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800627a:	4614      	mov	r4, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <__assert_func+0x2c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4605      	mov	r5, r0
 8006284:	68d8      	ldr	r0, [r3, #12]
 8006286:	b14c      	cbz	r4, 800629c <__assert_func+0x24>
 8006288:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <__assert_func+0x30>)
 800628a:	9100      	str	r1, [sp, #0]
 800628c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006290:	4906      	ldr	r1, [pc, #24]	; (80062ac <__assert_func+0x34>)
 8006292:	462b      	mov	r3, r5
 8006294:	f000 f80e 	bl	80062b4 <fiprintf>
 8006298:	f000 fa92 	bl	80067c0 <abort>
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <__assert_func+0x38>)
 800629e:	461c      	mov	r4, r3
 80062a0:	e7f3      	b.n	800628a <__assert_func+0x12>
 80062a2:	bf00      	nop
 80062a4:	20000014 	.word	0x20000014
 80062a8:	08007dc5 	.word	0x08007dc5
 80062ac:	08007dd2 	.word	0x08007dd2
 80062b0:	08007e00 	.word	0x08007e00

080062b4 <fiprintf>:
 80062b4:	b40e      	push	{r1, r2, r3}
 80062b6:	b503      	push	{r0, r1, lr}
 80062b8:	4601      	mov	r1, r0
 80062ba:	ab03      	add	r3, sp, #12
 80062bc:	4805      	ldr	r0, [pc, #20]	; (80062d4 <fiprintf+0x20>)
 80062be:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c2:	6800      	ldr	r0, [r0, #0]
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	f000 f87d 	bl	80063c4 <_vfiprintf_r>
 80062ca:	b002      	add	sp, #8
 80062cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d0:	b003      	add	sp, #12
 80062d2:	4770      	bx	lr
 80062d4:	20000014 	.word	0x20000014

080062d8 <__ascii_mbtowc>:
 80062d8:	b082      	sub	sp, #8
 80062da:	b901      	cbnz	r1, 80062de <__ascii_mbtowc+0x6>
 80062dc:	a901      	add	r1, sp, #4
 80062de:	b142      	cbz	r2, 80062f2 <__ascii_mbtowc+0x1a>
 80062e0:	b14b      	cbz	r3, 80062f6 <__ascii_mbtowc+0x1e>
 80062e2:	7813      	ldrb	r3, [r2, #0]
 80062e4:	600b      	str	r3, [r1, #0]
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	1e10      	subs	r0, r2, #0
 80062ea:	bf18      	it	ne
 80062ec:	2001      	movne	r0, #1
 80062ee:	b002      	add	sp, #8
 80062f0:	4770      	bx	lr
 80062f2:	4610      	mov	r0, r2
 80062f4:	e7fb      	b.n	80062ee <__ascii_mbtowc+0x16>
 80062f6:	f06f 0001 	mvn.w	r0, #1
 80062fa:	e7f8      	b.n	80062ee <__ascii_mbtowc+0x16>

080062fc <__malloc_lock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__malloc_lock+0x8>)
 80062fe:	f000 bc1f 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 8006302:	bf00      	nop
 8006304:	20000718 	.word	0x20000718

08006308 <__malloc_unlock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_unlock+0x8>)
 800630a:	f000 bc1a 	b.w	8006b42 <__retarget_lock_release_recursive>
 800630e:	bf00      	nop
 8006310:	20000718 	.word	0x20000718

08006314 <_realloc_r>:
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	4680      	mov	r8, r0
 800631a:	4614      	mov	r4, r2
 800631c:	460e      	mov	r6, r1
 800631e:	b921      	cbnz	r1, 800632a <_realloc_r+0x16>
 8006320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	4611      	mov	r1, r2
 8006326:	f7ff bdc7 	b.w	8005eb8 <_malloc_r>
 800632a:	b92a      	cbnz	r2, 8006338 <_realloc_r+0x24>
 800632c:	f7ff fd58 	bl	8005de0 <_free_r>
 8006330:	4625      	mov	r5, r4
 8006332:	4628      	mov	r0, r5
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	f000 fc6a 	bl	8006c10 <_malloc_usable_size_r>
 800633c:	4284      	cmp	r4, r0
 800633e:	4607      	mov	r7, r0
 8006340:	d802      	bhi.n	8006348 <_realloc_r+0x34>
 8006342:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006346:	d812      	bhi.n	800636e <_realloc_r+0x5a>
 8006348:	4621      	mov	r1, r4
 800634a:	4640      	mov	r0, r8
 800634c:	f7ff fdb4 	bl	8005eb8 <_malloc_r>
 8006350:	4605      	mov	r5, r0
 8006352:	2800      	cmp	r0, #0
 8006354:	d0ed      	beq.n	8006332 <_realloc_r+0x1e>
 8006356:	42bc      	cmp	r4, r7
 8006358:	4622      	mov	r2, r4
 800635a:	4631      	mov	r1, r6
 800635c:	bf28      	it	cs
 800635e:	463a      	movcs	r2, r7
 8006360:	f7fd fe64 	bl	800402c <memcpy>
 8006364:	4631      	mov	r1, r6
 8006366:	4640      	mov	r0, r8
 8006368:	f7ff fd3a 	bl	8005de0 <_free_r>
 800636c:	e7e1      	b.n	8006332 <_realloc_r+0x1e>
 800636e:	4635      	mov	r5, r6
 8006370:	e7df      	b.n	8006332 <_realloc_r+0x1e>

08006372 <__sfputc_r>:
 8006372:	6893      	ldr	r3, [r2, #8]
 8006374:	3b01      	subs	r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	b410      	push	{r4}
 800637a:	6093      	str	r3, [r2, #8]
 800637c:	da08      	bge.n	8006390 <__sfputc_r+0x1e>
 800637e:	6994      	ldr	r4, [r2, #24]
 8006380:	42a3      	cmp	r3, r4
 8006382:	db01      	blt.n	8006388 <__sfputc_r+0x16>
 8006384:	290a      	cmp	r1, #10
 8006386:	d103      	bne.n	8006390 <__sfputc_r+0x1e>
 8006388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800638c:	f000 b94a 	b.w	8006624 <__swbuf_r>
 8006390:	6813      	ldr	r3, [r2, #0]
 8006392:	1c58      	adds	r0, r3, #1
 8006394:	6010      	str	r0, [r2, #0]
 8006396:	7019      	strb	r1, [r3, #0]
 8006398:	4608      	mov	r0, r1
 800639a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <__sfputs_r>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	4606      	mov	r6, r0
 80063a4:	460f      	mov	r7, r1
 80063a6:	4614      	mov	r4, r2
 80063a8:	18d5      	adds	r5, r2, r3
 80063aa:	42ac      	cmp	r4, r5
 80063ac:	d101      	bne.n	80063b2 <__sfputs_r+0x12>
 80063ae:	2000      	movs	r0, #0
 80063b0:	e007      	b.n	80063c2 <__sfputs_r+0x22>
 80063b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b6:	463a      	mov	r2, r7
 80063b8:	4630      	mov	r0, r6
 80063ba:	f7ff ffda 	bl	8006372 <__sfputc_r>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d1f3      	bne.n	80063aa <__sfputs_r+0xa>
 80063c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063c4 <_vfiprintf_r>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	460d      	mov	r5, r1
 80063ca:	b09d      	sub	sp, #116	; 0x74
 80063cc:	4614      	mov	r4, r2
 80063ce:	4698      	mov	r8, r3
 80063d0:	4606      	mov	r6, r0
 80063d2:	b118      	cbz	r0, 80063dc <_vfiprintf_r+0x18>
 80063d4:	6983      	ldr	r3, [r0, #24]
 80063d6:	b90b      	cbnz	r3, 80063dc <_vfiprintf_r+0x18>
 80063d8:	f000 fb14 	bl	8006a04 <__sinit>
 80063dc:	4b89      	ldr	r3, [pc, #548]	; (8006604 <_vfiprintf_r+0x240>)
 80063de:	429d      	cmp	r5, r3
 80063e0:	d11b      	bne.n	800641a <_vfiprintf_r+0x56>
 80063e2:	6875      	ldr	r5, [r6, #4]
 80063e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	d405      	bmi.n	80063f6 <_vfiprintf_r+0x32>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	059a      	lsls	r2, r3, #22
 80063ee:	d402      	bmi.n	80063f6 <_vfiprintf_r+0x32>
 80063f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f2:	f000 fba5 	bl	8006b40 <__retarget_lock_acquire_recursive>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	071b      	lsls	r3, r3, #28
 80063fa:	d501      	bpl.n	8006400 <_vfiprintf_r+0x3c>
 80063fc:	692b      	ldr	r3, [r5, #16]
 80063fe:	b9eb      	cbnz	r3, 800643c <_vfiprintf_r+0x78>
 8006400:	4629      	mov	r1, r5
 8006402:	4630      	mov	r0, r6
 8006404:	f000 f96e 	bl	80066e4 <__swsetup_r>
 8006408:	b1c0      	cbz	r0, 800643c <_vfiprintf_r+0x78>
 800640a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800640c:	07dc      	lsls	r4, r3, #31
 800640e:	d50e      	bpl.n	800642e <_vfiprintf_r+0x6a>
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	b01d      	add	sp, #116	; 0x74
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	4b7b      	ldr	r3, [pc, #492]	; (8006608 <_vfiprintf_r+0x244>)
 800641c:	429d      	cmp	r5, r3
 800641e:	d101      	bne.n	8006424 <_vfiprintf_r+0x60>
 8006420:	68b5      	ldr	r5, [r6, #8]
 8006422:	e7df      	b.n	80063e4 <_vfiprintf_r+0x20>
 8006424:	4b79      	ldr	r3, [pc, #484]	; (800660c <_vfiprintf_r+0x248>)
 8006426:	429d      	cmp	r5, r3
 8006428:	bf08      	it	eq
 800642a:	68f5      	ldreq	r5, [r6, #12]
 800642c:	e7da      	b.n	80063e4 <_vfiprintf_r+0x20>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	0598      	lsls	r0, r3, #22
 8006432:	d4ed      	bmi.n	8006410 <_vfiprintf_r+0x4c>
 8006434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006436:	f000 fb84 	bl	8006b42 <__retarget_lock_release_recursive>
 800643a:	e7e9      	b.n	8006410 <_vfiprintf_r+0x4c>
 800643c:	2300      	movs	r3, #0
 800643e:	9309      	str	r3, [sp, #36]	; 0x24
 8006440:	2320      	movs	r3, #32
 8006442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006446:	f8cd 800c 	str.w	r8, [sp, #12]
 800644a:	2330      	movs	r3, #48	; 0x30
 800644c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006610 <_vfiprintf_r+0x24c>
 8006450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006454:	f04f 0901 	mov.w	r9, #1
 8006458:	4623      	mov	r3, r4
 800645a:	469a      	mov	sl, r3
 800645c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006460:	b10a      	cbz	r2, 8006466 <_vfiprintf_r+0xa2>
 8006462:	2a25      	cmp	r2, #37	; 0x25
 8006464:	d1f9      	bne.n	800645a <_vfiprintf_r+0x96>
 8006466:	ebba 0b04 	subs.w	fp, sl, r4
 800646a:	d00b      	beq.n	8006484 <_vfiprintf_r+0xc0>
 800646c:	465b      	mov	r3, fp
 800646e:	4622      	mov	r2, r4
 8006470:	4629      	mov	r1, r5
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff ff94 	bl	80063a0 <__sfputs_r>
 8006478:	3001      	adds	r0, #1
 800647a:	f000 80aa 	beq.w	80065d2 <_vfiprintf_r+0x20e>
 800647e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006480:	445a      	add	r2, fp
 8006482:	9209      	str	r2, [sp, #36]	; 0x24
 8006484:	f89a 3000 	ldrb.w	r3, [sl]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80a2 	beq.w	80065d2 <_vfiprintf_r+0x20e>
 800648e:	2300      	movs	r3, #0
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006498:	f10a 0a01 	add.w	sl, sl, #1
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	9307      	str	r3, [sp, #28]
 80064a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a4:	931a      	str	r3, [sp, #104]	; 0x68
 80064a6:	4654      	mov	r4, sl
 80064a8:	2205      	movs	r2, #5
 80064aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ae:	4858      	ldr	r0, [pc, #352]	; (8006610 <_vfiprintf_r+0x24c>)
 80064b0:	f7f9 fe9e 	bl	80001f0 <memchr>
 80064b4:	9a04      	ldr	r2, [sp, #16]
 80064b6:	b9d8      	cbnz	r0, 80064f0 <_vfiprintf_r+0x12c>
 80064b8:	06d1      	lsls	r1, r2, #27
 80064ba:	bf44      	itt	mi
 80064bc:	2320      	movmi	r3, #32
 80064be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064c2:	0713      	lsls	r3, r2, #28
 80064c4:	bf44      	itt	mi
 80064c6:	232b      	movmi	r3, #43	; 0x2b
 80064c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064cc:	f89a 3000 	ldrb.w	r3, [sl]
 80064d0:	2b2a      	cmp	r3, #42	; 0x2a
 80064d2:	d015      	beq.n	8006500 <_vfiprintf_r+0x13c>
 80064d4:	9a07      	ldr	r2, [sp, #28]
 80064d6:	4654      	mov	r4, sl
 80064d8:	2000      	movs	r0, #0
 80064da:	f04f 0c0a 	mov.w	ip, #10
 80064de:	4621      	mov	r1, r4
 80064e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e4:	3b30      	subs	r3, #48	; 0x30
 80064e6:	2b09      	cmp	r3, #9
 80064e8:	d94e      	bls.n	8006588 <_vfiprintf_r+0x1c4>
 80064ea:	b1b0      	cbz	r0, 800651a <_vfiprintf_r+0x156>
 80064ec:	9207      	str	r2, [sp, #28]
 80064ee:	e014      	b.n	800651a <_vfiprintf_r+0x156>
 80064f0:	eba0 0308 	sub.w	r3, r0, r8
 80064f4:	fa09 f303 	lsl.w	r3, r9, r3
 80064f8:	4313      	orrs	r3, r2
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	46a2      	mov	sl, r4
 80064fe:	e7d2      	b.n	80064a6 <_vfiprintf_r+0xe2>
 8006500:	9b03      	ldr	r3, [sp, #12]
 8006502:	1d19      	adds	r1, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	9103      	str	r1, [sp, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	bfbb      	ittet	lt
 800650c:	425b      	neglt	r3, r3
 800650e:	f042 0202 	orrlt.w	r2, r2, #2
 8006512:	9307      	strge	r3, [sp, #28]
 8006514:	9307      	strlt	r3, [sp, #28]
 8006516:	bfb8      	it	lt
 8006518:	9204      	strlt	r2, [sp, #16]
 800651a:	7823      	ldrb	r3, [r4, #0]
 800651c:	2b2e      	cmp	r3, #46	; 0x2e
 800651e:	d10c      	bne.n	800653a <_vfiprintf_r+0x176>
 8006520:	7863      	ldrb	r3, [r4, #1]
 8006522:	2b2a      	cmp	r3, #42	; 0x2a
 8006524:	d135      	bne.n	8006592 <_vfiprintf_r+0x1ce>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	1d1a      	adds	r2, r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	9203      	str	r2, [sp, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfb8      	it	lt
 8006532:	f04f 33ff 	movlt.w	r3, #4294967295
 8006536:	3402      	adds	r4, #2
 8006538:	9305      	str	r3, [sp, #20]
 800653a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006620 <_vfiprintf_r+0x25c>
 800653e:	7821      	ldrb	r1, [r4, #0]
 8006540:	2203      	movs	r2, #3
 8006542:	4650      	mov	r0, sl
 8006544:	f7f9 fe54 	bl	80001f0 <memchr>
 8006548:	b140      	cbz	r0, 800655c <_vfiprintf_r+0x198>
 800654a:	2340      	movs	r3, #64	; 0x40
 800654c:	eba0 000a 	sub.w	r0, r0, sl
 8006550:	fa03 f000 	lsl.w	r0, r3, r0
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	4303      	orrs	r3, r0
 8006558:	3401      	adds	r4, #1
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006560:	482c      	ldr	r0, [pc, #176]	; (8006614 <_vfiprintf_r+0x250>)
 8006562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006566:	2206      	movs	r2, #6
 8006568:	f7f9 fe42 	bl	80001f0 <memchr>
 800656c:	2800      	cmp	r0, #0
 800656e:	d03f      	beq.n	80065f0 <_vfiprintf_r+0x22c>
 8006570:	4b29      	ldr	r3, [pc, #164]	; (8006618 <_vfiprintf_r+0x254>)
 8006572:	bb1b      	cbnz	r3, 80065bc <_vfiprintf_r+0x1f8>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	3307      	adds	r3, #7
 8006578:	f023 0307 	bic.w	r3, r3, #7
 800657c:	3308      	adds	r3, #8
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006582:	443b      	add	r3, r7
 8006584:	9309      	str	r3, [sp, #36]	; 0x24
 8006586:	e767      	b.n	8006458 <_vfiprintf_r+0x94>
 8006588:	fb0c 3202 	mla	r2, ip, r2, r3
 800658c:	460c      	mov	r4, r1
 800658e:	2001      	movs	r0, #1
 8006590:	e7a5      	b.n	80064de <_vfiprintf_r+0x11a>
 8006592:	2300      	movs	r3, #0
 8006594:	3401      	adds	r4, #1
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	4619      	mov	r1, r3
 800659a:	f04f 0c0a 	mov.w	ip, #10
 800659e:	4620      	mov	r0, r4
 80065a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a4:	3a30      	subs	r2, #48	; 0x30
 80065a6:	2a09      	cmp	r2, #9
 80065a8:	d903      	bls.n	80065b2 <_vfiprintf_r+0x1ee>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0c5      	beq.n	800653a <_vfiprintf_r+0x176>
 80065ae:	9105      	str	r1, [sp, #20]
 80065b0:	e7c3      	b.n	800653a <_vfiprintf_r+0x176>
 80065b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80065b6:	4604      	mov	r4, r0
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7f0      	b.n	800659e <_vfiprintf_r+0x1da>
 80065bc:	ab03      	add	r3, sp, #12
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	462a      	mov	r2, r5
 80065c2:	4b16      	ldr	r3, [pc, #88]	; (800661c <_vfiprintf_r+0x258>)
 80065c4:	a904      	add	r1, sp, #16
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7fd fe00 	bl	80041cc <_printf_float>
 80065cc:	4607      	mov	r7, r0
 80065ce:	1c78      	adds	r0, r7, #1
 80065d0:	d1d6      	bne.n	8006580 <_vfiprintf_r+0x1bc>
 80065d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065d4:	07d9      	lsls	r1, r3, #31
 80065d6:	d405      	bmi.n	80065e4 <_vfiprintf_r+0x220>
 80065d8:	89ab      	ldrh	r3, [r5, #12]
 80065da:	059a      	lsls	r2, r3, #22
 80065dc:	d402      	bmi.n	80065e4 <_vfiprintf_r+0x220>
 80065de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e0:	f000 faaf 	bl	8006b42 <__retarget_lock_release_recursive>
 80065e4:	89ab      	ldrh	r3, [r5, #12]
 80065e6:	065b      	lsls	r3, r3, #25
 80065e8:	f53f af12 	bmi.w	8006410 <_vfiprintf_r+0x4c>
 80065ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ee:	e711      	b.n	8006414 <_vfiprintf_r+0x50>
 80065f0:	ab03      	add	r3, sp, #12
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	462a      	mov	r2, r5
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <_vfiprintf_r+0x258>)
 80065f8:	a904      	add	r1, sp, #16
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7fe f88a 	bl	8004714 <_printf_i>
 8006600:	e7e4      	b.n	80065cc <_vfiprintf_r+0x208>
 8006602:	bf00      	nop
 8006604:	08007f2c 	.word	0x08007f2c
 8006608:	08007f4c 	.word	0x08007f4c
 800660c:	08007f0c 	.word	0x08007f0c
 8006610:	08007db4 	.word	0x08007db4
 8006614:	08007dbe 	.word	0x08007dbe
 8006618:	080041cd 	.word	0x080041cd
 800661c:	080063a1 	.word	0x080063a1
 8006620:	08007dba 	.word	0x08007dba

08006624 <__swbuf_r>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	460e      	mov	r6, r1
 8006628:	4614      	mov	r4, r2
 800662a:	4605      	mov	r5, r0
 800662c:	b118      	cbz	r0, 8006636 <__swbuf_r+0x12>
 800662e:	6983      	ldr	r3, [r0, #24]
 8006630:	b90b      	cbnz	r3, 8006636 <__swbuf_r+0x12>
 8006632:	f000 f9e7 	bl	8006a04 <__sinit>
 8006636:	4b21      	ldr	r3, [pc, #132]	; (80066bc <__swbuf_r+0x98>)
 8006638:	429c      	cmp	r4, r3
 800663a:	d12b      	bne.n	8006694 <__swbuf_r+0x70>
 800663c:	686c      	ldr	r4, [r5, #4]
 800663e:	69a3      	ldr	r3, [r4, #24]
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	071a      	lsls	r2, r3, #28
 8006646:	d52f      	bpl.n	80066a8 <__swbuf_r+0x84>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b36b      	cbz	r3, 80066a8 <__swbuf_r+0x84>
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	1ac0      	subs	r0, r0, r3
 8006652:	6963      	ldr	r3, [r4, #20]
 8006654:	b2f6      	uxtb	r6, r6
 8006656:	4283      	cmp	r3, r0
 8006658:	4637      	mov	r7, r6
 800665a:	dc04      	bgt.n	8006666 <__swbuf_r+0x42>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f93c 	bl	80068dc <_fflush_r>
 8006664:	bb30      	cbnz	r0, 80066b4 <__swbuf_r+0x90>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	3b01      	subs	r3, #1
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	6022      	str	r2, [r4, #0]
 8006672:	701e      	strb	r6, [r3, #0]
 8006674:	6963      	ldr	r3, [r4, #20]
 8006676:	3001      	adds	r0, #1
 8006678:	4283      	cmp	r3, r0
 800667a:	d004      	beq.n	8006686 <__swbuf_r+0x62>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	d506      	bpl.n	8006690 <__swbuf_r+0x6c>
 8006682:	2e0a      	cmp	r6, #10
 8006684:	d104      	bne.n	8006690 <__swbuf_r+0x6c>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f927 	bl	80068dc <_fflush_r>
 800668e:	b988      	cbnz	r0, 80066b4 <__swbuf_r+0x90>
 8006690:	4638      	mov	r0, r7
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <__swbuf_r+0x9c>)
 8006696:	429c      	cmp	r4, r3
 8006698:	d101      	bne.n	800669e <__swbuf_r+0x7a>
 800669a:	68ac      	ldr	r4, [r5, #8]
 800669c:	e7cf      	b.n	800663e <__swbuf_r+0x1a>
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <__swbuf_r+0xa0>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	bf08      	it	eq
 80066a4:	68ec      	ldreq	r4, [r5, #12]
 80066a6:	e7ca      	b.n	800663e <__swbuf_r+0x1a>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f81a 	bl	80066e4 <__swsetup_r>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d0cb      	beq.n	800664c <__swbuf_r+0x28>
 80066b4:	f04f 37ff 	mov.w	r7, #4294967295
 80066b8:	e7ea      	b.n	8006690 <__swbuf_r+0x6c>
 80066ba:	bf00      	nop
 80066bc:	08007f2c 	.word	0x08007f2c
 80066c0:	08007f4c 	.word	0x08007f4c
 80066c4:	08007f0c 	.word	0x08007f0c

080066c8 <__ascii_wctomb>:
 80066c8:	b149      	cbz	r1, 80066de <__ascii_wctomb+0x16>
 80066ca:	2aff      	cmp	r2, #255	; 0xff
 80066cc:	bf85      	ittet	hi
 80066ce:	238a      	movhi	r3, #138	; 0x8a
 80066d0:	6003      	strhi	r3, [r0, #0]
 80066d2:	700a      	strbls	r2, [r1, #0]
 80066d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80066d8:	bf98      	it	ls
 80066da:	2001      	movls	r0, #1
 80066dc:	4770      	bx	lr
 80066de:	4608      	mov	r0, r1
 80066e0:	4770      	bx	lr
	...

080066e4 <__swsetup_r>:
 80066e4:	4b32      	ldr	r3, [pc, #200]	; (80067b0 <__swsetup_r+0xcc>)
 80066e6:	b570      	push	{r4, r5, r6, lr}
 80066e8:	681d      	ldr	r5, [r3, #0]
 80066ea:	4606      	mov	r6, r0
 80066ec:	460c      	mov	r4, r1
 80066ee:	b125      	cbz	r5, 80066fa <__swsetup_r+0x16>
 80066f0:	69ab      	ldr	r3, [r5, #24]
 80066f2:	b913      	cbnz	r3, 80066fa <__swsetup_r+0x16>
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 f985 	bl	8006a04 <__sinit>
 80066fa:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <__swsetup_r+0xd0>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	d10f      	bne.n	8006720 <__swsetup_r+0x3c>
 8006700:	686c      	ldr	r4, [r5, #4]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006708:	0719      	lsls	r1, r3, #28
 800670a:	d42c      	bmi.n	8006766 <__swsetup_r+0x82>
 800670c:	06dd      	lsls	r5, r3, #27
 800670e:	d411      	bmi.n	8006734 <__swsetup_r+0x50>
 8006710:	2309      	movs	r3, #9
 8006712:	6033      	str	r3, [r6, #0]
 8006714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	e03e      	b.n	800679e <__swsetup_r+0xba>
 8006720:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <__swsetup_r+0xd4>)
 8006722:	429c      	cmp	r4, r3
 8006724:	d101      	bne.n	800672a <__swsetup_r+0x46>
 8006726:	68ac      	ldr	r4, [r5, #8]
 8006728:	e7eb      	b.n	8006702 <__swsetup_r+0x1e>
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <__swsetup_r+0xd8>)
 800672c:	429c      	cmp	r4, r3
 800672e:	bf08      	it	eq
 8006730:	68ec      	ldreq	r4, [r5, #12]
 8006732:	e7e6      	b.n	8006702 <__swsetup_r+0x1e>
 8006734:	0758      	lsls	r0, r3, #29
 8006736:	d512      	bpl.n	800675e <__swsetup_r+0x7a>
 8006738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800673a:	b141      	cbz	r1, 800674e <__swsetup_r+0x6a>
 800673c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006740:	4299      	cmp	r1, r3
 8006742:	d002      	beq.n	800674a <__swsetup_r+0x66>
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff fb4b 	bl	8005de0 <_free_r>
 800674a:	2300      	movs	r3, #0
 800674c:	6363      	str	r3, [r4, #52]	; 0x34
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	2300      	movs	r3, #0
 8006758:	6063      	str	r3, [r4, #4]
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f043 0308 	orr.w	r3, r3, #8
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	b94b      	cbnz	r3, 800677e <__swsetup_r+0x9a>
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006774:	d003      	beq.n	800677e <__swsetup_r+0x9a>
 8006776:	4621      	mov	r1, r4
 8006778:	4630      	mov	r0, r6
 800677a:	f000 fa09 	bl	8006b90 <__smakebuf_r>
 800677e:	89a0      	ldrh	r0, [r4, #12]
 8006780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006784:	f010 0301 	ands.w	r3, r0, #1
 8006788:	d00a      	beq.n	80067a0 <__swsetup_r+0xbc>
 800678a:	2300      	movs	r3, #0
 800678c:	60a3      	str	r3, [r4, #8]
 800678e:	6963      	ldr	r3, [r4, #20]
 8006790:	425b      	negs	r3, r3
 8006792:	61a3      	str	r3, [r4, #24]
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	b943      	cbnz	r3, 80067aa <__swsetup_r+0xc6>
 8006798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800679c:	d1ba      	bne.n	8006714 <__swsetup_r+0x30>
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	0781      	lsls	r1, r0, #30
 80067a2:	bf58      	it	pl
 80067a4:	6963      	ldrpl	r3, [r4, #20]
 80067a6:	60a3      	str	r3, [r4, #8]
 80067a8:	e7f4      	b.n	8006794 <__swsetup_r+0xb0>
 80067aa:	2000      	movs	r0, #0
 80067ac:	e7f7      	b.n	800679e <__swsetup_r+0xba>
 80067ae:	bf00      	nop
 80067b0:	20000014 	.word	0x20000014
 80067b4:	08007f2c 	.word	0x08007f2c
 80067b8:	08007f4c 	.word	0x08007f4c
 80067bc:	08007f0c 	.word	0x08007f0c

080067c0 <abort>:
 80067c0:	b508      	push	{r3, lr}
 80067c2:	2006      	movs	r0, #6
 80067c4:	f000 fa54 	bl	8006c70 <raise>
 80067c8:	2001      	movs	r0, #1
 80067ca:	f7fb f995 	bl	8001af8 <_exit>
	...

080067d0 <__sflush_r>:
 80067d0:	898a      	ldrh	r2, [r1, #12]
 80067d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d6:	4605      	mov	r5, r0
 80067d8:	0710      	lsls	r0, r2, #28
 80067da:	460c      	mov	r4, r1
 80067dc:	d458      	bmi.n	8006890 <__sflush_r+0xc0>
 80067de:	684b      	ldr	r3, [r1, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dc05      	bgt.n	80067f0 <__sflush_r+0x20>
 80067e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dc02      	bgt.n	80067f0 <__sflush_r+0x20>
 80067ea:	2000      	movs	r0, #0
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067f2:	2e00      	cmp	r6, #0
 80067f4:	d0f9      	beq.n	80067ea <__sflush_r+0x1a>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067fc:	682f      	ldr	r7, [r5, #0]
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	d032      	beq.n	8006868 <__sflush_r+0x98>
 8006802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	075a      	lsls	r2, r3, #29
 8006808:	d505      	bpl.n	8006816 <__sflush_r+0x46>
 800680a:	6863      	ldr	r3, [r4, #4]
 800680c:	1ac0      	subs	r0, r0, r3
 800680e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006810:	b10b      	cbz	r3, 8006816 <__sflush_r+0x46>
 8006812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006814:	1ac0      	subs	r0, r0, r3
 8006816:	2300      	movs	r3, #0
 8006818:	4602      	mov	r2, r0
 800681a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800681c:	6a21      	ldr	r1, [r4, #32]
 800681e:	4628      	mov	r0, r5
 8006820:	47b0      	blx	r6
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	d106      	bne.n	8006836 <__sflush_r+0x66>
 8006828:	6829      	ldr	r1, [r5, #0]
 800682a:	291d      	cmp	r1, #29
 800682c:	d82c      	bhi.n	8006888 <__sflush_r+0xb8>
 800682e:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <__sflush_r+0x108>)
 8006830:	40ca      	lsrs	r2, r1
 8006832:	07d6      	lsls	r6, r2, #31
 8006834:	d528      	bpl.n	8006888 <__sflush_r+0xb8>
 8006836:	2200      	movs	r2, #0
 8006838:	6062      	str	r2, [r4, #4]
 800683a:	04d9      	lsls	r1, r3, #19
 800683c:	6922      	ldr	r2, [r4, #16]
 800683e:	6022      	str	r2, [r4, #0]
 8006840:	d504      	bpl.n	800684c <__sflush_r+0x7c>
 8006842:	1c42      	adds	r2, r0, #1
 8006844:	d101      	bne.n	800684a <__sflush_r+0x7a>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	b903      	cbnz	r3, 800684c <__sflush_r+0x7c>
 800684a:	6560      	str	r0, [r4, #84]	; 0x54
 800684c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800684e:	602f      	str	r7, [r5, #0]
 8006850:	2900      	cmp	r1, #0
 8006852:	d0ca      	beq.n	80067ea <__sflush_r+0x1a>
 8006854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006858:	4299      	cmp	r1, r3
 800685a:	d002      	beq.n	8006862 <__sflush_r+0x92>
 800685c:	4628      	mov	r0, r5
 800685e:	f7ff fabf 	bl	8005de0 <_free_r>
 8006862:	2000      	movs	r0, #0
 8006864:	6360      	str	r0, [r4, #52]	; 0x34
 8006866:	e7c1      	b.n	80067ec <__sflush_r+0x1c>
 8006868:	6a21      	ldr	r1, [r4, #32]
 800686a:	2301      	movs	r3, #1
 800686c:	4628      	mov	r0, r5
 800686e:	47b0      	blx	r6
 8006870:	1c41      	adds	r1, r0, #1
 8006872:	d1c7      	bne.n	8006804 <__sflush_r+0x34>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0c4      	beq.n	8006804 <__sflush_r+0x34>
 800687a:	2b1d      	cmp	r3, #29
 800687c:	d001      	beq.n	8006882 <__sflush_r+0xb2>
 800687e:	2b16      	cmp	r3, #22
 8006880:	d101      	bne.n	8006886 <__sflush_r+0xb6>
 8006882:	602f      	str	r7, [r5, #0]
 8006884:	e7b1      	b.n	80067ea <__sflush_r+0x1a>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	e7ad      	b.n	80067ec <__sflush_r+0x1c>
 8006890:	690f      	ldr	r7, [r1, #16]
 8006892:	2f00      	cmp	r7, #0
 8006894:	d0a9      	beq.n	80067ea <__sflush_r+0x1a>
 8006896:	0793      	lsls	r3, r2, #30
 8006898:	680e      	ldr	r6, [r1, #0]
 800689a:	bf08      	it	eq
 800689c:	694b      	ldreq	r3, [r1, #20]
 800689e:	600f      	str	r7, [r1, #0]
 80068a0:	bf18      	it	ne
 80068a2:	2300      	movne	r3, #0
 80068a4:	eba6 0807 	sub.w	r8, r6, r7
 80068a8:	608b      	str	r3, [r1, #8]
 80068aa:	f1b8 0f00 	cmp.w	r8, #0
 80068ae:	dd9c      	ble.n	80067ea <__sflush_r+0x1a>
 80068b0:	6a21      	ldr	r1, [r4, #32]
 80068b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068b4:	4643      	mov	r3, r8
 80068b6:	463a      	mov	r2, r7
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b0      	blx	r6
 80068bc:	2800      	cmp	r0, #0
 80068be:	dc06      	bgt.n	80068ce <__sflush_r+0xfe>
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	e78e      	b.n	80067ec <__sflush_r+0x1c>
 80068ce:	4407      	add	r7, r0
 80068d0:	eba8 0800 	sub.w	r8, r8, r0
 80068d4:	e7e9      	b.n	80068aa <__sflush_r+0xda>
 80068d6:	bf00      	nop
 80068d8:	20400001 	.word	0x20400001

080068dc <_fflush_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	690b      	ldr	r3, [r1, #16]
 80068e0:	4605      	mov	r5, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	b913      	cbnz	r3, 80068ec <_fflush_r+0x10>
 80068e6:	2500      	movs	r5, #0
 80068e8:	4628      	mov	r0, r5
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	b118      	cbz	r0, 80068f6 <_fflush_r+0x1a>
 80068ee:	6983      	ldr	r3, [r0, #24]
 80068f0:	b90b      	cbnz	r3, 80068f6 <_fflush_r+0x1a>
 80068f2:	f000 f887 	bl	8006a04 <__sinit>
 80068f6:	4b14      	ldr	r3, [pc, #80]	; (8006948 <_fflush_r+0x6c>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	d11b      	bne.n	8006934 <_fflush_r+0x58>
 80068fc:	686c      	ldr	r4, [r5, #4]
 80068fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ef      	beq.n	80068e6 <_fflush_r+0xa>
 8006906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006908:	07d0      	lsls	r0, r2, #31
 800690a:	d404      	bmi.n	8006916 <_fflush_r+0x3a>
 800690c:	0599      	lsls	r1, r3, #22
 800690e:	d402      	bmi.n	8006916 <_fflush_r+0x3a>
 8006910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006912:	f000 f915 	bl	8006b40 <__retarget_lock_acquire_recursive>
 8006916:	4628      	mov	r0, r5
 8006918:	4621      	mov	r1, r4
 800691a:	f7ff ff59 	bl	80067d0 <__sflush_r>
 800691e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006920:	07da      	lsls	r2, r3, #31
 8006922:	4605      	mov	r5, r0
 8006924:	d4e0      	bmi.n	80068e8 <_fflush_r+0xc>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	059b      	lsls	r3, r3, #22
 800692a:	d4dd      	bmi.n	80068e8 <_fflush_r+0xc>
 800692c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692e:	f000 f908 	bl	8006b42 <__retarget_lock_release_recursive>
 8006932:	e7d9      	b.n	80068e8 <_fflush_r+0xc>
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <_fflush_r+0x70>)
 8006936:	429c      	cmp	r4, r3
 8006938:	d101      	bne.n	800693e <_fflush_r+0x62>
 800693a:	68ac      	ldr	r4, [r5, #8]
 800693c:	e7df      	b.n	80068fe <_fflush_r+0x22>
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <_fflush_r+0x74>)
 8006940:	429c      	cmp	r4, r3
 8006942:	bf08      	it	eq
 8006944:	68ec      	ldreq	r4, [r5, #12]
 8006946:	e7da      	b.n	80068fe <_fflush_r+0x22>
 8006948:	08007f2c 	.word	0x08007f2c
 800694c:	08007f4c 	.word	0x08007f4c
 8006950:	08007f0c 	.word	0x08007f0c

08006954 <std>:
 8006954:	2300      	movs	r3, #0
 8006956:	b510      	push	{r4, lr}
 8006958:	4604      	mov	r4, r0
 800695a:	e9c0 3300 	strd	r3, r3, [r0]
 800695e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006962:	6083      	str	r3, [r0, #8]
 8006964:	8181      	strh	r1, [r0, #12]
 8006966:	6643      	str	r3, [r0, #100]	; 0x64
 8006968:	81c2      	strh	r2, [r0, #14]
 800696a:	6183      	str	r3, [r0, #24]
 800696c:	4619      	mov	r1, r3
 800696e:	2208      	movs	r2, #8
 8006970:	305c      	adds	r0, #92	; 0x5c
 8006972:	f7fd fb83 	bl	800407c <memset>
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <std+0x38>)
 8006978:	6263      	str	r3, [r4, #36]	; 0x24
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <std+0x3c>)
 800697c:	62a3      	str	r3, [r4, #40]	; 0x28
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <std+0x40>)
 8006980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <std+0x44>)
 8006984:	6224      	str	r4, [r4, #32]
 8006986:	6323      	str	r3, [r4, #48]	; 0x30
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	08006ca9 	.word	0x08006ca9
 8006990:	08006ccb 	.word	0x08006ccb
 8006994:	08006d03 	.word	0x08006d03
 8006998:	08006d27 	.word	0x08006d27

0800699c <_cleanup_r>:
 800699c:	4901      	ldr	r1, [pc, #4]	; (80069a4 <_cleanup_r+0x8>)
 800699e:	f000 b8af 	b.w	8006b00 <_fwalk_reent>
 80069a2:	bf00      	nop
 80069a4:	080068dd 	.word	0x080068dd

080069a8 <__sfmoreglue>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	2268      	movs	r2, #104	; 0x68
 80069ac:	1e4d      	subs	r5, r1, #1
 80069ae:	4355      	muls	r5, r2
 80069b0:	460e      	mov	r6, r1
 80069b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069b6:	f7ff fa7f 	bl	8005eb8 <_malloc_r>
 80069ba:	4604      	mov	r4, r0
 80069bc:	b140      	cbz	r0, 80069d0 <__sfmoreglue+0x28>
 80069be:	2100      	movs	r1, #0
 80069c0:	e9c0 1600 	strd	r1, r6, [r0]
 80069c4:	300c      	adds	r0, #12
 80069c6:	60a0      	str	r0, [r4, #8]
 80069c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069cc:	f7fd fb56 	bl	800407c <memset>
 80069d0:	4620      	mov	r0, r4
 80069d2:	bd70      	pop	{r4, r5, r6, pc}

080069d4 <__sfp_lock_acquire>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sfp_lock_acquire+0x8>)
 80069d6:	f000 b8b3 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	20000719 	.word	0x20000719

080069e0 <__sfp_lock_release>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__sfp_lock_release+0x8>)
 80069e2:	f000 b8ae 	b.w	8006b42 <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000719 	.word	0x20000719

080069ec <__sinit_lock_acquire>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__sinit_lock_acquire+0x8>)
 80069ee:	f000 b8a7 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 80069f2:	bf00      	nop
 80069f4:	2000071a 	.word	0x2000071a

080069f8 <__sinit_lock_release>:
 80069f8:	4801      	ldr	r0, [pc, #4]	; (8006a00 <__sinit_lock_release+0x8>)
 80069fa:	f000 b8a2 	b.w	8006b42 <__retarget_lock_release_recursive>
 80069fe:	bf00      	nop
 8006a00:	2000071a 	.word	0x2000071a

08006a04 <__sinit>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	4604      	mov	r4, r0
 8006a08:	f7ff fff0 	bl	80069ec <__sinit_lock_acquire>
 8006a0c:	69a3      	ldr	r3, [r4, #24]
 8006a0e:	b11b      	cbz	r3, 8006a18 <__sinit+0x14>
 8006a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a14:	f7ff bff0 	b.w	80069f8 <__sinit_lock_release>
 8006a18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a1c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <__sinit+0x68>)
 8006a20:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <__sinit+0x6c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	bf04      	itt	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	61a3      	streq	r3, [r4, #24]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 f820 	bl	8006a74 <__sfp>
 8006a34:	6060      	str	r0, [r4, #4]
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f81c 	bl	8006a74 <__sfp>
 8006a3c:	60a0      	str	r0, [r4, #8]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f818 	bl	8006a74 <__sfp>
 8006a44:	2200      	movs	r2, #0
 8006a46:	60e0      	str	r0, [r4, #12]
 8006a48:	2104      	movs	r1, #4
 8006a4a:	6860      	ldr	r0, [r4, #4]
 8006a4c:	f7ff ff82 	bl	8006954 <std>
 8006a50:	68a0      	ldr	r0, [r4, #8]
 8006a52:	2201      	movs	r2, #1
 8006a54:	2109      	movs	r1, #9
 8006a56:	f7ff ff7d 	bl	8006954 <std>
 8006a5a:	68e0      	ldr	r0, [r4, #12]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	2112      	movs	r1, #18
 8006a60:	f7ff ff78 	bl	8006954 <std>
 8006a64:	2301      	movs	r3, #1
 8006a66:	61a3      	str	r3, [r4, #24]
 8006a68:	e7d2      	b.n	8006a10 <__sinit+0xc>
 8006a6a:	bf00      	nop
 8006a6c:	08007b90 	.word	0x08007b90
 8006a70:	0800699d 	.word	0x0800699d

08006a74 <__sfp>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	4607      	mov	r7, r0
 8006a78:	f7ff ffac 	bl	80069d4 <__sfp_lock_acquire>
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <__sfp+0x84>)
 8006a7e:	681e      	ldr	r6, [r3, #0]
 8006a80:	69b3      	ldr	r3, [r6, #24]
 8006a82:	b913      	cbnz	r3, 8006a8a <__sfp+0x16>
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff ffbd 	bl	8006a04 <__sinit>
 8006a8a:	3648      	adds	r6, #72	; 0x48
 8006a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	d503      	bpl.n	8006a9c <__sfp+0x28>
 8006a94:	6833      	ldr	r3, [r6, #0]
 8006a96:	b30b      	cbz	r3, 8006adc <__sfp+0x68>
 8006a98:	6836      	ldr	r6, [r6, #0]
 8006a9a:	e7f7      	b.n	8006a8c <__sfp+0x18>
 8006a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006aa0:	b9d5      	cbnz	r5, 8006ad8 <__sfp+0x64>
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <__sfp+0x88>)
 8006aa4:	60e3      	str	r3, [r4, #12]
 8006aa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aaa:	6665      	str	r5, [r4, #100]	; 0x64
 8006aac:	f000 f847 	bl	8006b3e <__retarget_lock_init_recursive>
 8006ab0:	f7ff ff96 	bl	80069e0 <__sfp_lock_release>
 8006ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	61a5      	str	r5, [r4, #24]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ac8:	f7fd fad8 	bl	800407c <memset>
 8006acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad8:	3468      	adds	r4, #104	; 0x68
 8006ada:	e7d9      	b.n	8006a90 <__sfp+0x1c>
 8006adc:	2104      	movs	r1, #4
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f7ff ff62 	bl	80069a8 <__sfmoreglue>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	6030      	str	r0, [r6, #0]
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d1d5      	bne.n	8006a98 <__sfp+0x24>
 8006aec:	f7ff ff78 	bl	80069e0 <__sfp_lock_release>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	e7ee      	b.n	8006ad4 <__sfp+0x60>
 8006af6:	bf00      	nop
 8006af8:	08007b90 	.word	0x08007b90
 8006afc:	ffff0001 	.word	0xffff0001

08006b00 <_fwalk_reent>:
 8006b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	4606      	mov	r6, r0
 8006b06:	4688      	mov	r8, r1
 8006b08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b0c:	2700      	movs	r7, #0
 8006b0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b12:	f1b9 0901 	subs.w	r9, r9, #1
 8006b16:	d505      	bpl.n	8006b24 <_fwalk_reent+0x24>
 8006b18:	6824      	ldr	r4, [r4, #0]
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	d1f7      	bne.n	8006b0e <_fwalk_reent+0xe>
 8006b1e:	4638      	mov	r0, r7
 8006b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b24:	89ab      	ldrh	r3, [r5, #12]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d907      	bls.n	8006b3a <_fwalk_reent+0x3a>
 8006b2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	d003      	beq.n	8006b3a <_fwalk_reent+0x3a>
 8006b32:	4629      	mov	r1, r5
 8006b34:	4630      	mov	r0, r6
 8006b36:	47c0      	blx	r8
 8006b38:	4307      	orrs	r7, r0
 8006b3a:	3568      	adds	r5, #104	; 0x68
 8006b3c:	e7e9      	b.n	8006b12 <_fwalk_reent+0x12>

08006b3e <__retarget_lock_init_recursive>:
 8006b3e:	4770      	bx	lr

08006b40 <__retarget_lock_acquire_recursive>:
 8006b40:	4770      	bx	lr

08006b42 <__retarget_lock_release_recursive>:
 8006b42:	4770      	bx	lr

08006b44 <__swhatbuf_r>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	460e      	mov	r6, r1
 8006b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	b096      	sub	sp, #88	; 0x58
 8006b50:	4614      	mov	r4, r2
 8006b52:	461d      	mov	r5, r3
 8006b54:	da08      	bge.n	8006b68 <__swhatbuf_r+0x24>
 8006b56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	602a      	str	r2, [r5, #0]
 8006b5e:	061a      	lsls	r2, r3, #24
 8006b60:	d410      	bmi.n	8006b84 <__swhatbuf_r+0x40>
 8006b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b66:	e00e      	b.n	8006b86 <__swhatbuf_r+0x42>
 8006b68:	466a      	mov	r2, sp
 8006b6a:	f000 f903 	bl	8006d74 <_fstat_r>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	dbf1      	blt.n	8006b56 <__swhatbuf_r+0x12>
 8006b72:	9a01      	ldr	r2, [sp, #4]
 8006b74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b7c:	425a      	negs	r2, r3
 8006b7e:	415a      	adcs	r2, r3
 8006b80:	602a      	str	r2, [r5, #0]
 8006b82:	e7ee      	b.n	8006b62 <__swhatbuf_r+0x1e>
 8006b84:	2340      	movs	r3, #64	; 0x40
 8006b86:	2000      	movs	r0, #0
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	b016      	add	sp, #88	; 0x58
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b90 <__smakebuf_r>:
 8006b90:	898b      	ldrh	r3, [r1, #12]
 8006b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b94:	079d      	lsls	r5, r3, #30
 8006b96:	4606      	mov	r6, r0
 8006b98:	460c      	mov	r4, r1
 8006b9a:	d507      	bpl.n	8006bac <__smakebuf_r+0x1c>
 8006b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	6163      	str	r3, [r4, #20]
 8006ba8:	b002      	add	sp, #8
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	ab01      	add	r3, sp, #4
 8006bae:	466a      	mov	r2, sp
 8006bb0:	f7ff ffc8 	bl	8006b44 <__swhatbuf_r>
 8006bb4:	9900      	ldr	r1, [sp, #0]
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff f97d 	bl	8005eb8 <_malloc_r>
 8006bbe:	b948      	cbnz	r0, 8006bd4 <__smakebuf_r+0x44>
 8006bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc4:	059a      	lsls	r2, r3, #22
 8006bc6:	d4ef      	bmi.n	8006ba8 <__smakebuf_r+0x18>
 8006bc8:	f023 0303 	bic.w	r3, r3, #3
 8006bcc:	f043 0302 	orr.w	r3, r3, #2
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	e7e3      	b.n	8006b9c <__smakebuf_r+0xc>
 8006bd4:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <__smakebuf_r+0x7c>)
 8006bd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	6020      	str	r0, [r4, #0]
 8006bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	9b00      	ldr	r3, [sp, #0]
 8006be4:	6163      	str	r3, [r4, #20]
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	6120      	str	r0, [r4, #16]
 8006bea:	b15b      	cbz	r3, 8006c04 <__smakebuf_r+0x74>
 8006bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f8d1 	bl	8006d98 <_isatty_r>
 8006bf6:	b128      	cbz	r0, 8006c04 <__smakebuf_r+0x74>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	89a0      	ldrh	r0, [r4, #12]
 8006c06:	4305      	orrs	r5, r0
 8006c08:	81a5      	strh	r5, [r4, #12]
 8006c0a:	e7cd      	b.n	8006ba8 <__smakebuf_r+0x18>
 8006c0c:	0800699d 	.word	0x0800699d

08006c10 <_malloc_usable_size_r>:
 8006c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c14:	1f18      	subs	r0, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bfbc      	itt	lt
 8006c1a:	580b      	ldrlt	r3, [r1, r0]
 8006c1c:	18c0      	addlt	r0, r0, r3
 8006c1e:	4770      	bx	lr

08006c20 <_raise_r>:
 8006c20:	291f      	cmp	r1, #31
 8006c22:	b538      	push	{r3, r4, r5, lr}
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	d904      	bls.n	8006c34 <_raise_r+0x14>
 8006c2a:	2316      	movs	r3, #22
 8006c2c:	6003      	str	r3, [r0, #0]
 8006c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c36:	b112      	cbz	r2, 8006c3e <_raise_r+0x1e>
 8006c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c3c:	b94b      	cbnz	r3, 8006c52 <_raise_r+0x32>
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f830 	bl	8006ca4 <_getpid_r>
 8006c44:	462a      	mov	r2, r5
 8006c46:	4601      	mov	r1, r0
 8006c48:	4620      	mov	r0, r4
 8006c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c4e:	f000 b817 	b.w	8006c80 <_kill_r>
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d00a      	beq.n	8006c6c <_raise_r+0x4c>
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	d103      	bne.n	8006c62 <_raise_r+0x42>
 8006c5a:	2316      	movs	r3, #22
 8006c5c:	6003      	str	r3, [r0, #0]
 8006c5e:	2001      	movs	r0, #1
 8006c60:	e7e7      	b.n	8006c32 <_raise_r+0x12>
 8006c62:	2400      	movs	r4, #0
 8006c64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c68:	4628      	mov	r0, r5
 8006c6a:	4798      	blx	r3
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e7e0      	b.n	8006c32 <_raise_r+0x12>

08006c70 <raise>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <raise+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f7ff bfd3 	b.w	8006c20 <_raise_r>
 8006c7a:	bf00      	nop
 8006c7c:	20000014 	.word	0x20000014

08006c80 <_kill_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_kill_r+0x20>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	f7fa ff23 	bl	8001ad8 <_kill>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d102      	bne.n	8006c9c <_kill_r+0x1c>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b103      	cbz	r3, 8006c9c <_kill_r+0x1c>
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000714 	.word	0x20000714

08006ca4 <_getpid_r>:
 8006ca4:	f7fa bf10 	b.w	8001ac8 <_getpid>

08006ca8 <__sread>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	460c      	mov	r4, r1
 8006cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb0:	f000 f894 	bl	8006ddc <_read_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	bfab      	itete	ge
 8006cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cba:	89a3      	ldrhlt	r3, [r4, #12]
 8006cbc:	181b      	addge	r3, r3, r0
 8006cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cc2:	bfac      	ite	ge
 8006cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cc6:	81a3      	strhlt	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__swrite>:
 8006cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	461f      	mov	r7, r3
 8006cd0:	898b      	ldrh	r3, [r1, #12]
 8006cd2:	05db      	lsls	r3, r3, #23
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	4616      	mov	r6, r2
 8006cda:	d505      	bpl.n	8006ce8 <__swrite+0x1e>
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f000 f868 	bl	8006db8 <_lseek_r>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	f000 b817 	b.w	8006d30 <_write_r>

08006d02 <__sseek>:
 8006d02:	b510      	push	{r4, lr}
 8006d04:	460c      	mov	r4, r1
 8006d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0a:	f000 f855 	bl	8006db8 <_lseek_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	bf15      	itete	ne
 8006d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d1e:	81a3      	strheq	r3, [r4, #12]
 8006d20:	bf18      	it	ne
 8006d22:	81a3      	strhne	r3, [r4, #12]
 8006d24:	bd10      	pop	{r4, pc}

08006d26 <__sclose>:
 8006d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2a:	f000 b813 	b.w	8006d54 <_close_r>
	...

08006d30 <_write_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_write_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7fa ff01 	bl	8001b46 <_write>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_write_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_write_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20000714 	.word	0x20000714

08006d54 <_close_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	; (8006d70 <_close_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fa ff0d 	bl	8001b7e <_close>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_close_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_close_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000714 	.word	0x20000714

08006d74 <_fstat_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	; (8006d94 <_fstat_r+0x20>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	f7fa ff08 	bl	8001b96 <_fstat>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d102      	bne.n	8006d90 <_fstat_r+0x1c>
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	b103      	cbz	r3, 8006d90 <_fstat_r+0x1c>
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
 8006d92:	bf00      	nop
 8006d94:	20000714 	.word	0x20000714

08006d98 <_isatty_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	; (8006db4 <_isatty_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fa ff07 	bl	8001bb6 <_isatty>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_isatty_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_isatty_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000714 	.word	0x20000714

08006db8 <_lseek_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	; (8006dd8 <_lseek_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fa ff00 	bl	8001bcc <_lseek>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_lseek_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_lseek_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000714 	.word	0x20000714

08006ddc <_read_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_read_r+0x20>)
 8006de0:	4604      	mov	r4, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	602a      	str	r2, [r5, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f7fa fe8e 	bl	8001b0c <_read>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_read_r+0x1e>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_read_r+0x1e>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000714 	.word	0x20000714

08006e00 <_init>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr

08006e0c <_fini>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr
